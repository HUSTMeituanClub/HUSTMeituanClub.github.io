<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>华科美团点评技术俱乐部</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-05-25T20:54:08+08:00</updated><entry><title>Android Google官方MVP架构分析</title><link href="/android-googleguan-fang-mvpjia-gou-fen-xi.html" rel="alternate"></link><published>2017-05-25T20:54:08+08:00</published><updated>2017-05-25T20:54:08+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-05-25:/android-googleguan-fang-mvpjia-gou-fen-xi.html</id><summary type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;关于MVP模式的基本介绍与优缺点可以参见下面这篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://segmentfault.com/a/1190000003927200&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文的重点是对Google官方写的一个MVP架构实现的Demo进行简单的分析来看看谷歌实现的Android MVP架构是怎么搭建的。&lt;/p&gt;
&lt;p&gt;谷歌官方的架构Demo地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/googlesamples/android-architecture&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文所讲解的为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/googlesamples/android-architecture/tree/todo-mvp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要读者参照源码查看本文。&lt;/p&gt;
&lt;p&gt;我将这个todo应用的框架提炼出来（同时也意味着丢失了很多的实现细节，但可以将架构看得更加清晰），制作了一张伪&lt;code&gt;UML&lt;/code&gt;图（为了简化，没有遵循&lt;code&gt;UML&lt;/code&gt;的规范），下面我们参照着表中的内容进行分析：&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img src="/images/android_mvp_uml.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;BaseView与BasePresenter&lt;/h2&gt;
&lt;p&gt;可以看到它们是独立于包外的两个基础接口，之后的所有&lt;code&gt;View&lt;/code&gt;与&lt;code&gt;Presenter&lt;/code&gt;接口都将继承它们，所以应该将一些通用的方法写在这两个&lt;code&gt;Base&lt;/code&gt;接口中。&lt;/p&gt;
&lt;h2&gt;tasks包&lt;/h2&gt;
&lt;p&gt;整个app中&lt;code&gt;tasks&lt;/code&gt;、&lt;code&gt;taskdetail&lt;/code&gt;、&lt;code&gt;statistics …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;关于MVP模式的基本介绍与优缺点可以参见下面这篇文章：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://segmentfault.com/a/1190000003927200&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文的重点是对Google官方写的一个MVP架构实现的Demo进行简单的分析来看看谷歌实现的Android MVP架构是怎么搭建的。&lt;/p&gt;
&lt;p&gt;谷歌官方的架构Demo地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/googlesamples/android-architecture&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文所讲解的为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://github.com/googlesamples/android-architecture/tree/todo-mvp&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;需要读者参照源码查看本文。&lt;/p&gt;
&lt;p&gt;我将这个todo应用的框架提炼出来（同时也意味着丢失了很多的实现细节，但可以将架构看得更加清晰），制作了一张伪&lt;code&gt;UML&lt;/code&gt;图（为了简化，没有遵循&lt;code&gt;UML&lt;/code&gt;的规范），下面我们参照着表中的内容进行分析：&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;&lt;img src="/images/android_mvp_uml.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;BaseView与BasePresenter&lt;/h2&gt;
&lt;p&gt;可以看到它们是独立于包外的两个基础接口，之后的所有&lt;code&gt;View&lt;/code&gt;与&lt;code&gt;Presenter&lt;/code&gt;接口都将继承它们，所以应该将一些通用的方法写在这两个&lt;code&gt;Base&lt;/code&gt;接口中。&lt;/p&gt;
&lt;h2&gt;tasks包&lt;/h2&gt;
&lt;p&gt;整个app中&lt;code&gt;tasks&lt;/code&gt;、&lt;code&gt;taskdetail&lt;/code&gt;、&lt;code&gt;statistics&lt;/code&gt;三个包对应着的就是三个&lt;code&gt;Activity&lt;/code&gt;，可以看到每一个包中包含了对应的&lt;code&gt;Activity&lt;/code&gt;、&lt;code&gt;View&lt;/code&gt; 、&lt;code&gt;Presenter&lt;/code&gt;与&lt;code&gt;Contract&lt;/code&gt;类和其他工具组件，通过这样的方式构成了应用的一个组成单元（每一个&lt;code&gt;Activity&lt;/code&gt;与其对应的&lt;code&gt;View&lt;/code&gt;和实现逻辑的&lt;code&gt;Presenter&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;图中我只展现了&lt;code&gt;tasks&lt;/code&gt;这一个包，其他的包内部的结构也是一样的。&lt;/p&gt;
&lt;h3&gt;TasksContract接口&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TasksContract&lt;/code&gt;接口包含两个接口，分别是继承了&lt;code&gt;BaseView&lt;/code&gt;与&lt;code&gt;BasePresenter&lt;/code&gt;的&lt;code&gt;View&lt;/code&gt;与&lt;code&gt;Presenter&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们可以将&lt;code&gt;Contract&lt;/code&gt;接口视为管理&lt;code&gt;View&lt;/code&gt;与&lt;code&gt;Presenter&lt;/code&gt;需要实现的方法的汇总接口，这些方法在实例类中实际上都是通过接口来进行调用的，这样就可以避免依赖于某一个特定类的方法来进行处理，从而可以有多种实现&lt;code&gt;View&lt;/code&gt;与&lt;code&gt;Presenter&lt;/code&gt;的方式，便于进行单元测试（可以看到源代码中就有很多单元测试的内容，但是在这篇文章中我们将它们忽略）。&lt;/p&gt;
&lt;p&gt;一切与更新UI有关的逻辑都应该放在&lt;code&gt;TasksContract.View&lt;/code&gt;接口中。&lt;/p&gt;
&lt;p&gt;一切与业务有关的逻辑都应该放在&lt;code&gt;TaskContract.Presenter&lt;/code&gt;接口中。&lt;/p&gt;
&lt;h3&gt;TasksFragment与TasksPresenter&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TasksFragment&lt;/code&gt;与&lt;code&gt;TaskPresenter&lt;/code&gt;分别是&lt;code&gt;TasksContract.View&lt;/code&gt;与&lt;code&gt;TaskContract.Presenter&lt;/code&gt;接口的实例。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TaskActivity&lt;/code&gt;在初始化时会先创建&lt;code&gt;TasksFragment&lt;/code&gt;实例，再将其作为构造参数传递给&lt;code&gt;TaskPresenter&lt;/code&gt;，&lt;code&gt;TaskPresenter&lt;/code&gt;在构造方法中又会调用&lt;code&gt;TasksFragment&lt;/code&gt;的&lt;code&gt;setPresenter&lt;/code&gt;方法将自身传递给&lt;code&gt;TasksFragment&lt;/code&gt;。这样&lt;code&gt;Presenter&lt;/code&gt;与&lt;code&gt;View&lt;/code&gt;就分别存有了一份对方的引用。&lt;/p&gt;
&lt;p&gt;构造完成后，当用户与UI进行交互，&lt;code&gt;View&lt;/code&gt;一律调用&lt;code&gt;Presenter&lt;/code&gt;的相关方法来进行交互事件的处理或请求数据更新。如果有新的内容需要呈现在UI上，则由&lt;code&gt;Presenter&lt;/code&gt;调用&lt;code&gt;View&lt;/code&gt;的相关方法来进行更新。&lt;code&gt;Presenter&lt;/code&gt;则负责与上一级的数据存储池进行交互来更新数据或是获取新的数据。&lt;/p&gt;
&lt;p&gt;可以看到&lt;code&gt;Presenter&lt;/code&gt;充当了一个“中介”，&lt;code&gt;View&lt;/code&gt;的所有请求都将交由&lt;code&gt;Presenter&lt;/code&gt;进行处理，而&lt;code&gt;View&lt;/code&gt;现在需要做的只有提供相应方法供&lt;code&gt;Presenter&lt;/code&gt;进行调用，避免了将大量业务逻辑写在&lt;code&gt;View&lt;/code&gt;中。同时也避免了&lt;code&gt;View&lt;/code&gt;与数据的直接交互，而是由&lt;code&gt;Presenter&lt;/code&gt;“单线操作”，降低了耦合度。&lt;/p&gt;
&lt;h2&gt;Data包&lt;/h2&gt;
&lt;h3&gt;Task&lt;/h3&gt;
&lt;p&gt;这里的&lt;code&gt;Task&lt;/code&gt;是一个&lt;a href="https://en.wikipedia.org/wiki/Plain_old_Java_object"&gt;&lt;code&gt;POJO&lt;/code&gt;&lt;/a&gt;类，用于表示储存的数据。&lt;/p&gt;
&lt;h3&gt;source包&lt;/h3&gt;
&lt;h4&gt;TaskDataSource接口&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;TaskDataSource&lt;/code&gt;接口定义了所有可以的用于操作数据的对象的方法，换句话说，无论数据的来源是什么，我们都可以通过调用实现了这个接口的对象的方法来操纵数据。&lt;/p&gt;
&lt;h4&gt;GetTaskCallback与LoadTasksCallback&lt;/h4&gt;
&lt;p&gt;注意到用于获取数据的方法的参数都利用了&lt;code&gt;callback&lt;/code&gt;进行回调来传递数据。这样做主要因为数据的获取有可能是异步的，使用回调机制可以避免线程因为等待数据而阻塞。&lt;/p&gt;
&lt;h4&gt;local包与remote包&lt;/h4&gt;
&lt;p&gt;这两个包分别存放着一个实现了&lt;code&gt;TaskDataSource&lt;/code&gt;接口的类，他们就代表了从本地缓存获取数据与从远端获取数据。当然与获取数据有关的其他类也应该放在这个包下。&lt;/p&gt;
&lt;h4&gt;TaskRepository&lt;/h4&gt;
&lt;p&gt;有了从本地与远端获取数据的类，那么就应该有一个类对它们进行管理，我们希望的是有本地缓存时读取本地缓存，没有时就从远端的获取数据。在更为复杂的情况下，我们需要处理来自远端的请求并与本地的数据进行同步。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TaskRepository&lt;/code&gt;就是用于管理所有的这些数据来源并统一成一个&lt;code&gt;TaskDataSource&lt;/code&gt;暴露给&lt;code&gt;Presenter&lt;/code&gt;来操作数据，而这些数据管理逻辑就被隐藏在了&lt;code&gt;TaskRepository&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;值得注意的是，源码中在&lt;code&gt;TaskRepository&lt;/code&gt;中还实现了一个内存缓存，可以避免从其他两个低速来源中获取数据。&lt;/p&gt;</content><category term="android"></category><category term="MVP"></category><category term="architecture"></category></entry><entry><title>MacTex配置中文&amp;fontawesome</title><link href="/mactexpei-zhi-zhong-wen-fontawesome.html" rel="alternate"></link><published>2017-05-23T08:40:57+08:00</published><updated>2017-05-23T08:40:57+08:00</updated><author><name>Weihong Wang</name></author><id>tag:None,2017-05-23:/mactexpei-zhi-zhong-wen-fontawesome.html</id><summary type="html">&lt;p&gt;最近报名了一个hackinit()的活动，然后需要写一份简历，去github上捞了一波模版，然而对于一个从来没用过latex的小白来说，刚开始的时候最麻烦的怕不就是本地环境的搭建了w&lt;/p&gt;
&lt;p&gt;捞的resume模版&lt;a href="https://github.com/dyinnz/uniquecv"&gt;在这里！&lt;/a&gt;，是联创前队长写的一份uniquecv。&lt;/p&gt;
&lt;p&gt;下面开始配置：&lt;/p&gt;
&lt;h3&gt;安装MacTex&lt;/h3&gt;
&lt;p&gt;听很多人说这个软件是mac下比较好用的latex工具，所以就下载了，对于没接触过latex的小白来说，直接点击下载那个完整版，就是2.7G的那个文件&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tug.org/mactex/downloading.html"&gt;这里是下载链接&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;打开以后会得到一大堆的东西&lt;/h4&gt;
&lt;p&gt;&lt;img src="/images/mactax.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;打开taxshop&lt;/h3&gt;
&lt;p&gt;之后的编译等等都是在这个软件下进行的。具体的latex语法什么的就不细说了。&lt;/p&gt;
&lt;h3&gt;配置中文&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;左上角将latex选为xelatex&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="更改xelatex" src="/images/xelatex.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开texshop的「偏好设置」将「字符编码」改为&lt;code&gt;utf-8&lt;/code&gt;，记得保存文件的时候也看一下是否是以&lt;code&gt;utf-8&lt;/code&gt;编码的哦w&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前往系统的「应用软件」-&amp;gt;「字体集」，查看你需要的是什么字体。
  如图上所示：Songti SC&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Songtisc" src="/images/songtisc.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;测试一下w：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[nofonts]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;ctexart&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti, ItalicFont=STKaiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STSong …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;最近报名了一个hackinit()的活动，然后需要写一份简历，去github上捞了一波模版，然而对于一个从来没用过latex的小白来说，刚开始的时候最麻烦的怕不就是本地环境的搭建了w&lt;/p&gt;
&lt;p&gt;捞的resume模版&lt;a href="https://github.com/dyinnz/uniquecv"&gt;在这里！&lt;/a&gt;，是联创前队长写的一份uniquecv。&lt;/p&gt;
&lt;p&gt;下面开始配置：&lt;/p&gt;
&lt;h3&gt;安装MacTex&lt;/h3&gt;
&lt;p&gt;听很多人说这个软件是mac下比较好用的latex工具，所以就下载了，对于没接触过latex的小白来说，直接点击下载那个完整版，就是2.7G的那个文件&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tug.org/mactex/downloading.html"&gt;这里是下载链接&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;打开以后会得到一大堆的东西&lt;/h4&gt;
&lt;p&gt;&lt;img src="/images/mactax.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;打开taxshop&lt;/h3&gt;
&lt;p&gt;之后的编译等等都是在这个软件下进行的。具体的latex语法什么的就不细说了。&lt;/p&gt;
&lt;h3&gt;配置中文&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;左上角将latex选为xelatex&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="更改xelatex" src="/images/xelatex.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开texshop的「偏好设置」将「字符编码」改为&lt;code&gt;utf-8&lt;/code&gt;，记得保存文件的时候也看一下是否是以&lt;code&gt;utf-8&lt;/code&gt;编码的哦w&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前往系统的「应用软件」-&amp;gt;「字体集」，查看你需要的是什么字体。
  如图上所示：Songti SC&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Songtisc" src="/images/songtisc.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;测试一下w：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="na"&gt;[nofonts]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;ctexart&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti, ItalicFont=STKaiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STSong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKsansfont&lt;/span&gt;&lt;span class="na"&gt;[BoldFont=STHeiti]&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STXihei&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\setCJKmonofont&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;STFangsong&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
汉字ddd
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;此时应该就可以显示出中文啦&lt;/p&gt;
&lt;p&gt;&lt;img alt="zhongwen.jpg" src="/images/zhongwen.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;配置fontawesome&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;fontawesome是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Font Awesome为您提供可缩放的矢量图标，您可以使用CSS所提供的所有特性对它们进行更改，包括：大小、颜色、阴影或者其它任何支持的效果。&lt;/p&gt;
&lt;p&gt;这个也是一样的，去&lt;a href="http://fontawesome.io/"&gt;fontawesome官网&lt;/a&gt;下载fontawesome压缩包&lt;/p&gt;
&lt;p&gt;&lt;img alt="fontawesome" src="/images/fontawesome.jpg"&gt;&lt;/p&gt;
&lt;p&gt;之后就可以愉快地使用这个uniquecv啦hhhhh，反正我就这样配，然后搞定了，虽然搞了两节课orz。&lt;/p&gt;
&lt;p&gt;测试一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;\documentclass&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;uniquecv&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\usepackage&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;fontawesome&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\name&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;名字&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\medskip&lt;/span&gt;
&lt;span class="k"&gt;\basicinfo&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;\faPhone&lt;/span&gt; ~ (+86) 153-0000-8888
  &lt;span class="k"&gt;\textperiodcentered\&lt;/span&gt;
  &lt;span class="k"&gt;\faEnvelope&lt;/span&gt; ~ username@email.com
  &lt;span class="k"&gt;\textperiodcentered\&lt;/span&gt;
  &lt;span class="k"&gt;\faGithub&lt;/span&gt; ~ github.com/username
&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;教育背景&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\dateditem&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;华中科技大学&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="k"&gt;\quad&lt;/span&gt; 软件工程 &lt;span class="k"&gt;\quad&lt;/span&gt; 本科&lt;span class="nb"&gt;}{&lt;/span&gt;2014年 -- 2018年&lt;span class="nb"&gt;}&lt;/span&gt;
成绩：年级前100&lt;span class="k"&gt;\%&lt;/span&gt; &lt;span class="k"&gt;\quad&lt;/span&gt; 英语：CET6

&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;专业技能&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\smallskip&lt;/span&gt;
C/C++、Lisp、Java、算法与数据结构、Linux、Storm、Hadoop、Spark、Flink、Hive、Hbase

&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;获奖情况&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\datedaward&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;一等奖&lt;span class="nb"&gt;}{&lt;/span&gt;XYZ应用开发大赛&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;{&lt;/span&gt;2026年06月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\datedaward&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\small&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;这是一个比较长长长长的奖&lt;span class="nb"&gt;}}{&lt;/span&gt;比较长的奖的比赛&lt;span class="nb"&gt;}{&lt;/span&gt;2016年04月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\datedaward&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;冠军&lt;span class="nb"&gt;}{&lt;/span&gt;武汉KK编程挑战赛&lt;span class="nb"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;{&lt;/span&gt;2015年09月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\medskip&lt;/span&gt;


&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;项目经历&lt;span class="nb"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;\datedproject&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;分布式流体计算项目&lt;span class="nb"&gt;}{&lt;/span&gt;竞赛项目&lt;span class="nb"&gt;}{&lt;/span&gt;2016年05月 -- 2016年06月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\textit&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;性能优化、并行计算&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;0.4ex&lt;span class="nb"&gt;}&lt;/span&gt;

将一个单机的流体计算程序移植到多机平台
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\item&lt;/span&gt; 计算节点内部使用OpenMP并行化
  &lt;span class="k"&gt;\item&lt;/span&gt; 计算节点间使用MPI并行化
  &lt;span class="k"&gt;\item&lt;/span&gt; 单机优化性能达2x, 多机接近线性加速比
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;\datedproject&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;这是一个测试项目&lt;span class="nb"&gt;}{&lt;/span&gt;导师项目&lt;span class="nb"&gt;}{&lt;/span&gt;2016年02月 -- 2016年04月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\textit&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;编译技术、C++&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;0.4ex&lt;span class="nb"&gt;}&lt;/span&gt;

这是一个没有分点陈述的项目，如果没有分点陈述，LaTeX的排版会是什么样子？
这是一个没有分点陈述的项目，如果没有分点陈述，LaTeX的排版会是什么样子？
这是一个没有分点陈述的项目，如果没有分点陈述，LaTeX的排版会是什么样子？
这是一个没有分点陈述的项目，如果没有分点陈述，LaTeX的排版会是什么样子？


&lt;span class="k"&gt;\datedproject&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;C-Compiler&lt;span class="nb"&gt;}{&lt;/span&gt;个人项目&lt;span class="nb"&gt;}{&lt;/span&gt;2016年02月 -- 2016年04月&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\textit&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;编译技术、C++&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\vspace&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;0.4ex&lt;span class="nb"&gt;}&lt;/span&gt;

使用C++实现了一个简单C语言编译器，支持生成到目标代码。
&lt;span class="k"&gt;\begin&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;\item&lt;/span&gt; 支持C11标准大部分标准
  &lt;span class="k"&gt;\item&lt;/span&gt; 实现了类似lex/flex的词法解析器生成工具
  &lt;span class="k"&gt;\item&lt;/span&gt; 实现了类似yacc/bison的语法解析器生成工具
  &lt;span class="k"&gt;\item&lt;/span&gt; 后端部分采用窥孔优化
&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;itemize&lt;span class="nb"&gt;}&lt;/span&gt;



&lt;span class="k"&gt;\section&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;课外&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;\dateditem&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;&lt;span class="k"&gt;\textbf&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;华中科技大学XX团队&lt;span class="nb"&gt;}}{&lt;/span&gt;2016年06月 -- 至今&lt;span class="nb"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;\end&lt;/span&gt;&lt;span class="nb"&gt;{&lt;/span&gt;document&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最终效果如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="resumedemo" src="/images/resumedemo.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;嘻嘻&lt;/h3&gt;
&lt;p&gt;这样就结束啦，毕竟mactex真的是对小白非常友好，目前就这样就可以啦w&lt;/p&gt;
&lt;h3&gt;后记&lt;/h3&gt;
&lt;p&gt;咦，虽然最后是写好了自己的简历，但是这份简历真的是简陋的可以，之后还是继续慢慢充实一下自己吧w&lt;/p&gt;</content><category term="xelatex"></category><category term="配置"></category><category term="OS X"></category></entry><entry><title>ArchLinux安装后的必须配置与图形界面安装教程</title><link href="/archlinuxan-zhuang-hou-de-bi-xu-pei-zhi-yu-tu-xing-jie-mian-an-zhuang-jiao-cheng.html" rel="alternate"></link><published>2017-05-19T21:38:57+08:00</published><updated>2017-05-19T21:38:57+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-05-19:/archlinuxan-zhuang-hou-de-bi-xu-pei-zhi-yu-tu-xing-jie-mian-an-zhuang-jiao-cheng.html</id><summary type="html">&lt;h2&gt;ArchLinux安装后的必须配置&lt;/h2&gt;
&lt;p&gt;在&lt;a href="http://www.hustmeituan.club/yi-guan-fang-wikide-fang-shi-an-zhuang-archlinux.html"&gt;上一篇教程&lt;/a&gt;中，我们成功地安装了&lt;code&gt;ArchLinux&lt;/code&gt;，这时系统处于一个非常精简的状态，为了日常使用，我们必须进行一些配置、安装一些需要的组件，来扩展我们的系统功能，开源的组件相互协同工作也是&lt;code&gt;Linux&lt;/code&gt;的迷人之处之一。&lt;/p&gt;
&lt;p&gt;下面的教程部分参考了官方&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;General recommendations&lt;/a&gt;。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;连接网络&lt;/h3&gt;
&lt;p&gt;现在我们是在新安装的系统上进行操作，所以我们要重新联网，我们在之前安装系统时已经提前装好了相关的包。所以现在只要跟之前一样，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wifi-menu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按界面提示进行操作就可以了（有线网用户无视这段）。&lt;/p&gt;
&lt;p&gt;同样可以使用&lt;code&gt;ping&lt;/code&gt;命令来测试是否正常联网。&lt;/p&gt;
&lt;h3&gt;创建交换文件&lt;/h3&gt;
&lt;p&gt;交换文件可以在物理内存不足的时候将部分内存暂存到交换文件中，避免系统由于内存不足而完全停止工作。&lt;/p&gt;
&lt;p&gt;之前我们通常采用单独一个分区的方式作为交换分区，现在更推荐采用交换文件的方式，更便于我们的管理。&lt;/p&gt;
&lt;p&gt;分配一块空间用于交换文件，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fallocate -l 512M /swapfile （请将512M换成需要的大小，只能以M或G为单位）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;交换文件的大小可以自己决定，推荐4G以下的物理内存，交换文件与物理内存一致，4G以上的物理内存，交换文件4-8G。&lt;/p&gt;
&lt;p&gt;更改权限，执行 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;ArchLinux安装后的必须配置&lt;/h2&gt;
&lt;p&gt;在&lt;a href="http://www.hustmeituan.club/yi-guan-fang-wikide-fang-shi-an-zhuang-archlinux.html"&gt;上一篇教程&lt;/a&gt;中，我们成功地安装了&lt;code&gt;ArchLinux&lt;/code&gt;，这时系统处于一个非常精简的状态，为了日常使用，我们必须进行一些配置、安装一些需要的组件，来扩展我们的系统功能，开源的组件相互协同工作也是&lt;code&gt;Linux&lt;/code&gt;的迷人之处之一。&lt;/p&gt;
&lt;p&gt;下面的教程部分参考了官方&lt;a href="https://wiki.archlinux.org/index.php/General_recommendations"&gt;General recommendations&lt;/a&gt;。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;连接网络&lt;/h3&gt;
&lt;p&gt;现在我们是在新安装的系统上进行操作，所以我们要重新联网，我们在之前安装系统时已经提前装好了相关的包。所以现在只要跟之前一样，执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wifi-menu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按界面提示进行操作就可以了（有线网用户无视这段）。&lt;/p&gt;
&lt;p&gt;同样可以使用&lt;code&gt;ping&lt;/code&gt;命令来测试是否正常联网。&lt;/p&gt;
&lt;h3&gt;创建交换文件&lt;/h3&gt;
&lt;p&gt;交换文件可以在物理内存不足的时候将部分内存暂存到交换文件中，避免系统由于内存不足而完全停止工作。&lt;/p&gt;
&lt;p&gt;之前我们通常采用单独一个分区的方式作为交换分区，现在更推荐采用交换文件的方式，更便于我们的管理。&lt;/p&gt;
&lt;p&gt;分配一块空间用于交换文件，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fallocate -l 512M /swapfile （请将512M换成需要的大小，只能以M或G为单位）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;交换文件的大小可以自己决定，推荐4G以下的物理内存，交换文件与物理内存一致，4G以上的物理内存，交换文件4-8G。&lt;/p&gt;
&lt;p&gt;更改权限，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chmod &lt;span class="m"&gt;600&lt;/span&gt; /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;设置交换文件，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkswap /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;启用交换文件，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;swapon /swapfile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后我们需要编辑&lt;code&gt;/etc/fstab&lt;/code&gt;为交换文件设置一个入口，使用&lt;code&gt;vim&lt;/code&gt;打开文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;注意编辑&lt;code&gt;fstab&lt;/code&gt;文件的时候要格外注意不要修改之前的内容，直接在最后新起一行加入以下内容&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/swapfile none swap defaults &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;新建用户&lt;/h3&gt;
&lt;p&gt;在这之前所有操作都是以&lt;code&gt;root&lt;/code&gt;用户的身份进行的，由于&lt;code&gt;root&lt;/code&gt;的权限过高，日常使用&lt;code&gt;root&lt;/code&gt;用户是不安全的。&lt;code&gt;Linux&lt;/code&gt;为我们提供了强大的用户与组的权限管理，提高了整个系统的安全性。这里我们就来新建一个用户。&lt;/p&gt;
&lt;p&gt;执行以下命令来创建一个名为&lt;code&gt;username&lt;/code&gt;的用户（请自行替换&lt;code&gt;username&lt;/code&gt;为你的用户名）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;useradd -m -G wheel username （请自行替换username为你的用户名）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这里稍微解释一下各参数的含义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-m&lt;/code&gt;：在创建时同时在&lt;code&gt;/home&lt;/code&gt;目录下创建一个与用户名同名的文件夹，这个目录就是你的&lt;strong&gt;家目录&lt;/strong&gt;啦！家目录有一个别名是&lt;code&gt;~&lt;/code&gt;，你可以在任何地方使用&lt;code&gt;~&lt;/code&gt;来代替家目录路径。这个神奇的目录将会用于存放你所有的个人资料、配置文件等所有跟系统本身无关的资料。这种设定带来了诸多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只要家目录不变，你重装系统后只需要重新安装一下软件包（它们一般不存放在家目录），然后所有的配置都会从家目录中读取，完全不用重新设置软件着。&lt;/li&gt;
&lt;li&gt;你可以在家目录不变的情况下更换你的发行版而不用重新配置你的环境。&lt;/li&gt;
&lt;li&gt;切换用户后所有的设置会从新的用户的家目录中读取，将不同用户的资料与软件设置等完全隔离。&lt;/li&gt;
&lt;li&gt;有些著名的配置文件比如&lt;code&gt;vim&lt;/code&gt;的配置文件&lt;code&gt;~/.vimrc&lt;/code&gt;，只要根据自己的使用习惯配置一次， 在另一个&lt;code&gt;Linux&lt;/code&gt;系统下（例如你的服务器）把这个文件复制到家目录下，就可以完全恢复你的配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;-G wheel&lt;/code&gt;：&lt;code&gt;-G&lt;/code&gt;代表把用户加入一个组，对用户与组的概念感兴趣的同学可以自行查找有关资料学习。后面跟着的&lt;code&gt;wheel&lt;/code&gt;就是加入的组名，至于为什么要加入这个组，后面会提到。&lt;/p&gt;
&lt;p&gt;当然记得为新用户设置一个密码，执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd username （请自行替换username为你的用户名）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据提示输入两次密码就可以了，注意，这是你的用户密码，推荐与之前设置的&lt;code&gt;root&lt;/code&gt;用户的密码不同。&lt;/p&gt;
&lt;h3&gt;配置sudo&lt;/h3&gt;
&lt;p&gt;我们已经创建好了一个新的用户，以后我们将会使用这个用户来登录，那么如果我们需要执行一些只有&lt;code&gt;root&lt;/code&gt;用户才能执行的命令（例如修改系统文件、安装软件包）怎么办？当然我们可以通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;su
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;命令来切换到&lt;code&gt;root&lt;/code&gt;用户执行命令后再通过&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回普通用户。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;sudo&lt;/code&gt;为我们提供了一个更快捷的办法，使用&lt;code&gt;sudo&lt;/code&gt;，我们只要在需要&lt;code&gt;root&lt;/code&gt;权权限执行的命令之前加上&lt;code&gt;sudo&lt;/code&gt;就可以了，例如安装软件包：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S something
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面我们就来安装并配置&lt;code&gt;sudo&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt;本身也是一个软件包，所以我们需要通过&lt;code&gt;pacman&lt;/code&gt;来安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S sudo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来我们需要用专门的&lt;code&gt;visudo&lt;/code&gt;命令来编辑&lt;code&gt;sudo&lt;/code&gt;的配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;visudo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;实际上就是&lt;code&gt;vim&lt;/code&gt;的操作，使用它是为了对编辑后的文件进行检查防止格式的错误。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch20.jpg"&gt;&lt;/p&gt;
&lt;p&gt;找到&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# %wheel ALL=(ALL)ALL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这行，去掉之前的&lt;code&gt;#&lt;/code&gt;注释符，保存并退出就可以了。&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;%wheel&lt;/code&gt;就是代表&lt;code&gt;wheel&lt;/code&gt;组，意味着&lt;code&gt;wheel&lt;/code&gt;组中的所有用户都可以使用&lt;code&gt;sudo&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;当然为了安全使用&lt;code&gt;sudo&lt;/code&gt;命令还是需要输入&lt;strong&gt;当前用户&lt;/strong&gt;的密码的。&lt;/p&gt;
&lt;p&gt;配置好&lt;code&gt;sudo&lt;/code&gt;以后，我们进行一次重启，执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;来重启你的电脑。&lt;/p&gt;
&lt;p&gt;重启以后输入你&lt;strong&gt;刚创建的用户名与密码&lt;/strong&gt;来登录。&lt;/p&gt;
&lt;h2&gt;图形界面的安装&lt;/h2&gt;
&lt;h3&gt;显卡驱动的安装&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch21.png"&gt;&lt;/p&gt;
&lt;p&gt;参照这个表格，安装相应的包，比如你是&lt;code&gt;intel&lt;/code&gt;的集成显卡（绝大多数人的情况），执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S xf86-video-intel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提示：&lt;code&gt;Nvidia&lt;/code&gt;的独显驱动如非必要，建议只装集成显卡的驱动（省电，如果同时装也会默认使用集成显卡），不容易出现冲突问题。相反，如果集成显卡驱动有问题无法装上，可以装独显驱动，具体的版本请到下面的链接查询：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://wiki.archlinux.org/index.php/Xorg#Driver_installation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;安装Xorg&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Xorg&lt;/code&gt;是&lt;code&gt;Linux&lt;/code&gt;下的一个著名的开源图形服务，我们的桌面环境需要&lt;code&gt;Xorg&lt;/code&gt;的支持。&lt;/p&gt;
&lt;p&gt;执行如下命令安装&lt;code&gt;Xorg&lt;/code&gt;及相关组件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S xorg-server xorg-apps
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装桌面环境&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;下有很多著名的桌面环境如&lt;code&gt;Xfce&lt;/code&gt;、&lt;code&gt;KDE(Plasma)&lt;/code&gt;、&lt;code&gt;Gnome&lt;/code&gt;、&lt;code&gt;Unity&lt;/code&gt;、&lt;code&gt;Deepin&lt;/code&gt;等等，它们的外观、操作、设计理念等各方面都有所不同， 在它们之间的比较与选择网上有很多的资料可以去查。&lt;/p&gt;
&lt;p&gt;在这里我们选择笔者使用的&lt;code&gt;Xfce&lt;/code&gt;和非常流行的&lt;code&gt;KDE(Plasma)&lt;/code&gt;作为示范，当然你也可以把它们全部装上换着用……因为&lt;code&gt;Linux&lt;/code&gt;的模块化，这样完全没有问题。&lt;/p&gt;
&lt;p&gt;更多桌面环境的安装指南请见下面的链接：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://wiki.archlinux.org/index.php/Desktop_environment#List_of_desktop_environments&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;安装Xfce&lt;/h4&gt;
&lt;p&gt;直接安装软件包组（包含了很多软件包）即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S xfce4 xfce4-goodies
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装KDE(Plasma)&lt;/h4&gt;
&lt;p&gt;直接安装软件包组（包含了很多软件包）即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S plasma kde-applications kde-l10n-zh_cn
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;安装桌面管理器&lt;/h3&gt;
&lt;p&gt;安装好了桌面环境包以后，我们需要安装一个图形化的桌面管理器来帮助我们登录并且选择我们使用的桌面环境，这里我推荐使用&lt;code&gt;sddm&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;安装sddm&lt;/h4&gt;
&lt;p&gt;执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S sddm
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;设置开机启动sddm服务&lt;/h4&gt;
&lt;p&gt;这里就要介绍一下&lt;code&gt;Arch&lt;/code&gt;下用于管理系统服务的命令&lt;code&gt;systemctl&lt;/code&gt;了，服务的作用就是字面意思，为我们提供特定的服务，比如&lt;code&gt;sddm&lt;/code&gt;就为我们提供了启动&lt;code&gt;xorg&lt;/code&gt;与管理桌面环境的服务。&lt;/p&gt;
&lt;p&gt;命令的使用并不复杂：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl start   服务名 （启动一项服务）
sudo systemctl stop    服务名 （停止一项服务）
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt;  服务名 （开机启动一项服务）
sudo systemctl disable 服务名 （取消开机启动一项服务）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以这里我们就执行下面命令来设置开机启动&lt;code&gt;sddm&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; sddm
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;提前配置网络&lt;/h3&gt;
&lt;p&gt;到现在我们已经安装好了桌面环境，但是还有一件事情需要我们提前设置一下。由于我们之前使用的一直都是&lt;code&gt;netctl&lt;/code&gt;这个自带的网络服务，而桌面环境使用的是&lt;code&gt;NetworkManager&lt;/code&gt;这个网络服务，所以我们需要禁用&lt;code&gt;netctl&lt;/code&gt;并启用&lt;code&gt;NetworkManager&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo systemctl disable netctl
sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; NetworkManager （注意大小写）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时你可能需要安装工具栏工具来显示网络设置图标（某些桌面环境已经装了，但是为了保险可以再装一下）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pacman -S network-manager-applet
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样开机以后我们就可以在图形界面下配置我们的网络啦。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;重新启动后，如果你看到桌面管理器的界面，选择你需要的桌面环境并输入用户名与密码登陆后，看到了熟悉而又陌生的桌面，那么恭喜你，你已经完成了桌面环境的安装！&lt;/p&gt;
&lt;h2&gt;你可能需要知道的操作与软件包推荐&lt;/h2&gt;
&lt;p&gt;到这里，&lt;code&gt;ArchLinux&lt;/code&gt;的安装与基本配置教程已经结束了，笔者在编写过程中基本凭着多次安装的经验与这次安装的记录完成，难免会有疏漏与不正确的地方，还请大家通过下面的评论或邮件(viseator@gmail.com)提出意见与建议。也欢迎你们与我交流安装的问题。&lt;/p&gt;
&lt;p&gt;下面一篇文章将会介绍一些实用的配置（如中文输入法的安装）与软件包等。&lt;/p&gt;</content><category term="arch"></category><category term="linux"></category></entry><entry><title>使用openbox配置archlinux桌面环境w</title><link href="/shi-yong-openboxpei-zhi-archlinuxzhuo-mian-huan-jing-w.html" rel="alternate"></link><published>2017-05-18T04:37:00+08:00</published><updated>2017-05-18T04:37:00+08:00</updated><author><name>Huatian Zhou</name></author><id>tag:None,2017-05-18:/shi-yong-openboxpei-zhi-archlinuxzhuo-mian-huan-jing-w.html</id><summary type="html">&lt;h2&gt;0x01 前言&lt;/h2&gt;

&lt;p&gt;试用了一些 &lt;code&gt;archlinux wiki&lt;/code&gt; 上推荐的桌面环境，发现并没有什么我喜欢的。&lt;/p&gt;

&lt;p&gt;所以决定自己用 &lt;code&gt;openbox&lt;/code&gt; 配置一发w。&lt;/p&gt;

&lt;h2&gt;0x02 安装openbox并设置为默认桌面环境&lt;/h2&gt;

&lt;p&gt;安装很简单， &lt;code&gt;pacman&lt;/code&gt; 一下就好了。&lt;/p&gt;

&lt;p&gt;如果你像我一样，在 &lt;code&gt;/etc/X11/xinit/xinitrc&lt;/code&gt; 下面配置好了执行 &lt;code&gt;~/.xinitrc&lt;/code&gt; ，那么以下操作就直接编辑 &lt;code&gt;~/.xinitrc&lt;/code&gt; 就好了。&lt;/p&gt;

&lt;p&gt;如果不是，那么可以在 &lt;code&gt;/etc/X11/xinit/xinitrc&lt;/code&gt; 里写。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;首先建立 &lt;code&gt;/usr/local/bin/mydesk&lt;/code&gt; ，然后在里面加入：&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&lt;br /&gt;#!/bin/sh

openbox

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;然后编辑 &lt;code&gt;xinitrc&lt;/code&gt; ，把原来的桌面环境注释掉，换成&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&lt;br /&gt;exec /usr/local/bin …&lt;/code&gt;&lt;/pre&gt;</summary><content type="html">&lt;h2&gt;0x01 前言&lt;/h2&gt;

&lt;p&gt;试用了一些 &lt;code&gt;archlinux wiki&lt;/code&gt; 上推荐的桌面环境，发现并没有什么我喜欢的。&lt;/p&gt;

&lt;p&gt;所以决定自己用 &lt;code&gt;openbox&lt;/code&gt; 配置一发w。&lt;/p&gt;

&lt;h2&gt;0x02 安装openbox并设置为默认桌面环境&lt;/h2&gt;

&lt;p&gt;安装很简单， &lt;code&gt;pacman&lt;/code&gt; 一下就好了。&lt;/p&gt;

&lt;p&gt;如果你像我一样，在 &lt;code&gt;/etc/X11/xinit/xinitrc&lt;/code&gt; 下面配置好了执行 &lt;code&gt;~/.xinitrc&lt;/code&gt; ，那么以下操作就直接编辑 &lt;code&gt;~/.xinitrc&lt;/code&gt; 就好了。&lt;/p&gt;

&lt;p&gt;如果不是，那么可以在 &lt;code&gt;/etc/X11/xinit/xinitrc&lt;/code&gt; 里写。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;首先建立 &lt;code&gt;/usr/local/bin/mydesk&lt;/code&gt; ，然后在里面加入：&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&lt;br /&gt;#!/bin/sh

openbox

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;然后编辑 &lt;code&gt;xinitrc&lt;/code&gt; ，把原来的桌面环境注释掉，换成&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&lt;br /&gt;exec /usr/local/bin/mydesk

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;这样下次启动 &lt;code&gt;X&lt;/code&gt; 的时候，就会启动 &lt;code&gt;Openbox&lt;/code&gt; 了。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;0x03 安装其他辅助工具&lt;/h2&gt;

&lt;p&gt;如果只安装 &lt;code&gt;Openbox&lt;/code&gt; 的话，桌面上空空如也，连启动程序都不太容易。&lt;/p&gt;

&lt;p&gt;自然会想到需要一些辅助用的程序。&lt;/p&gt;

&lt;p&gt;首先，建议安装 &lt;code&gt;Docky&lt;/code&gt; 。安装方法也很简单，直接 &lt;code&gt;pacman -S docky&lt;/code&gt; 就可以了。&lt;/p&gt;

&lt;p&gt;要让它开机启动的话，编辑 &lt;code&gt;/usr/local/bin/mydesk&lt;/code&gt; ，在 &lt;code&gt;openbox&lt;/code&gt; 这一行前面加入&lt;/p&gt;

&lt;p&gt;&lt;code&gt; sh ~/.mydesk.conf/.autostart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后建立 &lt;code&gt;~/.mydesk.conf/.autostart&lt;/code&gt; 文件，然后在里面添加：&lt;/p&gt;

&lt;pre&gt;&lt;code class="shell"&gt;&lt;br /&gt;#!/bin/sh

docky &amp;amp;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以开机启动 &lt;code&gt;docky&lt;/code&gt; 了。&lt;/p&gt;

&lt;p&gt;桌面背景黑漆漆的是不是很难看？试试 &lt;code&gt;feh&lt;/code&gt; 吧。直接 &lt;code&gt;pacman&lt;/code&gt; 就可以安装。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;.autostart&lt;/code&gt; 里加入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt; feh --bg-fill /path/to/your/background/file.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;就可以设置桌面背景了。&lt;/p&gt;

&lt;p&gt;还想要更多？试试桌面特效 &lt;code&gt;compton&lt;/code&gt; 如何？同样是直接 &lt;code&gt;pacman&lt;/code&gt; 就可以安装了。&lt;/p&gt;

&lt;p&gt;启动的方法是在 &lt;code&gt;.autostart&lt;/code&gt; 里加入：&lt;/p&gt;

&lt;p&gt;&lt;code&gt; compton --config ~/.compton.conf &amp;amp;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;配置 &lt;code&gt;compton&lt;/code&gt; 的方法请自行 &lt;code&gt;google&lt;/code&gt; w！&lt;/p&gt;

&lt;p&gt;这样，基本的桌面环境就已经可以使用了！&lt;/p&gt;

&lt;p&gt;但是有人会问：怎么没有 &lt;code&gt;widget&lt;/code&gt; 啊？都没办法好好连 &lt;code&gt;wifi&lt;/code&gt; 了w！&lt;/p&gt;

&lt;p&gt;嗯……如果可以接受命令行的话，不妨试试 &lt;code&gt;wifi_menu&lt;/code&gt; 或者给 &lt;code&gt;wpa_supplicant&lt;/code&gt; 加 &lt;code&gt;alias&lt;/code&gt; w！&lt;/p&gt;

&lt;p&gt;当然了，我们要优雅的GUI！&lt;/p&gt;

&lt;p&gt;安装 &lt;code&gt;tint2&lt;/code&gt; ！这东西可以在你的屏幕上方显示一行任务栏一样的东西w！&lt;/p&gt;

&lt;p&gt;同样需要在 &lt;code&gt;.autostart&lt;/code&gt; 里加入 &lt;code&gt;tint2 &amp;amp;&lt;/code&gt; 来启动哦！&lt;/p&gt;

&lt;p&gt;网络 &lt;code&gt;widget&lt;/code&gt; 的话，可以使用 &lt;code&gt;nm-applet&lt;/code&gt; w！&lt;/p&gt;

&lt;p&gt;对了对了，还有输入法和锁定屏幕……&lt;/p&gt;

&lt;p&gt;输入法的话 直接在 &lt;code&gt;.autostart&lt;/code&gt; 里加入 &lt;code&gt;fcitx &amp;amp;&lt;/code&gt; 就可以使用输入法了！&lt;/p&gt;

&lt;p&gt;锁定屏幕，可以去试试 &lt;code&gt;i3lock&lt;/code&gt; ，配置教程应该可以在 &lt;code&gt;archlinux wiki&lt;/code&gt; 上找到。&lt;/p&gt;

&lt;p&gt;之后就是编辑 &lt;code&gt;~/.config/openbox/rc.xml&lt;/code&gt; 增加锁定快捷键了。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;h2&gt;0x04 笔记本电脑？&lt;/h2&gt;

&lt;p&gt;也没有什么特别好说的辣w&lt;/p&gt;

&lt;p&gt;就是一个电池状态 &lt;code&gt;widget&lt;/code&gt; 的事情w&lt;/p&gt;

&lt;p&gt;&lt;code&gt;archlinux wiki&lt;/code&gt; 上说的 &lt;code&gt;batterymon&lt;/code&gt; 在 &lt;code&gt;AUR&lt;/code&gt; 上找不到了w&lt;/p&gt;

&lt;p&gt;但是有一个 &lt;code&gt;batterymon-clone&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;直接在 &lt;code&gt;AUR&lt;/code&gt; 上安装就好了！&lt;/p&gt;</content><category term="linux"></category><category term="desktop environment"></category><category term="openbox"></category></entry><entry><title>以官方Wiki的方式安装ArchLinux</title><link href="/yi-guan-fang-wikide-fang-shi-an-zhuang-archlinux.html" rel="alternate"></link><published>2017-05-17T23:26:29+08:00</published><updated>2017-05-17T23:26:29+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-05-17:/yi-guan-fang-wikide-fang-shi-an-zhuang-archlinux.html</id><summary type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这可能是你能找到的最适合你的中文&lt;code&gt;ArchLinux&lt;/code&gt;安装教程。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前几天硬盘挂了，万幸的是家目录放在了另一块硬盘上所以存活了下来。不得不再重装一遍&lt;code&gt;Arch&lt;/code&gt;，算上帮朋友装的，这已经是我第四次安装&lt;code&gt;Arch&lt;/code&gt;了。也想借此机会记录这个过程写一篇完全按照官方Wiki指导再加上Wiki上没有重点写出来但是安装过程中会遇到的一些问题的一篇不太一样的安装教程。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;很多人提起起&lt;code&gt;Arch&lt;/code&gt;的第一反应就是安装困难，这种困难有很多原因，也就是接下来我们将会面对的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有图形界面的引导：&lt;code&gt;Arch&lt;/code&gt;只给我们提供了一个最小的环境，所有的安装操作都需要在命令行中完成，这对于不习惯命令行操作的人来说是最难以跨越的一个坎。许多发行版之所以可以流行开来就是因为他们提供了友好的、流程化的安装过程，这帮很多人解决了学习&lt;code&gt;Linux&lt;/code&gt;的第一步：安装一个&lt;code&gt;Linux&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;预备知识的不足与缺乏查找并解决问题的能力：一些对于安装系统比较重要的知识例如系统引导、配置文件的编辑、简单的命令行操作等没有接触过，所以操作时往往摸不着头脑，一旦自己的操作结果与教程不符便不知道如何去解决遇到的问题。&lt;/li&gt;
&lt;li&gt;缺乏合适的教程：安装Arch最好的也是最完备的教程就是官方的&lt;a href="https://wiki.archlinux.org/index.php/installation_guide"&gt;Installation guide&lt;/a&gt;与&lt;a href="https://wiki.archlinux.org/"&gt;Wiki&lt;/a&gt;，虽然部分内容有中文版，但是中文的翻译有些时候会落后于英文版，不推荐完全依赖于中文Wiki。并且官方Wiki的写作方式更偏向于文档，没有我们所习惯的按步骤编排的安装过程，给不熟悉这种写作方式的同学造成了阅读与使用上的困难。国内的可以找到的教程往往都是时间比较久远，或是没有提及或是忽略了一些新手容易犯错误的地方 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这可能是你能找到的最适合你的中文&lt;code&gt;ArchLinux&lt;/code&gt;安装教程。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前几天硬盘挂了，万幸的是家目录放在了另一块硬盘上所以存活了下来。不得不再重装一遍&lt;code&gt;Arch&lt;/code&gt;，算上帮朋友装的，这已经是我第四次安装&lt;code&gt;Arch&lt;/code&gt;了。也想借此机会记录这个过程写一篇完全按照官方Wiki指导再加上Wiki上没有重点写出来但是安装过程中会遇到的一些问题的一篇不太一样的安装教程。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;很多人提起起&lt;code&gt;Arch&lt;/code&gt;的第一反应就是安装困难，这种困难有很多原因，也就是接下来我们将会面对的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有图形界面的引导：&lt;code&gt;Arch&lt;/code&gt;只给我们提供了一个最小的环境，所有的安装操作都需要在命令行中完成，这对于不习惯命令行操作的人来说是最难以跨越的一个坎。许多发行版之所以可以流行开来就是因为他们提供了友好的、流程化的安装过程，这帮很多人解决了学习&lt;code&gt;Linux&lt;/code&gt;的第一步：安装一个&lt;code&gt;Linux&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;预备知识的不足与缺乏查找并解决问题的能力：一些对于安装系统比较重要的知识例如系统引导、配置文件的编辑、简单的命令行操作等没有接触过，所以操作时往往摸不着头脑，一旦自己的操作结果与教程不符便不知道如何去解决遇到的问题。&lt;/li&gt;
&lt;li&gt;缺乏合适的教程：安装Arch最好的也是最完备的教程就是官方的&lt;a href="https://wiki.archlinux.org/index.php/installation_guide"&gt;Installation guide&lt;/a&gt;与&lt;a href="https://wiki.archlinux.org/"&gt;Wiki&lt;/a&gt;，虽然部分内容有中文版，但是中文的翻译有些时候会落后于英文版，不推荐完全依赖于中文Wiki。并且官方Wiki的写作方式更偏向于文档，没有我们所习惯的按步骤编排的安装过程，给不熟悉这种写作方式的同学造成了阅读与使用上的困难。国内的可以找到的教程往往都是时间比较久远，或是没有提及或是忽略了一些新手容易犯错误的地方。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇教程致力于与现有的Wiki保持一致，并且适当地加入一些适合初学者学习的链接，希望可以让阅读了这篇教程的同学可以提高自己利用现有及以后可能出现的新的Wiki内容的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ArchLinux&lt;/code&gt;或者是&lt;code&gt;Linux&lt;/code&gt;的优点就不在这里多说了，我相信打开这篇教程的同学一定可以从这样的过程中得到很多。&lt;/p&gt;
&lt;p&gt;下面就正式开始我们的教程。&lt;/p&gt;
&lt;h2&gt;安装教程&lt;/h2&gt;
&lt;h3&gt;前期准备&lt;/h3&gt;
&lt;h4&gt;安装介质&lt;/h4&gt;
&lt;p&gt;在安装之前我们先要准备一个安装介质，在这里只推荐U盘作为安装介质。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;到&lt;a href="https://www.archlinux.org/download/"&gt;https://www.archlinux.org/download/&lt;/a&gt;页面下方的中国镜像源中下载&lt;code&gt;archlinux-**-x86_64.iso&lt;/code&gt;这个&lt;code&gt;iso&lt;/code&gt;文件。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;如果是&lt;code&gt;Linux&lt;/code&gt;系统下制作安装介质，推荐使用&lt;code&gt;dd&lt;/code&gt;命令，教程：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;http://blog.topspeedsnail.com/archives/404&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果是&lt;code&gt;windows&lt;/code&gt;系统下制作安装介质，推荐使用&lt;code&gt;usbwriter&lt;/code&gt;这款轻量级的工具，下载链接：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;https://sourceforge.net/projects/usbwriter/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;磁盘准备&lt;/h4&gt;
&lt;p&gt;我们需要有一块空闲的磁盘区域来进行安装，这里的空闲指的是&lt;strong&gt;没有被分区&lt;/strong&gt;的空间。下面来介绍如何准备这块空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;windows&lt;/code&gt;下空出一块分区来安装：利用&lt;code&gt;windows&lt;/code&gt;自带的磁盘管理工具就可以：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;右击&lt;code&gt;windows&lt;/code&gt;图标，在弹出菜单中选择磁盘管理（其他版本的&lt;code&gt;windows&lt;/code&gt;请自行找到打开磁盘管理的方式）：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch01.jpeg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右击想要删除的分区，选择删除卷（注意这步之后这个分区的所有数据将会丢失）：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch02.jpeg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;linux&lt;/code&gt;下分出一块区域安装：使用&lt;code&gt;fdisk&lt;/code&gt;进行，教程请见链接中的删除分区：&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;http://www.liusuping.com/ubuntu-linux/linux-fdisk-disk.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;空闲的磁盘（新磁盘）：不需要进行任何操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;U盘安装&lt;/h3&gt;
&lt;p&gt;下面的过程实际上都在刚刚准备好的U盘启动介质上的&lt;code&gt;Linux&lt;/code&gt;系统下进行，所以&lt;strong&gt;启动时都应该选择U盘&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;设置启动顺序&lt;/h4&gt;
&lt;p&gt;这一步在不同品牌的电脑上都不一样，所以需要大家自行搜索&lt;strong&gt;自己电脑品牌+启动顺序&lt;/strong&gt;这个关键词来进行设置。&lt;/p&gt;
&lt;p&gt;例如我的电脑搜索神舟 启动顺序可以得到如下的结果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://zhidao.baidu.com/question/170954184.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般来说现在的主板都可以不用进入BIOS而快速地切换启动顺序，只要找到相应的快捷键就可以了。&lt;/p&gt;
&lt;h4&gt;进入U盘下的Linux系统&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;按上一步设置好启动顺序，启动之后会看到如下界面：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch03.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;如果直接进入&lt;code&gt;windows&lt;/code&gt;，请检查启动顺序是否设置成功，U盘是否在制作启动介质时成功写入。&lt;/p&gt;
&lt;p&gt;如果没有看到这个界面，请检查U盘是否制作成功，如果多次遇到问题可以考虑换一个U盘。&lt;/p&gt;
&lt;p&gt;选择第一个选项。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这时&lt;code&gt;Arch&lt;/code&gt;开始加载，你将会看到屏幕显示如下内容：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch04.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;加载完成后你将会进入一个有命令提示符的界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch05.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;如果出现&lt;code&gt;FAIL&lt;/code&gt;或是其他错误信息导致无法启动请自行搜索错误信息来获得解决方法。&lt;/p&gt;
&lt;p&gt;这就是&lt;code&gt;Linux&lt;/code&gt;的终端界面了，接下来我们将通过在这个界面执行一系列命令来将&lt;code&gt;Arch&lt;/code&gt;安装到我们的磁盘上。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面进行的过程是按照官方&lt;a href="https://wiki.archlinux.org/index.php/installation_guide"&gt;Installation guide&lt;/a&gt;为依据进行的，出现的任何问题都可以到链接中的相应部分查找原文找到解决方式。&lt;/p&gt;
&lt;h4&gt;检查引导方式&lt;/h4&gt;
&lt;p&gt;目前的引导方式主要分为EFI引导+GPT分区表与BIOS(LEGACY)引导+MBR分区表两种，几乎比较新的机器都采用了EFI/GPT引导的方式。关于这部分的内容如果有兴趣可以通过这个链接进行了解：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://www.chinaz.com/server/2016/1017/595444.shtml&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你不知道自己的引导方式，请在命令提示符下执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls /sys/firmware/efi/efivars
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的&lt;code&gt;ls&lt;/code&gt;是命令，空格后面的一串为路径，作为&lt;code&gt;ls&lt;/code&gt;命令的参数。&lt;code&gt;ls&lt;/code&gt;命令的作用是显示路径目录下的所有的文件（夹）。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;如果你对命令行下的常用操作（TAB补全、取消命令等）不熟悉，请先学习了解下面部分实用的快捷键或命令：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tab键 命令行自动补全。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配你键入字符的所有命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;↑(Ctrl+p) 显示上一条命令&lt;/p&gt;
&lt;p&gt;↓(Ctrl+n) 显示下一条命令&lt;/p&gt;
&lt;p&gt;Ctrl-C: 终止当前正在执行的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;输入命令并回车执行后，如果提示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls: cannot access &lt;span class="s1"&gt;&amp;#39;/sys/firmware/efi/efivars&amp;#39;&lt;/span&gt;: No such file or directory
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;表明你是以BIOS方式引导，否则为以EFI方式引导。现在只需要记住这个信息，之后会用到。&lt;/p&gt;
&lt;h4&gt;联网&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;arch&lt;/code&gt;并不能离线安装，因为我们需要联网来下载需要的组件，所以我们首先要连接网络。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你是有线网并且路由器支持DHCP的话插上网线后应该已经是联网状态了，可以执行以下命令来进行判断：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ping www.baidu.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果可以看到类似下面的内容就说明连上了网络：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch05.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再次提示用快捷键Ctrl-C可以终止当前正在执行的命令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果你是无线网，请执行以下命令：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wifi-menu
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是一个实用的命令行下联网工具，有字符形式的图形化界面，利用它可以方便地联网，如果它没能起作用，需要进入以下页面查找解决方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;https://wiki.archlinux.org/index.php/Wireless_network_configuration&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;连接以后同样可以通过上面的&lt;code&gt;ping&lt;/code&gt;命令来进行测试。&lt;/p&gt;
&lt;h4&gt;更新系统时间&lt;/h4&gt;
&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timedatectl set-ntp &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;正常情况下这样的命令并没有输出，所谓没有消息就是最好的消息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;分区与格式化&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;特别注意：涉及到分区与格式化的操作要格外注意，命令在回车之前请再三确认知道自己在做什么，并且没有输错命令，否则将会来带来数据的丢失！如果有需要在操作之前请备份重要的数据。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是我们也并不要过于惧怕分区与格式化过程，正确操作的情况下不会对你其他数据产生任何影响。&lt;/p&gt;
&lt;h5&gt;查看目前的分区情况&lt;/h5&gt;
&lt;p&gt;执行命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdisk -l
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以我的电脑为例：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch06.jpg"&gt;&lt;/p&gt;
&lt;p&gt;可以看到我的一块238.5g的硬盘(&lt;code&gt;/dev/sda&lt;/code&gt;就代表这块硬盘)，下面列出了&lt;code&gt;/dev/sda*&lt;/code&gt;这三个分区，&lt;code&gt;/dev/sda3&lt;/code&gt;是我存活下来的家目录，可以看到它的类型为&lt;code&gt;Linux&lt;/code&gt;分区。注意看&lt;code&gt;Start&lt;/code&gt;与&lt;code&gt;End&lt;/code&gt;的数值，这个数值代表扇区号，可以理解成硬盘被划分成了一个个小单元，可以直观地看出来在&lt;code&gt;/dev/sda2&lt;/code&gt;的&lt;code&gt;End&lt;/code&gt;与&lt;code&gt;/dev/sda3&lt;/code&gt;的&lt;code&gt;Start&lt;/code&gt;之间空出了一大块未分配的空间，接下来我们将分配这块区域。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;如果你是BIOS/MBR方式引导，&lt;strong&gt;跳过下面创建一个引导分区&lt;/strong&gt;的步骤。&lt;/li&gt;
&lt;li&gt;如果你是EFI/GPT方式引导，并且同时安装了其他系统，那么你应该可以在分区列表中发现一个较小的并且类型为EFI的分区，这是你的引导分区，请记下它的路径（/dev/sdxY)备用，&lt;strong&gt;跳过下面创建一个引导分区&lt;/strong&gt;的步骤。&lt;/li&gt;
&lt;li&gt;如果你是EFI/GPT方式引导，但是没有这个较小的并且类型为EFI的引导分区（这种情况一般只会出现在新的硬盘），那么你需要&lt;strong&gt;先创建一个引导分区&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h5&gt;创建一个引导分区（&lt;strong&gt;仅上面所列的第三种情况需要进行这步&lt;/strong&gt;）&lt;/h5&gt;
&lt;p&gt;执行命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdisk /dev/sdx （请将sdx替换成你要操作的磁盘如sdb sdc等）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面你就进入了&lt;code&gt;fdisk&lt;/code&gt;的操作环境， 输入&lt;code&gt;m&lt;/code&gt;并回车可以查看各命令的作用。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果你是一块全新的硬盘，输入&lt;code&gt;g&lt;/code&gt;来创建一个全新的gpt分区表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;n&lt;/code&gt;创建一个新的分区，首先会让你选择起始扇区，一般直接回车使用默认数值即可，然后可以输入结束扇区或是分区大小，这里我们输入&lt;code&gt;+512M&lt;/code&gt;来创建一个512M的引导分区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时我们可以输入&lt;code&gt;p&lt;/code&gt;来查看新创建的分区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;t&lt;/code&gt;并选择新创建的分区序号来更改分区的类型，输入&lt;code&gt;l&lt;/code&gt;可以查看所有支持的类型，输入&lt;code&gt;ef&lt;/code&gt;更改分区的类型为&lt;code&gt;EFI&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;w&lt;/code&gt;来将之前所有的操作写入磁盘生效，在这之前可以输入&lt;code&gt;p&lt;/code&gt;来确认自己的分区表没有错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入以下命令来格式化刚刚创建的引导分区：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.fat -F32 /dev/sdxY （请将的sdxY替换为刚创建的分区）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;现在引导分区就创建好了。&lt;/p&gt;
&lt;h5&gt;创建根分区&lt;/h5&gt;
&lt;p&gt;输入命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fdisk /dev/sdx （请将sdx替换成你要操作的磁盘如sdb sdc等）
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果你是一块全新的硬盘，输入&lt;code&gt;o&lt;/code&gt;来创建一个新的MBR分区表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;n&lt;/code&gt;创建一个新的分区，首先会让你选择起始扇区，一般直接回车使用默认数值即可，然后可以输入结束扇区或是分区大小，如果我们想要使创建的分区完全占满空闲的空间，可以直接回车使用默认结束扇区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这时我们可以输入&lt;code&gt;p&lt;/code&gt;来查看新创建的分区。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入&lt;code&gt;w&lt;/code&gt;来将之前所有的操作写入磁盘生效，在这之前可以输入&lt;code&gt;p&lt;/code&gt;来确认自己的分区表没有错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输入以下命令来格式化刚刚创建的根分区：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkfs.ext4 /dev/sdxY （请将的sdxY替换为刚创建的分区）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是我的分区过程供参考：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch07.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch08.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;挂载分区&lt;/h4&gt;
&lt;p&gt;执行以下命令将根分区挂载到&lt;code&gt;/mnt&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mount /dev/sdxY /mnt （请将sdxY替换为之前创建的根分区）
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;如果你是EFI/GPT引导方式&lt;/strong&gt;，执行以下命令创建/boot文件夹并将引导分区挂载到上面。&lt;strong&gt;BIOS/MBR引导方式无需进行这步。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir /mnt/boot
mount /dev/sdxY /mnt/boot （请将sdxY替换为之前创建或是已经存在的引导分区）
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h4&gt;选择镜像源&lt;/h4&gt;
&lt;p&gt;因为从这步开始，需要进行一些编辑配置文件的操作，所以需要掌握一些命令行下非常著名的一款编辑器&lt;code&gt;Vim&lt;/code&gt;的基本操作，在这里推荐学习下面这个链接中的存活部分，可以完成编辑、复制粘贴与保存工作即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;http://coolshell.cn/articles/5426.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;镜像源是我们下载的软件包的来源，我们需要根据自己的地区选择不同的源来加快下载的速度。&lt;/p&gt;
&lt;p&gt;执行以下命令，用&lt;code&gt;Vim&lt;/code&gt;来编辑&lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt;这个文件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/pacman.d/mirrorlist
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;提示：输入路径时可以用&lt;code&gt;Tab&lt;/code&gt;键补全&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch09.jpg"&gt;&lt;/p&gt;
&lt;p&gt;找到标有&lt;code&gt;China&lt;/code&gt;的镜像源，&lt;code&gt;normal&lt;/code&gt;模式下按下&lt;code&gt;dd&lt;/code&gt;可以剪切光标下的行，按&lt;code&gt;gg&lt;/code&gt;回到文件首，按&lt;code&gt;p&lt;/code&gt;将行粘贴到文件最前面的位置（优先级最高）。&lt;/p&gt;
&lt;p&gt;当然也可以直接手工输入。&lt;/p&gt;
&lt;p&gt;这里推荐使用清华、浙大源：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch
Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后记得用&lt;code&gt;:wq&lt;/code&gt;命令保存文件并退出。&lt;/p&gt;
&lt;h4&gt;安装基本包&lt;/h4&gt;
&lt;p&gt;下面就要安装最基本的&lt;code&gt;ArchLinux&lt;/code&gt;包到磁盘上了。这是一个联网下载并安装的过程。&lt;/p&gt;
&lt;p&gt;执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacstrap /mnt base base-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据下载速度的不同在这里需要等待一段时间，当命令提示符重新出现的时候就可以进行下一步操作了。&lt;/p&gt;
&lt;h4&gt;配置Fstab&lt;/h4&gt;
&lt;p&gt;生成自动挂载分区的&lt;code&gt;fstab&lt;/code&gt;文件，执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;genfstab -L /mnt &amp;gt;&amp;gt; /mnt/etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;由于这步比较重要，所以我们需要输出生成的文件来检查是否正确，执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat /mnt/etc/fstab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/images/arch10.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如图，可以看到&lt;code&gt;/dev/sda4&lt;/code&gt;被挂载到了根分区。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/dev/sda3&lt;/code&gt;是我之前存活下来的家目录被挂载到了&lt;code&gt;/home&lt;/code&gt;目录（你们没有这条）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果是&lt;code&gt;EFI/GPT&lt;/code&gt;引导的还应该有引导分区被挂载到&lt;code&gt;/boot&lt;/code&gt;目录&lt;/strong&gt;。&lt;/p&gt;
&lt;h4&gt;Chroot&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Chroot&lt;/code&gt;意为&lt;code&gt;Change root&lt;/code&gt;，相当于把操纵权交给我们新安装（或已经存在）的&lt;code&gt;Linux&lt;/code&gt;系统，&lt;strong&gt;执行了这步以后，我们的操作都相当于在磁盘上新装的系统中进行&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;arch-chroot /mnt
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;这里顺便说一下，如果以后我们的系统出现了问题，只要插入U盘并启动， 将我们的系统根分区挂载到了&lt;code&gt;/mnt&lt;/code&gt;下，再通过这条命令就可以进入我们的系统进行修复操作。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;设置时区&lt;/h4&gt;
&lt;p&gt;依次执行如下命令设置我们的时区为上海并生成相关文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
hwclock --systohc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/images/arch11.jpg"&gt;&lt;/p&gt;
&lt;h4&gt;设置Locale&lt;/h4&gt;
&lt;p&gt;设置我们使用的语言选项，执行如下命令来编辑&lt;code&gt;/etc/locale.gen&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/locale.gen
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;等等，怎么提示&lt;code&gt;bash:vim:command not found&lt;/code&gt;了？&lt;/p&gt;
&lt;p&gt;因为我们现在已经&lt;code&gt;Chroot&lt;/code&gt;到了新的系统中，只有一些最基本的包（组件），这时候我们就需要自己安装新的包了，下面就要介绍一下&lt;code&gt;ArchLinux&lt;/code&gt;下非常强大的包管理工具&lt;code&gt;pacman&lt;/code&gt;，大部分情况下，一行命令就可以搞定包与依赖的问题。&lt;/p&gt;
&lt;p&gt;安装包的命令格式为&lt;code&gt;pacman -S 包名&lt;/code&gt;，&lt;code&gt;pacman&lt;/code&gt;会自动检查这个包所需要的其他包（即为依赖）并一起装上。下面我们就通过&lt;code&gt;pacman&lt;/code&gt;来安装一些包，这些包在之后会用上，在这里先提前装好。&lt;/p&gt;
&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S vim dialog wpa_supplicant
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一路确认之后包就被成功装上了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch12.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图中只安装了&lt;code&gt;Vim&lt;/code&gt;和它的依赖。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;安装好&lt;code&gt;Vim&lt;/code&gt;以后，再次执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/locale.gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在文件中找到&lt;code&gt;zh_CN.UTF-8 UTF-8&lt;/code&gt; &lt;code&gt;zh_HK.UTF-8 UTF-8&lt;/code&gt; &lt;code&gt;zh_TW.UTF-8 UTF-8``en_US.UTF-8 UTF-8&lt;/code&gt;这四行，去掉行首的#号，保存并退出。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch13.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch14.jpg"&gt;&lt;/p&gt;
&lt;p&gt;然后执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;locale-gen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/images/arch15.jpg"&gt;&lt;/p&gt;
&lt;p&gt;打开（不存在时会创建）&lt;code&gt;/etc/locale.conf&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/locale.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在文件的第一行加入以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;保存并退出。&lt;/p&gt;
&lt;h4&gt;设置主机名&lt;/h4&gt;
&lt;p&gt;打开（不存在时会创建）&lt;code&gt;/etc/hostname&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/hostname
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在文件的第一行输入你自己设定的一个&lt;code&gt;myhostname&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;保存并退出。&lt;/p&gt;
&lt;p&gt;编辑&lt;code&gt;/etc/hosts&lt;/code&gt;文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;vim /etc/hosts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;作如下修改（将&lt;code&gt;myhostname&lt;/code&gt;替换成你自己设定的主机名）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="m"&gt;127&lt;/span&gt;.0.0.1   localhost.localdomain   localhost
::1     localhost.localdomain   localhost
&lt;span class="m"&gt;127&lt;/span&gt;.0.1.1   myhostname.localdomain  myhostname
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/images/arch16.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这里我设置的是&lt;code&gt;viseator&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;保存并退出。&lt;/p&gt;
&lt;h4&gt;设置Root密码&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Root&lt;/code&gt;是&lt;code&gt;Linux&lt;/code&gt;中具有最高权限帐户，有些敏感的操作必须通过&lt;code&gt;Root&lt;/code&gt;用户进行，比如使用&lt;code&gt;pacman&lt;/code&gt;，我们之前进行所有的操作也都是以&lt;code&gt;Root&lt;/code&gt;用户进行的，也正是因为&lt;code&gt;Root&lt;/code&gt;的权限过高，如果使用不当会造成安全问题，所以我们之后会新建一个普通用户来进行日常的操作。在这里我们需要为&lt;code&gt;Root&lt;/code&gt;帐户设置一个密码：&lt;/p&gt;
&lt;p&gt;执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passwd
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;按提示设置并确认就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch17.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;或许有的人已经发现官方Wiki和一些其他教程资料中的命令是以&lt;code&gt;#&lt;/code&gt;或&lt;code&gt;$&lt;/code&gt;开头的，这两个符号就对应着命令行中的命令提示符，&lt;code&gt;#&lt;/code&gt;代表以&lt;code&gt;Root&lt;/code&gt;用户执行命令，&lt;code&gt;$&lt;/code&gt;代表以普通用户执行命令，平时使用教程中的命令时应该注意这一点。&lt;/p&gt;
&lt;hr&gt;
&lt;h4&gt;安装&lt;code&gt;Intel-ucode&lt;/code&gt;（非&lt;code&gt;Intel&lt;/code&gt;CPU可以跳过此步骤）&lt;/h4&gt;
&lt;p&gt;直接&lt;code&gt;pacman&lt;/code&gt;安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S intel-ucode
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;安装&lt;code&gt;Bootloader&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;经常听说很多人因为引导问题导致系统安装失败，多数是因为教程没有统一或是过时的教程引起的，这里只要按照步骤来其实是不难的。&lt;/p&gt;
&lt;p&gt;这里我们安装最流行的&lt;code&gt;Grub2&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先安装&lt;code&gt;os-prober&lt;/code&gt;这个包，它可以配合&lt;code&gt;Grub&lt;/code&gt;检测已经存在的系统，自动设置启动选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S os-prober
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;如果为BIOS/MBR引导方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;grub&lt;/code&gt;包：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S grub
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;部署&lt;code&gt;grub&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;i386-pc /dev/sdx （将sdx换成你安装的硬盘）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这里的&lt;code&gt;sdx&lt;/code&gt;应该为硬盘（例如&lt;code&gt;/dev/sda&lt;/code&gt;），&lt;strong&gt;而不是&lt;/strong&gt;形如&lt;code&gt;/dev/sda1&lt;/code&gt;这样的分区。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成配置文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="/images/arch18.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果你没有看到如图所示的提示信息，请仔细检查是否正确完成上面的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;如果为EFI/GPT引导方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;grub&lt;/code&gt;与&lt;code&gt;efibootmgr&lt;/code&gt;两个包：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pacman -S grub efibootmgr
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;部署&lt;code&gt;grub&lt;/code&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-install --target&lt;span class="o"&gt;=&lt;/span&gt;x86_64-efi --efi-directory&lt;span class="o"&gt;=&lt;/span&gt;/boot --bootloader-id&lt;span class="o"&gt;=&lt;/span&gt;grub
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;生成配置文件：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grub-mkconfig -o /boot/grub/grub.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;提示信息应与上面的图类似，如果你发现错误，请仔细检查是否正确完成上面的过程。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;接下来，你需要进行重启来启动已经安装好的系统，执行如下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
reboot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意这个时候你可能会卡在有两行提示的地方无法正常关机，长按电源键强制关机即可，没有影响。&lt;/p&gt;
&lt;p&gt;关机后拔出U盘，启动顺序会自动以硬盘启动，如果一切顺利，那么你将会看到下面的界面：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/arch19.jpg"&gt;&lt;/p&gt;
&lt;p&gt;启动时有可能会有输出信息显示在这里，直接回车就可以了。&lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;root&lt;/code&gt;，再输入之前设置的密码，显示出命令提示符，恭喜你，你已经成功安装&lt;code&gt;ArchLinux&lt;/code&gt;！&lt;/p&gt;
&lt;h2&gt;安装后配置&lt;/h2&gt;
&lt;p&gt;虽然系统安装好了，但是还没有进行基本配置和安装图形界面，所以接下来我们要进行一些必须的配置和图形界面的安装。&lt;/p&gt;
&lt;p&gt;请见下一篇文章：&lt;a href="http://www.hustmeituan.club/archlinuxan-zhuang-hou-de-bi-xu-pei-zhi-yu-tu-xing-jie-mian-an-zhuang-jiao-cheng.html"&gt;ArchLinux安装后的必须配置与图形界面安装教程&lt;/a&gt;。&lt;/p&gt;</content><category term="arch"></category><category term="linux"></category></entry><entry><title>NFC与门禁卡初探</title><link href="/nfcyu-men-jin-qia-chu-tan.html" rel="alternate"></link><published>2017-05-17T11:36:21+08:00</published><updated>2017-05-17T11:36:21+08:00</updated><author><name>Lichen Zhang</name></author><id>tag:None,2017-05-17:/nfcyu-men-jin-qia-chu-tan.html</id><summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;开学之后，学校寝室和启明学院都开始使用了以校园卡为载体的门禁服务，只有刷指定人员的校园卡才能进入。我对其原理产生了好奇，就趁机进行了一些研究。&lt;/p&gt;
&lt;h1&gt;了解NFC&lt;/h1&gt;
&lt;p&gt;NFC，near field communication(近场通信)，是一种短距离的高频无线通信技术，允许电子设备之间进行非接触式点对点数据传输，在十厘米内交换数据。2004年，诺基亚、飞利浦以及索尼三家公司建立了NFC forum，成为了NFC的开端。&lt;/p&gt;
&lt;p&gt;NFC从其本质上来说，是一种RFID的演进技术，其于04年和05年发布了两个协议标准，分别是ISO/IEC 18092：2004和ISO/IEC 21481：2005。上述两个协议均源于更早的RFID协议 ISO/IEC 14443，即13.56MHz RFID协议标准。上述两个NFC协议推出的第二版分别是ISO/IEC 18092：2013(NFCIP-1)和ISO/IEC 21481：2012(NFCIP-2)。NFC向下兼容索尼的FeliCaTM标准以及飞利浦的MIFARE标准。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;协议 …&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;/table&gt;</summary><content type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;开学之后，学校寝室和启明学院都开始使用了以校园卡为载体的门禁服务，只有刷指定人员的校园卡才能进入。我对其原理产生了好奇，就趁机进行了一些研究。&lt;/p&gt;
&lt;h1&gt;了解NFC&lt;/h1&gt;
&lt;p&gt;NFC，near field communication(近场通信)，是一种短距离的高频无线通信技术，允许电子设备之间进行非接触式点对点数据传输，在十厘米内交换数据。2004年，诺基亚、飞利浦以及索尼三家公司建立了NFC forum，成为了NFC的开端。&lt;/p&gt;
&lt;p&gt;NFC从其本质上来说，是一种RFID的演进技术，其于04年和05年发布了两个协议标准，分别是ISO/IEC 18092：2004和ISO/IEC 21481：2005。上述两个协议均源于更早的RFID协议 ISO/IEC 14443，即13.56MHz RFID协议标准。上述两个NFC协议推出的第二版分别是ISO/IEC 18092：2013(NFCIP-1)和ISO/IEC 21481：2012(NFCIP-2)。NFC向下兼容索尼的FeliCaTM标准以及飞利浦的MIFARE标准。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;技术&lt;/th&gt;
&lt;th&gt;协议&lt;/th&gt;
&lt;th&gt;频率&lt;/th&gt;
&lt;th&gt;传输距离&lt;/th&gt;
&lt;th&gt;主动&lt;/th&gt;
&lt;th&gt;被动&lt;/th&gt;
&lt;th&gt;典型设备和应用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;NFC&lt;/td&gt;
&lt;td&gt;ISO/IEC 18092&lt;br&gt;ISO/IEC 21481&lt;/td&gt;
&lt;td&gt;13.56 MHz&lt;/td&gt;
&lt;td&gt;10 cm&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;对等网络中的智能手机、平板电脑、便携式设备&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;免接触智能卡&lt;/td&gt;
&lt;td&gt;ISO/IEC 14443&lt;/td&gt;
&lt;td&gt;13.56 MHz&lt;/td&gt;
&lt;td&gt;10 cm&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;票务、支付、门禁、护照等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RFID&lt;/td&gt;
&lt;td&gt;ISO/IEC 18000&lt;/td&gt;
&lt;td&gt;LF (120–150 KHz)&lt;br&gt;HF (13.56 MHz)&lt;br&gt;UHF (433–900 MHz)&lt;/td&gt;
&lt;td&gt;&amp;lt;40 m&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;td&gt;标记和跟踪物品，适用于制造物流、零售等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;NFC的工作模式有三种，卡模拟模式（Card emulation mode）、点对点模式（P2P mode）和读/写模式（Reader/Writer mode）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在读/写模式中，NFC读/写器从NFC智能对象中读取数据，并根据这些信息操作。例如，采用支持NFC的手机，用户可以通过检索的URL自动联网、无需键入便可发送短信(SMS)文本、获取优惠券等，所有这些仅需触摸此对象的设备即可。&lt;/li&gt;
&lt;li&gt;在点对点模式中，任何支持NFC功能的读/写器都可与另一个NFC读/写器进行通信并交换数据，与读/写模式具有同样的安全性、直观性和简单性等优势。在这种模式下，一个读/写器可作为一个标签，创建通信链路。例如，具有读/写器的两个设备(如智能电话)可以彼此通信。&lt;/li&gt;
&lt;li&gt;卡模拟模式的NFC器件可以取代非接触式智能卡，使NFC器件能够用于现有的非接触式卡基础设施，进行票务、门禁、运输、收费站以及非接触式支付等操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;复制流程&lt;/h1&gt;
&lt;h2&gt;初步分析&lt;/h2&gt;
&lt;p&gt;由于采集门禁卡信息时，只需要提供学号和姓名，以及卡编号，无需其他信息，故推测门禁只是简单读取卡的ID，而不会去解密其他信息，只需要使用卡模拟模式，简单地模拟一个ID相同的卡即可。在网上查阅资料可得知，门禁卡的工作原理大多如此。&lt;/p&gt;
&lt;h2&gt;信息采集&lt;/h2&gt;
&lt;p&gt;由于手头设备有限，只能用手机查看校园卡的ID信息。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://play.google.com/store/apps/details?id=com.wakdev.wdnfc"&gt;NFC Tools下载地址&lt;/a&gt;
&lt;img alt="" src="/images/ID-information.jpg"&gt;&lt;/p&gt;
&lt;p&gt;容易得到，Serial number处为形如&lt;code&gt;XX:XX:XX:XX&lt;/code&gt;的ID（X为16进制数字）。这就是门禁所识别的ID。&lt;/p&gt;
&lt;h2&gt;信息查询&lt;/h2&gt;
&lt;p&gt;查阅相关资料可以得知，NFC的相应配置保存在&lt;code&gt;/system/etc/libnfc-nxp.conf&lt;/code&gt;或&lt;code&gt;/system/etc/libnfc-brcm.conf&lt;/code&gt;中，具体的配置取决于NFC芯片的类型。&lt;/p&gt;
&lt;p&gt;手头有一部Nexus 6P，其芯片为NXP PN548，故阅读了&lt;code&gt;libnfc-nxp.conf&lt;/code&gt;，通过注释从中发现了需要更改的配置。在文件的607行，有Core configuration settings中的&lt;code&gt;LA_NFCID1&lt;/code&gt;，代表了手机NFC的NFCA-ID，这正是门禁系统能识别的ID。这里，33表示配置的类型，04表示后面所跟的配置字节数，后面的四个字节为数据。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;###############################################################################
# Core configuration settings
# It includes
# 18        - Poll Mode NFC-F:   PF_BIT_RATE
# 21        - Poll Mode ISO-DEP: PI_BIT_RATE
# 28        - Poll Mode NFC-DEP: PN_NFC_DEP_SPEED
# 30        - Lis. Mode NFC-A:   LA_BIT_FRAME_SDD
# 31        - Lis. Mode NFC-A:   LA_PLATFORM_CONFIG
# 33        - Lis. Mode NFC-A:   LA_NFCID1
# 50        - Lis. Mode NFC-F:   LF_PROTOCOL_TYPE
# 54        - Lis. Mode NFC-F:   LF_CON_BITR_F
# 5B        - Lis. Mode ISO-DEP: LI_BIT_RATE
# 60        - Lis. Mode NFC-DEP: LN_WT
# 80        - Other Param.:      RF_FIELD_INFO
# 81        - Other Param.:      RF_NFCEE_ACTION
# 82        - Other Param.:      NFCDEP_OP
NXP_CORE_CONF={20, 02, 2B, 0D,
        18, 01, 01,
        21, 01, 00,
        28, 01, 00,
        30, 01, 08,
        31, 01, 03,
        33, 04, 00, 00, 00, 00,
        50, 01, 02,
        54, 01, 06,
        5B, 01, 00,
        60, 01, 0E,
        80, 01, 01,
        81, 01, 01,
        82, 01, 0E
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;信息修改&lt;/h2&gt;
&lt;p&gt;将上面获取到的ID插入配置文件中，重启手机NFC，即可完成修改。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="c1"&gt;#!/system/bin/sh&lt;/span&gt;
 sed -i &lt;span class="s1"&gt;&amp;#39;607s/^.*$/        33, 04, XX, XX, XX, XX,/&amp;#39;&lt;/span&gt; /etc/libnfc-nxp.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;批量修改&lt;/h2&gt;
&lt;p&gt;尝试着写了批量修改的脚本，以完成某些特殊要求，但是由于安卓系统本身的限制，无法做到自动重启NFC，贴代码仅供参考。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/system/bin/sh&lt;/span&gt;
setenforce &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SElinux disabled&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#disable SElinux&lt;/span&gt;
mount -o rw,remount /system
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nfc disabled&amp;quot;&lt;/span&gt;
service call nfc &lt;span class="m"&gt;5&lt;/span&gt;
sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#first person&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;607s/^.*$/        33, 04, XX, XX, XX, XX,/&amp;#39;&lt;/span&gt; /etc/libnfc-nxp.conf
sleep &lt;span class="m"&gt;1&lt;/span&gt;
service call nfc &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nfc enabled&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;5&lt;/span&gt;
service call nfc &lt;span class="m"&gt;5&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nfc disabled&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="c1"&gt;#second person&lt;/span&gt;
sed -i &lt;span class="s1"&gt;&amp;#39;607s/^.*$/        33, 04, XX, XX, XX, XX,/&amp;#39;&lt;/span&gt; /etc/libnfc-nxp.conf
service call nfc &lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;nfc enabled&amp;quot;&lt;/span&gt;
sleep &lt;span class="m"&gt;1&lt;/span&gt;
setenforce &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;总结&lt;/h1&gt;
&lt;p&gt;门禁使用易于复制的射频卡ID检测是极为不安全的，外来人员只需要注意到这一点就可以轻松地进入宿舍，同时，此功能还可以用来体育打卡、进入图书馆等，需要慎加利用。&lt;/p&gt;</content><category term="hack"></category><category term="NFC"></category></entry><entry><title>Android利用UDP、TCP进行局域网数据传输</title><link href="/androidli-yong-udp-tcpjin-xing-ju-yu-wang-shu-ju-chuan-shu.html" rel="alternate"></link><published>2017-05-11T15:58:06+08:00</published><updated>2017-05-11T15:58:06+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-05-11:/androidli-yong-udp-tcpjin-xing-ju-yu-wang-shu-ju-chuan-shu.html</id><summary type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;在团队内部的hackweek中实现了一个在局域网环境中（同一个wifi下）进行的卡片收发小游戏，踩了一些关于局域网内通信的坑，这篇博文就用来整理一下整个过程的思路，&lt;a href="https://github.com/viseator/AnonymousCard"&gt;完整代码地址&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;实现思路&lt;/h2&gt;
&lt;p&gt;在整个过程中利用到了UDP与TCP两种传输层协议，两者的特性决定了使用上的不同。&lt;/p&gt;
&lt;p&gt;简单地说，UDP非面向连接，不需要先与目标建立连接，所以UDP不提供可靠的数据传输，也不能保证数据准确无误地到达目的地，但UDP的优势在于它可以迅速传送大量信息，传输性能比较好。&lt;/p&gt;
&lt;p&gt;而TCP是面向连接的协议，需要经过三次握手与目的地址建立一个稳定的连接，可以保证数据准确、完整地到达。但是它的传输效率就没有UDP那么高。&lt;/p&gt;
&lt;p&gt;首先，为了数据传输的稳定和准确性，在传送主要数据部分我们必需使用TCP来建立一个点对点的稳定的连接来传输主要数据。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;但是，为了建立一个TCP连接，请求的一方必须要知道被请求一方（下面简称服务方）的IP地址。而在局域网中，如果我们想要实现每个人连接局域网以后马上可以收发信息，由于每次加入时分配到的IP地址并不是固定的也无法提前得知，所以我们需要使用其他的办法先获取到服务方的IP地址。&lt;/p&gt;
&lt;p&gt;这时就要利用到UDP协议的组播特性了，组播可以让设备都加入一个预设好的组，然后就可以向这个组中发送数据包，只要加入了这个组的设备都可以收到这个数据包。这样只要所有的设备都提前加入了同一个组，不需要互相知道IP地址就可以交换数据，那么我们应该如何利用这样的特性呢？&lt;/p&gt;
&lt;p&gt;结合我们的实际需求，游戏过程是每个人可以向所有人发送一个只有标题的匿名卡片（这个过程就符合UDP组播的特性），如果感兴趣的人就可以点击收到的卡片来打开这个卡片查看具体内容（这个过程就需要我们建立TCP连接来传输数据）。&lt;/p&gt;
&lt;p&gt;所以我们就有了思路，向所有人发送卡片的过程使用UDP进行组播，数据包中除了包含标题信息还要包含一个发送人的IP地址以及一个Mac地址作为ID（考虑到重新连接后地址发生改变的问题 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;写在前面&lt;/h2&gt;
&lt;p&gt;在团队内部的hackweek中实现了一个在局域网环境中（同一个wifi下）进行的卡片收发小游戏，踩了一些关于局域网内通信的坑，这篇博文就用来整理一下整个过程的思路，&lt;a href="https://github.com/viseator/AnonymousCard"&gt;完整代码地址&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;实现思路&lt;/h2&gt;
&lt;p&gt;在整个过程中利用到了UDP与TCP两种传输层协议，两者的特性决定了使用上的不同。&lt;/p&gt;
&lt;p&gt;简单地说，UDP非面向连接，不需要先与目标建立连接，所以UDP不提供可靠的数据传输，也不能保证数据准确无误地到达目的地，但UDP的优势在于它可以迅速传送大量信息，传输性能比较好。&lt;/p&gt;
&lt;p&gt;而TCP是面向连接的协议，需要经过三次握手与目的地址建立一个稳定的连接，可以保证数据准确、完整地到达。但是它的传输效率就没有UDP那么高。&lt;/p&gt;
&lt;p&gt;首先，为了数据传输的稳定和准确性，在传送主要数据部分我们必需使用TCP来建立一个点对点的稳定的连接来传输主要数据。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;但是，为了建立一个TCP连接，请求的一方必须要知道被请求一方（下面简称服务方）的IP地址。而在局域网中，如果我们想要实现每个人连接局域网以后马上可以收发信息，由于每次加入时分配到的IP地址并不是固定的也无法提前得知，所以我们需要使用其他的办法先获取到服务方的IP地址。&lt;/p&gt;
&lt;p&gt;这时就要利用到UDP协议的组播特性了，组播可以让设备都加入一个预设好的组，然后就可以向这个组中发送数据包，只要加入了这个组的设备都可以收到这个数据包。这样只要所有的设备都提前加入了同一个组，不需要互相知道IP地址就可以交换数据，那么我们应该如何利用这样的特性呢？&lt;/p&gt;
&lt;p&gt;结合我们的实际需求，游戏过程是每个人可以向所有人发送一个只有标题的匿名卡片（这个过程就符合UDP组播的特性），如果感兴趣的人就可以点击收到的卡片来打开这个卡片查看具体内容（这个过程就需要我们建立TCP连接来传输数据）。&lt;/p&gt;
&lt;p&gt;所以我们就有了思路，向所有人发送卡片的过程使用UDP进行组播，数据包中除了包含标题信息还要包含一个发送人的IP地址以及一个Mac地址作为ID（考虑到重新连接后地址发生改变的问题），当所有人收到这个卡片以后需要建立连接的时候就可以得到发送人的IP来进行TCP连接。&lt;/p&gt;
&lt;p&gt;下面我们来实现这个过程。&lt;/p&gt;
&lt;h2&gt;具体实现&lt;/h2&gt;
&lt;h3&gt;组播&lt;/h3&gt;
&lt;p&gt;我们定义一个&lt;code&gt;ComUtil&lt;/code&gt;类来处理组播&lt;/p&gt;
&lt;h4&gt;加入组&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;CHARSET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;BROADCAST_IP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;224.0.1.2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//IP协议中特殊IP地址，作为一个组，用来集合加入的所有客户端&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BROADCAST_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7816&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//广播目的端的端口号&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;DATA_LEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MulticastSocket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;InetAddress&lt;/span&gt; &lt;span class="n"&gt;broadcastAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//当前设备在局域网下的IP地址&lt;/span&gt;
&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;inBuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;DATA_LEN&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DatagramPacket&lt;/span&gt; &lt;span class="n"&gt;inPacket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DatagramPacket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inBuff&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inBuff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//用于接受对象的packet&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;DatagramPacket&lt;/span&gt; &lt;span class="n"&gt;outPacket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//用于发送对象的packet&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;ComUtil&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//回调使用Handler机制&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;startReceiveMsg&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MulticastSocket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BROADCAST_PORT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//打开一个组播Socket&lt;/span&gt;
        &lt;span class="n"&gt;broadcastAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;InetAddress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getByName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BROADCAST_IP&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//需要进行一步转换来使用String类型的IP地址&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;joinGroup&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;broadcastAddress&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//加入一个组&lt;/span&gt;
        &lt;span class="n"&gt;outPacket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DatagramPacket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;broadcastAddress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BROADCAST_PORT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//用于发送数据包的DatagramPacket&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;//下面两行用于下文中的开始接收广播&lt;/span&gt;
    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ReadBroad&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注释应该讲得比较清楚了，这里要注意的是UDP数据的收发需要使用一个&lt;code&gt;DatagramPacket&lt;/code&gt;来进行。可以理解为一个数据包。&lt;/p&gt;
&lt;h4&gt;接收组播信息&lt;/h4&gt;
&lt;p&gt;上面的代码最后两行新建了一个线程用于接收组播信息，具体代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ReadBroad&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;receive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inPacket&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BROADCAST_PORT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inBuff&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendMessage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;进行了一个无限循环，进行到第5行时如果没有收到广播的&lt;code&gt;DatagramPacket&lt;/code&gt;会一直处于阻塞状态，收到一个&lt;code&gt;DatagramPacket&lt;/code&gt;后就会通过&lt;code&gt;Handler&lt;/code&gt;来转发出去，在&lt;code&gt;Handler&lt;/code&gt;所在线程来处理这个数据包。之后再进行循环不断地接收并处理数据包。&lt;/p&gt;
&lt;h4&gt;发送组播信息&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;broadCast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Thread&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;outPacket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setData&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//数据来源为外部，类型是二进制数据&lt;/span&gt;
                &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;send&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outPacket&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//向组中发送该数据包&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个方法由外部调用，传入一个二进制数组数据通过&lt;code&gt;setData()&lt;/code&gt;放在数据包中向组中的所有成员发送。成员通过上一节的接收方法接收到的就会是同样的数据包。&lt;/p&gt;
&lt;h3&gt;数据处理&lt;/h3&gt;
&lt;p&gt;建立了组播的工具，下一步就要建立一个数据对象来进行信息的交换。由于数据包中的数据只能是以字节码的形式存在，所以我们设计的数据对象一定要是可序列化的（也就是实现了&lt;code&gt;Serializable&lt;/code&gt;接口的），再通过流工具进行转换。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UDPDataPackage&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Serializable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;macAddress&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在这个简单的JavaBean中只定义了四个简单数据。&lt;/p&gt;
&lt;p&gt;我们将自己的信息设置后就可以通过如下方法转换成一个字节数组再通过上面的广播方法来发送：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;comUtil&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;broadCast&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConvertData&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;objectToByte&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;UDPDataPackage&lt;/span&gt;&lt;span class="o"&gt;(...)));&lt;/span&gt; &lt;span class="c1"&gt;//发送数据&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//通过流来进行的序列化&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="nf"&gt;objectToByte&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;byteArrayOutputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;outputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;byteArrayOutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toByteArray&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样的，在接收到数据以后可以反序列化来得到原对象：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="nf"&gt;byteToObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ByteArrayInputStream&lt;/span&gt; &lt;span class="n"&gt;byteInputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;byteInputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，我们就可以从这个对象中获取想到的IP地址等信息了。&lt;/p&gt;
&lt;h3&gt;建立TCP连接传输数据&lt;/h3&gt;
&lt;p&gt;想要建立TCP连接，需要客户端与服务端两端的配合，我们现在已经获取到了需要建立连接的IP地址，下面我们要做的是与这个地址的服务端建立连接再传输数据。服务端需要一直运行来随时准备接受可能的请求。&lt;/p&gt;
&lt;p&gt;由于我们同一个设备既要作为客户端，也要作为服务端，所以要编写两个类。&lt;/p&gt;
&lt;h4&gt;服务端&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;startServer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//利用handler进行处理&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RunServer&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//另开一个线程接收连接请求&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RunServer&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ServerSocket&lt;/span&gt; &lt;span class="n"&gt;serverSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;serverSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ServerSocket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//初始化一个ServerSocket&lt;/span&gt;
            &lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setReuseAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;InetSocketAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;&lt;span class="c1"&gt;//与端口绑定&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;accept&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//利用accept方法获得socket&lt;/span&gt;
                &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;inputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//获取输入流（来源自客户端）&lt;/span&gt;
                &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//转换为对象输入流&lt;/span&gt;

                &lt;span class="c1"&gt;//获取udpDataPackage对象&lt;/span&gt;
                &lt;span class="n"&gt;UDPDataPackage&lt;/span&gt; &lt;span class="n"&gt;udpDataPackage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UDPDataPackage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;OutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOutputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt; &lt;span class="n"&gt;objectOutputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;objectOutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//将数据包写入输出流传送给客户端&lt;/span&gt;
                &lt;span class="n"&gt;objectOutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//刷新流&lt;/span&gt;

                &lt;span class="n"&gt;objectOutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;objectInputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释见注释。&lt;/p&gt;
&lt;h4&gt;客户端&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sendRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UDPDataPackage&lt;/span&gt; &lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Handler&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ipAddress&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//即为之前获取到的IP地址&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;udpDataPackage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SendData&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SendData&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//新建一个socket&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setReuseAddress&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setKeepAlive&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//设置socket属性&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSoTimeout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//设置超时&lt;/span&gt;
            &lt;span class="c1"&gt;//获得一个对象输出流&lt;/span&gt;
            &lt;span class="n"&gt;OutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getOutputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt; &lt;span class="n"&gt;objectOutputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectOutputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;objectOutputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeObject&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//将请求包写入输出流（传送给服务端）&lt;/span&gt;
            &lt;span class="c1"&gt;//获取服务端返回的流&lt;/span&gt;
            &lt;span class="n"&gt;InputStream&lt;/span&gt; &lt;span class="n"&gt;inputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInputStream&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ObjectInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;udpDataPackage&lt;/span&gt; &lt;span class="n"&gt;dataPackage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;objectInputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;readObject&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//获取到返回的数据对象&lt;/span&gt;
            &lt;span class="c1"&gt;//转发给handler进行处理&lt;/span&gt;
            &lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;what&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dataPackage&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendMessage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SocketTimeoutException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;sendRequest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ipAddress&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;udpDataPackage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;ClassNotFoundException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释见注释。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;可以看见TCP连接还是比较简单的，设置好&lt;code&gt;socket&lt;/code&gt;并获取到输入输出流以后就可以把服务端当作本地流一样操作，具体的网络通信实现过程被隐藏了，有了流以后就可以进行所有能对流进行的操作了。到这里，我们要实现的局域网数据传输已经完成了。&lt;/p&gt;</content><category term="android"></category><category term="network"></category></entry><entry><title>jsoup基本应用介绍</title><link href="/jsoupji-ben-ying-yong-jie-shao.html" rel="alternate"></link><published>2017-04-20T08:22:00+08:00</published><updated>2017-04-20T08:22:00+08:00</updated><author><name>Zijie Han</name></author><id>tag:None,2017-04-20:/jsoupji-ben-ying-yong-jie-shao.html</id><summary type="html">&lt;p&gt;前些时间要做一个v2ex的第三方客户端，偶然发现了一个爬虫神器jsoup.运用jsoup对网站进行爬虫非常容易，仅需几行代码即可完成对整个网站的爬虫。&lt;/p&gt;
&lt;p&gt;jsoup是的主要功能如下：&lt;/p&gt;
&lt;p&gt;1.从一个url，文件或者字符串中解析HTML&lt;/p&gt;
&lt;p&gt;2.使用DOM或者CSS选择器来查找、取出数据；&lt;/p&gt;
&lt;p&gt;3.操作HTML元素、属性和文本。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jsoup.org/"&gt;jsoup官网&lt;/a&gt;进入官网下载jar.jsoup是基于开源协议MIT发布的。
如何对一个网站进行爬虫呢？我们v2ex网站首页为例。首先打开&lt;a href="http://v2ex.com"&gt;v2ex官网&lt;/a&gt;筛选我们需要的内容，现以v2ex的首页中的问答为例，检查该元素，发现所有的问答都在下的&lt;tbody&gt;中。其次，我们所需要的标题为&lt;code&gt;&amp;lt;a href="xxx"&amp;gt;标题内容&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这条文本语句当中，检查副标题，其存在于&lt;code&gt;&amp;amp;lt;a class="node" href="xxx"&amp;amp;gt;程序员&amp;amp;lt;/a&amp;amp;gt;&lt;/code&gt;以及&lt;code&gt;&amp;amp;lt;strong …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;前些时间要做一个v2ex的第三方客户端，偶然发现了一个爬虫神器jsoup.运用jsoup对网站进行爬虫非常容易，仅需几行代码即可完成对整个网站的爬虫。&lt;/p&gt;
&lt;p&gt;jsoup是的主要功能如下：&lt;/p&gt;
&lt;p&gt;1.从一个url，文件或者字符串中解析HTML&lt;/p&gt;
&lt;p&gt;2.使用DOM或者CSS选择器来查找、取出数据；&lt;/p&gt;
&lt;p&gt;3.操作HTML元素、属性和文本。&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://jsoup.org/"&gt;jsoup官网&lt;/a&gt;进入官网下载jar.jsoup是基于开源协议MIT发布的。
如何对一个网站进行爬虫呢？我们v2ex网站首页为例。首先打开&lt;a href="http://v2ex.com"&gt;v2ex官网&lt;/a&gt;筛选我们需要的内容，现以v2ex的首页中的问答为例，检查该元素，发现所有的问答都在下的&lt;tbody&gt;中。其次，我们所需要的标题为&lt;code&gt;&amp;lt;a href="xxx"&amp;gt;标题内容&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这条文本语句当中，检查副标题，其存在于&lt;code&gt;&amp;amp;lt;a class="node" href="xxx"&amp;amp;gt;程序员&amp;amp;lt;/a&amp;amp;gt;&lt;/code&gt;以及&lt;code&gt;&amp;amp;lt;strong&amp;amp;gt;xxx&amp;amp;lt;/strong&amp;amp;gt;&lt;/code&gt;等标签中。现在我们找到了我们需要的内容及其标签，如何爬取这些文件呢？我们仅仅需要几行代码即可，这里我们在子线程中爬去，因为在主线程中爬取时可能会报错：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;runnable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Runnable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nd"&gt;@Override&lt;/span&gt;
        &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://www.v2ex.com/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//伪装成浏览器进行访问，因为有的网站可能禁止爬虫。&lt;/span&gt;
            &lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Jsoup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;connect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;header&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Mozilla/5.0 (X11; Linux x86_64; rv:32.0) Gecko/    20100101 Firefox/32.0&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//这里不用管，随便写&lt;/span&gt;
            &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//下载整个页面，以doc保存&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printStackTrace&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;Elements&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tbody tr&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//删选tbody tr的标签&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Element&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;elements&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getElementsByClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;item_title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//选出标题&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;urll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//根据类别选取&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;vtitle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getElementsByClass&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;node&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//根据class选取副标题中的“程序员”字样&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;aserandlast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getElementsByTag&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strong&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;//由于我们爬到的strong标签有两个，所我们还需要将字符串进行一次分割&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-smi&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-k&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-k&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="o"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-pds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/span&amp;gt;img&amp;lt;span class=&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pds&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-k&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;.&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="o"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-s&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pl-pds&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;/span&amp;gt;src&amp;lt;span class=&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;pl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pds&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;);&lt;/span&gt;       &lt;span class="c1"&gt;//抓取图片链接&lt;/span&gt;
                &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;Array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convertStr&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aserandlast&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urll&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;大标题为： &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;链接为：&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;urll&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;小标题为: &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;vtitle&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;  /1:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]+&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;   /2:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
                &lt;span class="n"&gt;Title&lt;/span&gt; &lt;span class="n"&gt;title1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urll&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;titleList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title1&lt;/span&gt;&lt;span class="o"&gt;);}&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://115.159.151.84/wp-content/uploads/2017/04/FD1WUCWPF2PG5B.png&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://115.159.151.84/wp-content/uploads/2017/04/FD1WUCWPF2PG5B-1024x392.png&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;730&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;279&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;alignnone size-large wp-image-111&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sendEmptyMessage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;strArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;strArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;split&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strArray&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行结果附图。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://115.159.151.84/wp-content/uploads/2017/04/FD1WUCWPF2PG5B.png"&gt;&lt;img class="alignnone size-large wp-image-111" src="http://115.159.151.84/wp-content/uploads/2017/04/FD1WUCWPF2PG5B-1024x392.png" alt="" width="730" height="279" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;jsoup在使用过程中还添加了多个过滤器来防止攻击：
&lt;ol&gt;
     &lt;li&gt;none()：只允许包含文本信息&lt;/li&gt;
     &lt;li&gt;basic(): 只允许基本标签：a,b,blockqoute,br,captiion,code,cite等等&lt;/li&gt;
     &lt;li&gt;basicWihtImages():允许基本标签、图片信息&lt;/li&gt;
     &lt;li&gt;relaxed(): 允许更多标签如：h1,h2,h3.h4.tbody,td,thead,tr,u,ul等等&lt;/li&gt;
&lt;/ol&gt;
除代码所示的方法以外，jsoup还支持很多很强大的方法：
可利用jsoup下载form表单并进行模拟登陆，详情可参见&lt;a href="jsoup.org"&gt;jsoup官方网站&lt;/a&gt;&lt;/p&gt;</content><category term="Jsoup"></category></entry><entry><title>设计模式——结构型模式</title><link href="/she-ji-mo-shi-jie-gou-xing-mo-shi.html" rel="alternate"></link><published>2017-04-06T19:38:39+08:00</published><updated>2017-04-06T19:38:39+08:00</updated><author><name>Yifeng Tang</name></author><id>tag:None,2017-04-06:/she-ji-mo-shi-jie-gou-xing-mo-shi.html</id><summary type="html">&lt;h1&gt;Adapter（适配器模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;将一个类的接口转换成客户所希望的另一个接口，范围从单纯的改变接口的名称直到适配、甚至添加额外的方法以便满足完全没有联系的接口方法。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="对象适配器结构图" src="/images/2017_3_20_3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对象适配器依赖于对象的组合，主要是依靠Adapter类的代理，将对于Adapter的requset与special request转发到Target类与Adaptee中去。&lt;/p&gt;
&lt;p&gt;&lt;img alt="类适配器结构图" src="/images/2017_3_20_4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;类适配器依赖于多重继承（java中即是接口），将相应需要提供的方法加在Target类上。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_20_5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如图所示，Client类调用Adapter类上的某些方法，以实现相应的request或者是specailRequset方法。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存在一个想要使用的但是接口并不满足你的需求的一个类的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你想创建一个可以复用的类，这个类可以与其他不相关的或者不可预见的类协同工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你想要使用一些子类，但是你只想适配它的父类方法。（仅适用于对象适配器中）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Target&lt;/p&gt;
&lt;p&gt;定义用户原有的各种业务代码与功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;与Target接口进行交流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adaptee&lt;/p&gt;
&lt;p&gt;一个已经存在并且需要适配才能正常工作的一个接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter&lt;/p&gt;
&lt;p&gt;对Adatper的接口与Target接口进行适配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adapter的适配程度&lt;/p&gt;
&lt;p&gt;Adapter的工作量取决于两个接口的相似程度，工作范围从简单的改变操作名到支持完全不同的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可插入的Adapter&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/yqj2065/article/details/48260633"&gt;可插入的适配器（暂时还看不懂）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对象适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Usb …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h1&gt;Adapter（适配器模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;将一个类的接口转换成客户所希望的另一个接口，范围从单纯的改变接口的名称直到适配、甚至添加额外的方法以便满足完全没有联系的接口方法。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="对象适配器结构图" src="/images/2017_3_20_3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对象适配器依赖于对象的组合，主要是依靠Adapter类的代理，将对于Adapter的requset与special request转发到Target类与Adaptee中去。&lt;/p&gt;
&lt;p&gt;&lt;img alt="类适配器结构图" src="/images/2017_3_20_4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;类适配器依赖于多重继承（java中即是接口），将相应需要提供的方法加在Target类上。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_20_5.jpg"&gt;&lt;/p&gt;
&lt;p&gt;如图所示，Client类调用Adapter类上的某些方法，以实现相应的request或者是specailRequset方法。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;存在一个想要使用的但是接口并不满足你的需求的一个类的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你想创建一个可以复用的类，这个类可以与其他不相关的或者不可预见的类协同工作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你想要使用一些子类，但是你只想适配它的父类方法。（仅适用于对象适配器中）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Target&lt;/p&gt;
&lt;p&gt;定义用户原有的各种业务代码与功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;与Target接口进行交流。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adaptee&lt;/p&gt;
&lt;p&gt;一个已经存在并且需要适配才能正常工作的一个接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adapter&lt;/p&gt;
&lt;p&gt;对Adatper的接口与Target接口进行适配。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Adapter的适配程度&lt;/p&gt;
&lt;p&gt;Adapter的工作量取决于两个接口的相似程度，工作范围从简单的改变操作名到支持完全不同的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可插入的Adapter&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.csdn.net/yqj2065/article/details/48260633"&gt;可插入的适配器（暂时还看不懂）&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;对象适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Usb&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MixSocket&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Usb&lt;/span&gt; &lt;span class="n"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MixSocket&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;usb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;usb&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;@Override&lt;/span&gt;
            &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
        &lt;span class="o"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MixSocket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MixSocket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;类适配器&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Usb&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt; 

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MixSocket&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Socket&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Usb&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;MixSocket&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;charge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MixSocket&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;User&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MixSocket&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;User&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;twoPinPlug&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;usb&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Bridge（桥接模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;将抽象部分与他的实现部分分离，使它们都可以独立地变化。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_23_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;桥接模式在抽象父类中存储一个抽象的Implementor指针，然后在子类实现的时候传递一个ConcreteImplementor。Client直接调用抽象父类的相应方法即可。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_23_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Client在创建了一个具体的功能实现类对象，将这个功能传递给父类，这样就获得一个能够实现功能的操作类。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;使用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;抽象和实现部分之间有一个固定的绑定关系；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类的抽象以及实现部分可以通过生成子类的方法进行扩充，此时可以通过对不同的抽象接口和实现进行组合并且分别进行扩充；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对一个抽象的实现方法的修改应该不影响用户；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你需要将一个具有很多将要生成的子类的类分成两部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与适配器模式的最大区别就在于，适配器模式是在使用的时候进行的组合，桥接模式是在最开始构架的时候设计好的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Abstraction&lt;/p&gt;
&lt;p&gt;定义并且维护一个纸箱Implementor类型对象的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RefinedAbstraction&lt;/p&gt;
&lt;p&gt;扩展后的Abstraction。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementor&lt;/p&gt;
&lt;p&gt;定义实现类的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implementor&lt;/p&gt;
&lt;p&gt;实现具体的Implementor类方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分离接口及其实现方式。（在某方面避免了用户通过反射获得实现的信息？）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;提高可扩展性，实现细节对客户透明。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WaterBottle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ContainsWater&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;WaterBottle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ContainsWater&lt;/span&gt; &lt;span class="n"&gt;containsWater&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;containsWater&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;containsWater&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;HotWaterBottle&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;WaterBottle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;HotWaterBottle&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ContainsHotWater&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CoolWaterBottle&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;WaterBottle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;CoolWaterBottle&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ContainsCoolWater&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContainsWater&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContainsHotWater&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ContainsWater&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hot water!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;    
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContainsCoolWater&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;ContainsWater&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cooooool water!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;WaterBottle&lt;/span&gt; &lt;span class="n"&gt;bottle1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;WaterBottle&lt;/span&gt; &lt;span class="n"&gt;bottle2&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;bottle1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HotWaterBottle&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bottle2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CoolWaterBottle&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bottle1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsWater&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;bottle2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsWater&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Composite（组合模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;将对象组合成树形结构以表示“部分-整体”的层次结构，该模式是的用户对单个对象以及组合对象的使用具有一致性。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="通用结构图" src="/images/2017_3_24_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;一个组合模式中有着容器以及实现对象，但是它们都是一个Component的各子类。&lt;/p&gt;
&lt;p&gt;&lt;img alt="Android中View层次图" src="/images/2017_3_24_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Android中的View，可以作为一种容器来存放其他的View，也可以自己作为一个单独的View。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要表示对象的部分-整体层次结构；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户可以忽略组合对象与单个对象的不同，统一地调度操作对象。&lt;/p&gt;
&lt;p&gt;对于用户来说，该对象是否是组合对象并不重要。例如一般的文件管理器中，对于文件夹或者文件都有着复制、粘贴等功能，内部实现稍有区别。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Component&lt;/p&gt;
&lt;p&gt;为组合的对象声明接口并且实现所有方法的默认方法，并且拥有一个能够访问和管理所有Component子组件的方法以及一个可选择的、能够访问到父组件的一个方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Leaf&lt;/p&gt;
&lt;p&gt;在组合结构中表示没有容器对象行为的组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composite&lt;/p&gt;
&lt;p&gt;存储、管理、操作子部件，并且在Component接口中实现相应功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;通过Component操作组合结构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;定义了包含基本对象和组合对象的类层次结构。这样可以让用户将所需要的组件无限递归地组合添加下去，使得用户可以在所有的地方用到组合对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简化客户代码。用户不需要关心处理的是一个叶结点还是一个组合容器，对于用户来说，都可以用同样的方法来实现业务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使设计更容易加入新的组件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;实现细节&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;最大化Component接口。为了让用户真正的不能感觉到自己是在使用一个Leaf或者Composite，Component接口应该尽可能多的支持更多的公共方法。这里就会发生一个矛盾，一般的来说一个类只应该定义那些对自己或者子类有意义的方法，但是Component却要在很多地方提供很多的缺省操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现子类管理的位置。如果你在Component接口中定义了Add、Remove方法，这样的话Leaf也会有这个方法，用户可能会对Leaf执行很多无意义的操作；如果你只在Composite中定义Add、Remove方法，用户就会意识到自己是在使用一个Composite而不是一个Leaf。一般地来说，推荐使用前一种方法。否则用户就需要将一个Component强行转换为Composite类，这样会出现用户将Leaf转换的可能，一种可能的方法是在Component中提供一个getComposite方法，若是在Compsite中调用便会返回自己，Leaf中便返回NULL即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Goods&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Goods&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setParent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="nf"&gt;getParent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Gold&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Goods&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// DO NOTHING&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This costs a LOT!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Box&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Goods&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;good&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setParent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;This costs litte&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Gold&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Goods&lt;/span&gt; &lt;span class="n"&gt;good3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Box&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;good1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;good2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;good3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;good3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;good2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;values&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Decorator 模式&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;动态地给一个对象添加一些额外的职责，比子类的生成更佳灵活。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_25_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Decorator类中保留着一个Component类的一个指针。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_25_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Decorator的Operation方法被调用先调用Component中的Operation，然后再调用Decorator类中的Operation方法进行装饰绘制。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;不在影响其他对象的情况下，以动态、透明的方式给单个对象添加、撤销职责；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当有着大量且可以互相组合的扩展功能的时候的时候，适用子类将会使子类数量极大的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当某个类是不可被继承的时候，想要扩展其功能也可以使用装饰器模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Component&lt;/p&gt;
&lt;p&gt;一个需要动态添加职责的对象接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteComponent&lt;/p&gt;
&lt;p&gt;具体具有相应职责的一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorator&lt;/p&gt;
&lt;p&gt;保留一个指向Component对象的指针，具有与Component完全一样的接口方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteDecorator&lt;/p&gt;
&lt;p&gt;具有着具体的实现方法的装饰器，会给予Component各种不同的职责。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;比继承更加灵活。&lt;/p&gt;
&lt;p&gt;使用户可以自由组合各种职责，增加职责添加删除的自由度，同时可以很方便地重复添加一个特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不需要让抽象类在一开始就支持过多的方法与特征。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;会出现许多的小对象，使得用户在使用的时候比较容易，但是在学习使用的时候花费大量的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decorator就像是一个外壳，将会把原有的Component类包裹住，所以在这样的情况下就有要求Component应该足够的简单，以便于Decorator能够拥有Component类的所有接口方法。如果Component类原本就非常大，就应该使用Strategy模式而不是装饰器模式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Garden&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BigGarden&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Garden&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;What a lovely place!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Flower&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Garden&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Garden&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Flower&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Flower&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Garden&lt;/span&gt; &lt;span class="n"&gt;garden&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;garden&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How fragrant!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Bird&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Garden&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Garden&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Bird&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Bird&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Garden&lt;/span&gt; &lt;span class="n"&gt;garden&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;garden&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How wonderful!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Visitor&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Garden&lt;/span&gt; &lt;span class="n"&gt;garden&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Bird&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Flower&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BigGarden&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
        &lt;span class="n"&gt;garden&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;beVisited&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Facade（外观模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;为子系统中的一组接口提供一个一致界面，定义一个可以试子系统更加容易使用的高级接口。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_31_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;客户在一个统一的高级接口的调用下完成了对完全解耦的子系统的调用，以避免用户对子系统细节的直接参与等。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_31_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Client类通过对Facade接口的创建统一地对子系统下的各文件进行创建，并且在调用一个Facade提供的方法之后，由Facade接口统一地调度进行操作子系统中相应的方法。Client从而不会直接访问子程序。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;需要为一个复杂的子系统提供一个简单的接口。有时候子系统可能随着演化变得非常复杂以及可复用，此时对于一些只需要基本操作的用户来说可以使用Facade提供的接口进行简单的操作。如果是需要高级操作的用户，可以跳过Facade直接对子系统进行操作即可；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Facade接口可以降低子系统与Client类之间的依赖性，降低系统的耦合度；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当需要创建一个具有层次结构的系统时，可以使用Facade来定义子系统中每层的入口。从而让子系统之间只通过Facade进行通讯从而简化他们之间的依赖关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Facade&lt;/p&gt;
&lt;p&gt;知道子系统的具体方法与接口，并且将客户端的请求转发给相应的子系统对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subsystem classes&lt;/p&gt;
&lt;p&gt;实现子系统的功能、完成Facade指派的任务，并且__不会__包含Facade对象的任何信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对客户屏蔽子系统组建，以减少客户处理的对象的数目并且使用户使用子系统更加方便；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现子系统与客户之间的松耦合关系，由于子系统之间的操作往往是紧耦合的，这样可以降低对子系统进行修改之后对客户的修改；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以在用户需要的时候开放相应的子系统以便用户实施高级操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;私有化子系统类，我们往往并不是希望所有的子系统类都是用户可以高级定制的。此时可以通过私有化类，从而让某些公用类暴露，其他的类将会对客户不可见。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutomaticTransmission&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;FirstGear&lt;/span&gt; &lt;span class="n"&gt;firstGear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SecondGear&lt;/span&gt; &lt;span class="n"&gt;secondGear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AutomaticTransmission&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;firstGear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FirstGear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondGear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SecondGear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;firstGear&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondGear&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FirstGear&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;At first gear!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SecondGear&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;At first gear!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C1Driver&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AutomaticTransmission&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;FirstGear&lt;/span&gt; &lt;span class="n"&gt;firstGear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;SecondGear&lt;/span&gt; &lt;span class="n"&gt;secondGear&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;C1Driver&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AutomaticTransmission&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;firstGear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FirstGear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondGear&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SecondGear&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;driveAuto&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;driveManual&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;firstGear&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;secondGear&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;C2Driver&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;AutomaticTransmission&lt;/span&gt; &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;C2Driver&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AutomaticTransmission&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;driveAuto&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Flyweight（享元模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;使用共享技术有效地支持大量细粒度的对象。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_4_1_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;享元接口由享元工厂生产出来，其中包含着可被共享的享元与不可共享的享元。当用户需要一个享元对象的时候，享元工厂将根据情况生产或者返回对象。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_4_1_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;用户通过调用享元工厂以得到相应的享元对象，这个对象将会根据是否是一个可被共享的享元对象让工厂对其能不能作为一个享元来进行相应的操作。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个程序使用了大量的造成了极大的存储开销的对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这些对象的大部分属性可以变为外部状态，并且这些外部状态可以被对象中剥离下来；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序不依赖于对象标志，使用相同的对象对程序并不会造成任何的误解或者冲突等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Flyweight&lt;/p&gt;
&lt;p&gt;一个可以接受外部状态的接口，作为享元的基类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteFlyweight&lt;/p&gt;
&lt;p&gt;实现Flyweight接口，并且存储了独立于ConcreteFlyweight对象所在场景内部状态，并且必须是一个可共享的对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UnsharedConcreteFlyweight&lt;/p&gt;
&lt;p&gt;一个不会被共享的享元对象，通常作为Flyweight层次结构中，ConcreteFlyweight对象的父节点。（例如一个文字编辑文件中Row和Column）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;FlyweightFactory&lt;/p&gt;
&lt;p&gt;创建并且管理Flyweight对象，确保能够正确地使用共享一个享元对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;维持一个Flyweight的引用指针，计算、存储所有Flyweight对象的外部状态。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用享元模式的时候，将会在计算、传输、查找外部状态时会产生很多运行时的额外开销，这些额外开销将会通过减少的对象存储空间使用所抵消。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;存储节约的主要因素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为共享、示例总数减少的数目；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象内部状态的平均数目；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部共享状态是计算出来还是存储下来的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部状态理想条件下应该是可以通过某种对象结构直接计算出来的，并且要求的存储量非常小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;享元模式将会通过单例模式以及工厂模式进行管理，可以使用对象表进行管理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Printer&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;typeMap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Printer&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;typeMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Character&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt; &lt;span class="nf"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Character&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;typeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;keySet&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;typeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;typeMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MovableType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;classList&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="nf"&gt;MovableType&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt; &lt;span class="nf"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;classList&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;classList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Class&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
            &lt;span class="n"&gt;classList&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;classList&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TypeB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;classList&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="na"&gt;newInstance&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; 
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TypeA&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TypeB&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;MovableType&lt;/span&gt; &lt;span class="n"&gt;movableType&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Printer&lt;/span&gt; &lt;span class="n"&gt;printer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Printer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;use&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;movableType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Clinet&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;movableType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;printer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Large&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;use&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Proxy（代理模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;为其他对象提供一种代理，以得以控制这个对象的访问。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_4_2_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Subject作为Proxy与RealSubject的共用接口保证了能使用RealSubject的接口的地方都可以使用Proxy，并且Proxy中保存着一个能够访问到RealSubject的指针。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_4_2_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Client类在创建一个Proxy对象的同时，Proxy对象也会创建一个RealSubject实例。当Client发出一个请求之后，Proxy对象会在处理了preRequest之后调用RealSubject的request方法，最后再调用afterRequest方法。&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;远程代理&lt;/p&gt;
&lt;p&gt;为一个对象在不同的地址空间提供一个局部代理对象，有些地方把这种行为称作“Ambassador”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚代理&lt;/p&gt;
&lt;p&gt;当需要创建一个很大的对象，但是不希望在一开始加载的时候就全部创建的。如同当一个网页中有一个非常大的图片的时候，用户往往希望是网页先打开然后再等待图片的加载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保护代理&lt;/p&gt;
&lt;p&gt;控制对原始对象的访问，从而限制用户对于某些对象的访问权限。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;智能指针&lt;/p&gt;
&lt;p&gt;在单纯的指针中加入其他的预处理、后处理方法，以便于实现更加复杂的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Proxy&lt;/p&gt;
&lt;p&gt;保存一个可以直接访问到实体的指针，并且实现一个与RealSubject相同的接口，以保证Proxy可以代替RealSubject被调用，以及其他的预处理或者是后处理方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subject&lt;/p&gt;
&lt;p&gt;定义RealSubject与Proxy的共用接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RealSubject&lt;/p&gt;
&lt;p&gt;定义实体对象。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;随着代理类型、附加间接性有着多种用途（略）；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代理模式可以对用户隐藏一种称为copy-on-write的方法，这样可以延迟一个对某个对象的拷贝操作。因为拷贝一个很大的对象往往是非常开销非常大的，使用这样的方法可以保证只有在对象被用户进行了修改之后才发生拷贝动作；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果使用范型的话，Proxy对象将不必要知道具体的实体类的名称等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rice&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Food&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Yummy!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CookedRice&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Food&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Rice&lt;/span&gt; &lt;span class="n"&gt;rice&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Cook!&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;rice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;People&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;[])&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Food&lt;/span&gt; &lt;span class="n"&gt;rice&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;CookedRice&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;rice&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;eat&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="design patterns"></category></entry><entry><title>神威·太湖之光初体验</title><link href="/shen-wei-tai-hu-zhi-guang-chu-ti-yan.html" rel="alternate"></link><published>2017-04-06T16:05:24+08:00</published><updated>2017-04-06T16:05:24+08:00</updated><author><name>Yifeng Tang</name></author><id>tag:None,2017-04-06:/shen-wei-tai-hu-zhi-guang-chu-ti-yan.html</id><summary type="html">&lt;h1&gt;神威·太湖之光初体验&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在ASC17的比赛中，本菜鸡负责了MASNUM这样一个从上世纪90年代就开始发展的海浪模拟应用的在神威·太湖之光上的优化任务（虽然最后并没能在要求时间内跑完最后一个workload。。账号一开始被赛委会删了可能也是一个原因（？！！）。。），并且借此机会也尝试了一下神威的速度，同时踩了上面的许许多多的坑。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;神威的结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="神威的结构图" src="/images/2017_4_30_1.png"&gt;&lt;/p&gt;
&lt;p&gt;神威采用的是完全国产的SW26010处理器，其中每一个处理器有四个核组（CGs),这些核组之间是通过一个芯片上的网络互相连接的。每一个CG包含了一个内存管理器（MC）、消息处理核心（MPE）、计算处理核心集群（CPEs)。其中MPE支持完整的中断功能，内存管理，超标量和乱序问题/执行，擅长处理管理，任务进度和数据通信，而CPEs旨在最大限度地提高聚合计算吞吐量，同时最小化微架构的复杂性。相对于MPE，CPE不支持中断。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;其中MPE主频为1.45GHz，每一个核组内存8GB，L1缓存32KB，L2缓存256KB，核组之间的一般通过MPI进行通讯。从核主频为1.45GHz，每一个从核分别有64KB的局部存储空间，从核可以通过gld／gst离散访问或者DMA批量访问主寸，从核阵列之间可以通过寄存器通信进行低延迟的通信。有意思的是，CPE的LDM在栈空间很大时，可能会使得栈空间、局存、动态分配的空间相互冲突，如下图所示。如果想要发生冲突的时候报错，需要加入-preserve …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;神威·太湖之光初体验&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;在ASC17的比赛中，本菜鸡负责了MASNUM这样一个从上世纪90年代就开始发展的海浪模拟应用的在神威·太湖之光上的优化任务（虽然最后并没能在要求时间内跑完最后一个workload。。账号一开始被赛委会删了可能也是一个原因（？！！）。。），并且借此机会也尝试了一下神威的速度，同时踩了上面的许许多多的坑。
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;神威的结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="神威的结构图" src="/images/2017_4_30_1.png"&gt;&lt;/p&gt;
&lt;p&gt;神威采用的是完全国产的SW26010处理器，其中每一个处理器有四个核组（CGs),这些核组之间是通过一个芯片上的网络互相连接的。每一个CG包含了一个内存管理器（MC）、消息处理核心（MPE）、计算处理核心集群（CPEs)。其中MPE支持完整的中断功能，内存管理，超标量和乱序问题/执行，擅长处理管理，任务进度和数据通信，而CPEs旨在最大限度地提高聚合计算吞吐量，同时最小化微架构的复杂性。相对于MPE，CPE不支持中断。&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;其中MPE主频为1.45GHz，每一个核组内存8GB，L1缓存32KB，L2缓存256KB，核组之间的一般通过MPI进行通讯。从核主频为1.45GHz，每一个从核分别有64KB的局部存储空间，从核可以通过gld／gst离散访问或者DMA批量访问主寸，从核阵列之间可以通过寄存器通信进行低延迟的通信。有意思的是，CPE的LDM在栈空间很大时，可能会使得栈空间、局存、动态分配的空间相互冲突，如下图所示。如果想要发生冲突的时候报错，需要加入-preserve preserve_size编译命令。&lt;/p&gt;
&lt;p&gt;&lt;img alt="LDM的使用情况" src="/images/2017_4_30_2.png"&gt;&lt;/p&gt;
&lt;h2&gt;MASNUM的优化思路&lt;/h2&gt;
&lt;p&gt;由于在去年的SC大会上，一篇关于在神威上对MASNUM的优化的论文成功进入了Gorden Bell Prize的提名，所以几乎所有的队伍都是在做着成功实现论文的工作。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dblp2.uni-trier.de/db/conf/sc/sc2016.html"&gt;A highly effective global surface wave numerical simulation with ultra-high resolution. 46-56&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;论文上实现了三部分的优化，不过就算是做得最好的清华似乎也只是实现了其中的第二部分，简单点说就是把所有的运算全部扔到CPEs中进行并行计算，而我们也是在试图实现第二部分的优化。&lt;/p&gt;
&lt;p&gt;经过分析可以发现其中有两个子程序implsch、propagat是整个程序的热点（最后交卷的时候只让填这两个子程序的运行时间也能看出来这点）。其中implsch是很容易优化的，因为implsch使用的所有数组数据都并没有超出循环变量的范围，通过分组映射发射之类的办法很容易就能把相应数据填入CPEs之中，从而榨干CPE的所有局部内存。然而propagat我们到最后也没能实现，因为其中有一个数据规模随着输入平方级增加的四位数组在程序上表现为是乱序使用数据的，在程序运行之前是无法预测可能需要哪一个数据的。。最后试着每次循环都离散读取这8个变量，反而运行时间提升了4倍。。从清华他们那里打听了消息，原来这8个变量就是一个九宫格中间那一个点附近周围的8个，但是我们只是一开始猜想了一下并没有仔细推论。。（同队的大佬一开始就说可能是在计算微分方程，但我和另一个哥们都没能引起重视继续向下思考，毕竟这程序写得就像那一坨那啥）&lt;/p&gt;
&lt;h2&gt;神威上的加速库（Fortran下的）&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;神威上的加速库的目标差不多，就是将程序划分为host、slave两块，然后让MPE运行host的内存，CPE运行slave的内容。从编译器必须加 -host 、 -slave 或者 -hybrid 也能看出来这一点。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Open-ACC*&lt;/h3&gt;
&lt;p&gt;神威上的Open-ACC*是在Open-ACC 2.0的基础上进行魔改之后的东西。虽然我们和清华交流的时候统一了这东西不知道有什么意义、只会越跑越慢的意见，但是本菜鸡自己还是觉得可能是我们的打开方式都有点不对，不过现在也没办法试验，只能把其中遇见的问题再留在这里。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;似乎没能够将数组很好地分块&lt;/p&gt;
&lt;p&gt;对于一个四维数组例如e(a, b, c, d)，如果关键循环变量是a，b的话，Open-ACC*似乎没有办法能够将a，b下的其他两个维度的数据拿出来，就算能够拿出来也似乎没有办法将在a，b两个维度上进行分段批量读取。（至少文档上完全没提到）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;似乎只能把数组按照循环变量进行分块&lt;/p&gt;
&lt;p&gt;但有一些例如propagat这样需要获取附近的8个点的数据的操作，Open-ACC*可能很难实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文档上的很多看似很简单的功能实际上极难实现&lt;/p&gt;
&lt;p&gt;反正菜鸡我照着这个文档做，基本都是在无限报错。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加速区只能是循环，且不允许两个加速区的并列&lt;/p&gt;
&lt;p&gt;这一点就真的有点烦躁，有些时候你将会需要一些例如一部分CPE进行读取、一部分CPE进行转发、一部分CPE进行计算这样的复杂功能，然后就会发现Open-ACC*就不能执行这样的复杂操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;综上所述，我建议如果你的程序是对数组读取非常简单，或者是数组很小，并且不需要让每一个CPE分别有自己特殊的职责的话，可以选择使用Open-ACC*来进行优化。&lt;/p&gt;
&lt;p&gt;菜鸡我一开始就是使用Open-ACC*来进行的优化，优化的最好效果是让时间翻倍。。。（不过还是有队伍使用Open-ACC成功进行了优化，我确实很好奇到底是怎样完成的。。或许从一开始就已经分出了胜负）&lt;/p&gt;
&lt;h3&gt;Athread&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;神威上的Athread的文档全是用C来写的，然而MASNUM却是一个Fortran写的程序，我们一开始以为应该C有的API、Fortran也应该都有，然而真相是非常的残酷。所以以后一定要把全部代码用C重写一次，否则会感到非常绝望。（至少要混合编译将C的API给包装过来）
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Athread是一个相对于Open-ACC*来说更加靠谱的库，它的功能更加复杂且强大，不过我们也只是用了最基础的几个操作就完成了对implsch的优化，并且使得它的运行速度提高了100倍（从15000s的运行时间到了150s）。在这里就大致介绍一下关键的函数或者说子程序。&lt;/p&gt;
&lt;h4&gt;host部分&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;athread_init()&lt;/p&gt;
&lt;p&gt;启动整个加速线程库，可以选择在程序最开始就初始化。说不定有什么性能的影响，菜鸡我也没办法再试验了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athread_spawn(fun, address)&lt;/p&gt;
&lt;p&gt;创建线程组，其中第一个参数是相应slave程序的函数，一般会写到另一个文件然后用external来调用，第二个参数是参数的起始地址。可以感觉到如果有多个参数将会非常的不方便，所以就用全局变量进行传递其实更好一些，具体效率在下也没测试。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athread_join()&lt;/p&gt;
&lt;p&gt;阻塞等待线程组的全部结束。这个函数可以在MPE经过其他运算之后再调用，这样就实现了更进一步的并行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athread_halt()&lt;/p&gt;
&lt;p&gt;将整个加速线程库全部关闭，可以丢在程序最后面去。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;slave部分&lt;/h4&gt;
&lt;p&gt;slave文件中是通过/Common/区来进行对主存的直接访问，其中动态数组只能全部改成pointer然后来进行共享。然而CPEs内部的共享在下没能找到对应的API以及方法，提供的Openmp预编译指令也没能按照文档上所写的实现它的功能。。希望下一次能够找到方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;get_myid()&lt;/p&gt;
&lt;p&gt;这个最关键的获取cpe自己的逻辑顺序的API在Fortran里面其实是没有的。。。赛委会给我们现场拷来了C语言的实现，然后混合编译进行调用。。真有意思。。（源代码我就不上传了，还是有点虚）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athread_get(0, src, des, len, reply, 0, 0, 0)&lt;/p&gt;
&lt;p&gt;这几个0其实都有自己的意义，但是我们一般都不会用到。。想仔细用查查文档吧，可能会有进一步的提升。src是指经过common区共享的主内存的数据，des是指LDM中对应的数据位置，len是以字节计算的长度，reply是一个计数变量，会在get成功之后自增1。例程上面使用了简单的do while来进行等待，但是实际操作时，神威的工程师告诉我们，编译器可能会优化掉do while里面的reply从而使得整个程序卡住。所以尽量将do while写到另一个文件里面然后编译这个文件时加上-O0或者是-g（神威里面的-g默认-O0），从而避免这个优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;athread_put(0, src, des, len, reply, 0, 0)&lt;/p&gt;
&lt;p&gt;除了des与src是反着的，其他基本同上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ldm_malloc&lt;/p&gt;
&lt;p&gt;不好意思，Fortran里面没有，不过也可以完全避免动态数组的出现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;具体并行思路&lt;/h2&gt;
&lt;p&gt;由于程序就是循环构成的，并行思路也比较简单，大致如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;先估算每一个点所需要的内存大小；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用64kb除以估算的内存大小，就可以得到最多能够一次存下的点的数量；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过总点数/(点的数量*64)，就可以得到想要把所有数据全部计算所需要的大的循环的次数；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每一次批量读取数据进行计算再批量取出即可;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;某些变量以及固定长度的数组每一个CPE在一开始一起读入即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体关键映射操作如下Java代码所示（Fortran数组是从1开始计算的）&lt;/p&gt;
&lt;p&gt;其中ixs、ixl、iys、iyl是点的范围，max_cpe_size是估算的最大点数，how_many是最大能够平均分配的循环次数，left_part是余下数量。&lt;/p&gt;
&lt;p&gt;计算之后steps是当前需要计算的长度，简单的从1到steps循环即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iyl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_id&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;big_loop&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;my_id&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;出错整理&lt;/h2&gt;
&lt;p&gt;神威的Exception非常的不详细，甚至他们的工程师自己都在吐槽，不过本菜鸡经过认真的测试，大致发现了以下的对应的规律。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;No SPE Exception&lt;/p&gt;
&lt;p&gt;可能是栈空间不足。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Floating Pointer Exception&lt;/p&gt;
&lt;p&gt;可能是程序计算映射出错，导致内存溢出到非法区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DMA Desxxxxxxxx? Exception&lt;/p&gt;
&lt;p&gt;可能是循环的时候未处理steps = 0的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unknown Exception&lt;/p&gt;
&lt;p&gt;呃。。别问我发生了什么&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序在athread_get卡住&lt;/p&gt;
&lt;p&gt;检查-cgsp -b参数，或者-O0参数进行测试&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;资料出处&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.nsccwx.cn"&gt;无锡国家计算中心官网&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;优化后实例代码&lt;/h2&gt;
&lt;p&gt;源文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;
&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;!*DeckYinxq: mean2&lt;/span&gt;
 &lt;span class="c"&gt;! �����׾أ����ڼ���Դ����&lt;/span&gt;

  &lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2&lt;/span&gt;

  &lt;span class="k"&gt;implicit none&lt;/span&gt;

&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;

  &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;
  &lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dwkk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wfk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wfk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ekj1&lt;/span&gt;

&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;

  &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt;
  &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ixs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt;

    &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;
    &lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;
    &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;
    &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;
    &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nsp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;cycle&lt;/span&gt;

&lt;span class="k"&gt;    do &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;kld&lt;/span&gt;
      &lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="n"&gt;dwkk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dwk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;wfk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;wfk1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;!      wfk=fr(k)&lt;/span&gt;
      &lt;span class="c"&gt;!      wfk1=fr(k1)&lt;/span&gt;
      &lt;span class="n"&gt;wsk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zpi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk&lt;/span&gt;
      &lt;span class="n"&gt;wsk1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;zpi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk1&lt;/span&gt;
      &lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;wk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;jl&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;          &lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;          &lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;endif&lt;/span&gt;
        &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
        &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
        &lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wsk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wsk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
        &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
        &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
    &lt;span class="mi"&gt;200&lt;/span&gt;      &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

  &lt;span class="mi"&gt;100&lt;/span&gt;      &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;

  &lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2&lt;/span&gt;

&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="c"&gt;!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&lt;/span&gt;
&lt;span class="c"&gt;!-------------------------------------------------------------------------------&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;host代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2&lt;/span&gt;

    &lt;span class="k"&gt;implicit none&lt;/span&gt;

&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="kd"&gt;::&lt;/span&gt;&lt;span class="n"&gt;slave_mean2_slave&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;

    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mean2_host_hm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mean2_host_lp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt;

    &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;

    &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_spawn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slave_mean2_slave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_join&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;slave代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2_slave&lt;/span&gt;

    &lt;span class="k"&gt;implicit none&lt;/span&gt;

&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;my_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fak&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;big_loop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dwkk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wfk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wfk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wsk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ekj1&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;kld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;jl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;
    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;zpi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1415926&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;parameter&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iyl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ixl&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(:,:),&lt;/span&gt; &lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(:,:),&lt;/span&gt; &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(:,:),&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(:,:),&lt;/span&gt; &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(:,:),&lt;/span&gt; &lt;span class="n"&gt;nsp&lt;/span&gt;&lt;span class="p"&gt;(:,:)&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;pointer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dwk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wkh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;how_many_slave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_part_slave&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;iys_slave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iyl_slave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ixl_slave&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;dwk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wkh_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nsp_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kt"&gt;real&lt;/span&gt; &lt;span class="kd"&gt;::&lt;/span&gt; &lt;span class="n"&gt;wf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kt"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;external&lt;/span&gt;&lt;span class="kd"&gt;::&lt;/span&gt;&lt;span class="n"&gt;get_myid&lt;/span&gt;

    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mean2_host_hm&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;how_many&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mean2_host_lp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt;

    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_iys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iys&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_iyl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;iyl&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_ixs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ixs&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_ixl&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ixl&lt;/span&gt;

    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_ae&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_asi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;asi&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_awf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;awf&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_awk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_ark&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;ark&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_nsp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;nsp&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_wf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;wf&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_e&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;

    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_dwk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;dwk&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_wk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;wk&lt;/span&gt;
    &lt;span class="k"&gt;common&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sh_wkh&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;wkh&lt;/span&gt;

    &lt;span class="n"&gt;fak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_myid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;how_many_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;how_many&lt;/span&gt;
    &lt;span class="n"&gt;left_part_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left_part&lt;/span&gt;

    &lt;span class="n"&gt;iys_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iys&lt;/span&gt;
    &lt;span class="n"&gt;ixs_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ixs&lt;/span&gt;
    &lt;span class="n"&gt;iyl_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;iyl&lt;/span&gt;
    &lt;span class="n"&gt;ixl_slave&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ixl&lt;/span&gt;

    &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dwk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;dwk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wkh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wkh_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;do while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end do&lt;/span&gt;

&lt;span class="k"&gt;    do &lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt; &lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;
            &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(((&lt;/span&gt;&lt;span class="n"&gt;big_loop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;   &lt;span class="c"&gt;!34&lt;/span&gt;
            &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left_part&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;   &lt;span class="c"&gt;!56&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;le&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;                &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;                &lt;/span&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step_base&lt;/span&gt;
                &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;how_many_slave&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;max_cpe_size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_id&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;step_left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ixl_slave&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ixs_slave&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;endif&lt;/span&gt;
            &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
            &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;endif&lt;/span&gt;

        &lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nsp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;nsp_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;wf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;do while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end do&lt;/span&gt;

&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="n"&gt;asi_slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="n"&gt;awf_slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="n"&gt;awk_slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;
        &lt;span class="n"&gt;ark_slave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.&lt;/span&gt;

        &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="mi"&gt;99999&lt;/span&gt; &lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nsp_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;cycle&lt;/span&gt;

&lt;span class="k"&gt;            do &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kld&lt;/span&gt;
                &lt;span class="n"&gt;k1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;i1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
                &lt;span class="n"&gt;dwkk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dwk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;wfk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wf_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;!(k, ia, ic)&lt;/span&gt;
                &lt;span class="n"&gt;wfk1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wf_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;!(k1, ia, ic)&lt;/span&gt;
                &lt;span class="n"&gt;wsk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zpi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;wfk&lt;/span&gt;
                &lt;span class="n"&gt;wsk1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zpi&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;wfk1&lt;/span&gt;
                &lt;span class="n"&gt;wkk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;wkk1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;do &lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jl&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="k"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c"&gt;!(k, j, ia, ic)&lt;/span&gt;
                        &lt;span class="n"&gt;ekj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c"&gt;!(k1, j, ia, ic)&lt;/span&gt;
                    &lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;                        &lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;wkh_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c"&gt;!(kl, j, ia, ic)&lt;/span&gt;
                        &lt;span class="n"&gt;ekj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;e_slave&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;kl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;wkh_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c"&gt;!(kl, j, ia, ic)&lt;/span&gt;
                    &lt;span class="n"&gt;endif&lt;/span&gt;
                    &lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
                    &lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wfk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
                    &lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wsk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;wsk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
                    &lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
                    &lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ekj&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ekj1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wkk1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;dwkk&lt;/span&gt;
            &lt;span class="mi"&gt;200&lt;/span&gt;         &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="k"&gt;            &lt;/span&gt;&lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;count&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="mi"&gt;99999&lt;/span&gt;   &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="k"&gt;        &lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ae_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ae&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asi_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;asi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;awf_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;awk_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;awk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;call &lt;/span&gt;&lt;span class="n"&gt;athread_put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ark_slave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ark&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ic&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;do while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ne&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;end do&lt;/span&gt;

&lt;span class="k"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;9999&lt;/span&gt;    &lt;span class="k"&gt;continue&lt;/span&gt;

&lt;span class="c"&gt;!==========================================================================================================================&lt;/span&gt;

&lt;span class="k"&gt;end subroutine &lt;/span&gt;&lt;span class="n"&gt;mean2_slave&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;结语&lt;/h2&gt;
&lt;p&gt;经过这次比赛，认识到了自己和顶尖选手的差距。不过差距也没有到达天壤之别的地步，希望明年能够提前多做准备，能够让华科和自己不要这样的丢脸。加油！&lt;/p&gt;</content><category term="contest"></category><category term="parallelization"></category></entry><entry><title>深入理解计算机系统DataLab实验报告</title><link href="/shen-ru-li-jie-ji-suan-ji-xi-tong-datalabshi-yan-bao-gao.html" rel="alternate"></link><published>2017-04-04T16:50:20+08:00</published><updated>2017-04-04T16:50:20+08:00</updated><author><name>Zhihao Chen</name></author><id>tag:None,2017-04-04:/shen-ru-li-jie-ji-suan-ji-xi-tong-datalabshi-yan-bao-gao.html</id><summary type="html">&lt;p&gt;实验答案托管在我的&lt;a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/DataLab"&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总共花了五天时间完成了《深入理解计算机系统》(Computer Science A Programmer's Perspective)的第一个Lab - Data Lab，深感这次实验的效率低下。一方面是由于清明假期自己有所惰怠，另一方面也是由于在做题的时候采取了不正确的方法，在已经明知不会的情况下我还继续投入大量无意义的时间，没有取得很好的学习效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实验简介&lt;/h2&gt;
&lt;p&gt;Data Lab - Manipulating Bits主要是关于位操作的实验，对应于书本的第2章：信息的表示和处理。&lt;/p&gt;
&lt;p&gt;在该实验中，学生主要需要在一个严格限制的C子集（使用优先的位运算符以及顺序结构的代码）中实现简单的逻辑，补码以及浮点数相关的函数。本实验的目的是为了让学生熟悉整数和浮点数的位级表示。&lt;/p&gt;
&lt;p&gt;本实验的核心在于在各种受限制的条件下完成给出的15个谜题。其中包括5个位操作的谜题，7个补码运算的谜题，以及3个浮点数操作的谜题。其中每完成一个谜题都能得到一定的分数，如果使用的运算符数目小于给定的数目，还能获得加分。本实验的满分是71分。可以通过讲义中的driver.pl脚本直接计算出总分数。&lt;/p&gt;
&lt;p&gt;关于本实验具体的介绍详见&lt;a href="http://csapp.cs.cmu.edu/3e/datalab-handout.tar"&gt;实验讲义&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;测试程序btest make失败及解决办法&lt;/h2&gt;
&lt;p&gt;在完成实验的功能中需要用到&lt;code&gt;make &amp;amp;&amp;amp; ./btest&lt;/code&gt;命令进行答案正确性的检查，结果系统返回了 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;实验答案托管在我的&lt;a href="https://github.com/BlackDragonF/CSAPPLabs/tree/master/DataLab"&gt;GitHub&lt;/a&gt;上&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总共花了五天时间完成了《深入理解计算机系统》(Computer Science A Programmer's Perspective)的第一个Lab - Data Lab，深感这次实验的效率低下。一方面是由于清明假期自己有所惰怠，另一方面也是由于在做题的时候采取了不正确的方法，在已经明知不会的情况下我还继续投入大量无意义的时间，没有取得很好的学习效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实验简介&lt;/h2&gt;
&lt;p&gt;Data Lab - Manipulating Bits主要是关于位操作的实验，对应于书本的第2章：信息的表示和处理。&lt;/p&gt;
&lt;p&gt;在该实验中，学生主要需要在一个严格限制的C子集（使用优先的位运算符以及顺序结构的代码）中实现简单的逻辑，补码以及浮点数相关的函数。本实验的目的是为了让学生熟悉整数和浮点数的位级表示。&lt;/p&gt;
&lt;p&gt;本实验的核心在于在各种受限制的条件下完成给出的15个谜题。其中包括5个位操作的谜题，7个补码运算的谜题，以及3个浮点数操作的谜题。其中每完成一个谜题都能得到一定的分数，如果使用的运算符数目小于给定的数目，还能获得加分。本实验的满分是71分。可以通过讲义中的driver.pl脚本直接计算出总分数。&lt;/p&gt;
&lt;p&gt;关于本实验具体的介绍详见&lt;a href="http://csapp.cs.cmu.edu/3e/datalab-handout.tar"&gt;实验讲义&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;测试程序btest make失败及解决办法&lt;/h2&gt;
&lt;p&gt;在完成实验的功能中需要用到&lt;code&gt;make &amp;amp;&amp;amp; ./btest&lt;/code&gt;命令进行答案正确性的检查，结果系统返回了&lt;code&gt;fetal error: gnu/stubs-32.h:No such file or directory&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;经过检查发现是系统是Archlinux 64位，而Makefile中包含了-m32的编译参数导致的。&lt;/p&gt;
&lt;p&gt;通过启用multilib仓库使得可以在64位的ArchLinux系统上编译和运行32位的程序，问题得以解决。&lt;/p&gt;
&lt;p&gt;编辑/etc/pacman.conf，取消下面内容的注释：&lt;/p&gt;
&lt;p _="%" endcodeblock&gt;{% codeblock lang:vim %}
[multilib]
include = /etc/pacman.d/mirrorlist&lt;/p&gt;
&lt;p&gt;更新软件包列表并升级系统&lt;code&gt;pacman -Syu&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后安装gcc-multilib并重新执行&lt;code&gt;make &amp;amp;&amp;amp; ./btest&lt;/code&gt;，问题解决。&lt;/p&gt;
&lt;h2&gt;实验限制&lt;/h2&gt;
&lt;h3&gt;整数代码规则&lt;/h3&gt;
&lt;p _="%" endcodeblock&gt;整数代码应遵循如下的基本结构：
{% codeblock lang:c %}
int Funct(arg1, arg2, ...) {
    /&lt;em&gt; brief description of how your implementation works &lt;/em&gt;/
    int var1 = Expr1;
    ...
    int varM = ExprM;
    varJ = ExprJ;
    ...
    varN = ExprN;
    return ExprR;
}&lt;/p&gt;
&lt;p&gt;每一个表达式只能使用：
1. 0～255之间的常量（包括0和255）
2. 函数的参数和局部变量
3. 单目运算符 ! ~
4. 双目运算符 &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;注意，部分题目对于运算符有着更加严格的限制，但是你可以在一行代码中使用多个运算符。&lt;/p&gt;
&lt;p&gt;你将会被禁止：
1. 使用任何的分支或者循环结构
2. 定义或者使用任何的宏
3. 在文件中定义任何额外函数
4. 调用任何函数
5. 使用任何其他的运算符
6. 使用任何形式的类型转换
7. 使用除了int意外的其他数据类型，这意味着你不能使用数组，结构或联合&lt;/p&gt;
&lt;p&gt;你可以假设你的机器：
1. 使用32位补码表示整数
2. 使用算术右移
3. 对整数进行的位移运算的位数超越了字长是未定义的行为&lt;/p&gt;
&lt;h3&gt;浮点代码规则&lt;/h3&gt;
&lt;p&gt;浮点运算的规则相对较为宽松，你可以使用循环或者是分支结构，你被允许同时使用int和unsigned，此外，你还可以使用任意的常量。&lt;/p&gt;
&lt;p&gt;你将会被禁止：
1. 定义或者使用任何的宏
2. 在文件中定义任何额外函数
3. 调用任何函数
4. 使用任何形式的类型转换
5. 使用除了int和unsigned以外的任何数据类型，这意味着你不能使用数组，结构或者联合
6. 使用任何浮点数的数据类型，操作或者是常量&lt;/p&gt;
&lt;h2&gt;实验答案及分析&lt;/h2&gt;
&lt;h3&gt;第一部分 位操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;bitAnd
    问题：要求使用~和|以及不超过8个操作符实现x&amp;amp;y
    分析：使用De Morgan定律即可
    答案：
    {% codeblock lang:c %}
    int bitAnd(int x, int y) {
    /&lt;em&gt; x&amp;amp;y = ~(~(x&amp;amp;y)) = ~(~x|~y) &lt;/em&gt;/
        return ~(~x | ~y);
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;getByte
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过6个操作符返回x中的第n个字节(0(LSB)&amp;lt;=n&amp;lt;=3(MSB))。
    分析：根据不同的n值将x右移不同的位数，然后使用掩码0xFF取得最低位数的字节即可。先左移再右移会导致算术右移，需要小心。
    答案：
    {% codeblock lang:c %}
    int getByte(int x, int n) {
    /&lt;em&gt; right shift in order to avoid boring arithmatic shift and try to get specific byte using bitAnd and mask. &lt;/em&gt;/
        return ((x &amp;gt;&amp;gt; (n &amp;lt;&amp;lt; 3)) &amp;amp; 0xFF);      &lt;br&gt;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;logicalShift
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过20个操作符实现将int值x的逻辑右移n位。
    分析：通过将一个全1的数通过算术右移的方式构造掩码，然后与算术右移的掩码求按位与即可。
    注意，直接右移32位的结果是未定义的，需要额外处理这种情况。
    答案：
    {% codeblock lang:c %}
    int logicalShift(int x, int n) {
    /&lt;em&gt; try to implement logical right shift by mask and logical right shift &lt;/em&gt;/
        int mask = ((~0) &amp;lt;&amp;lt; (31 + (~n + 1))) &amp;lt;&amp;lt; 1;
        return (x &amp;gt;&amp;gt; n) &amp;amp; (~mask);
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;bitCount
     问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过40个操作符计算一个数字x中有多少为1的位。
     分析：
     本题参考&lt;a href="http://stackoverflow.com/questions/3815165/how-to-implement-bitcount-using-only-bitwise-operators"&gt;stackoverflow&lt;/a&gt;上的回答，并结合题目要求做了一些改动。
     核心的思想是分治法，通过将原数字x中的位按每1,2,4...个位分组，按相邻组进行累加，最后求出结果。
     举例来说，假如现在有一个数395，它的二进制表示是0000000110001011(16位)，首先我们将这个数按1位分组，得到：
     0 0 0 0 0 0 0 1 1 0 0 0 1 0 1 1
     然后我们将相邻的组累加，得到：
     0+0 0+0 0+0 0+1 1+0 0+0 1+0 1+1
     00 00 00 01 01 00 01 10
     然后我们继续将相邻的组累加，得到：
     00+00 00+01 01+00 01+10
     0000 0001 0001 0011
     然后我们继续将相邻的组累加，得到：
     0000+0001 0001+0011
     00000001 00000100
     最后，我们最后的两个组累加，得到：
     00000001+0000100=00000101
     结果是5，为正确答案。
     答案：
     {% codeblock lang:c %}
     int bitCount(int x) {
    /&lt;em&gt; Divide and Conquer &lt;/em&gt;/
        int mask = 0x55 + (0x55 &amp;lt;&amp;lt; 8) + (0x55 &amp;lt;&amp;lt; 16) + (0x55 &amp;lt;&amp;lt; 24);
        x = (x &amp;amp; mask) + ((x &amp;gt;&amp;gt; 1) &amp;amp; mask);
        mask = 0x33 + (0x33 &amp;lt;&amp;lt; 8) + (0x33 &amp;lt;&amp;lt; 16) + (0x33 &amp;lt;&amp;lt; 24);
        x = (x &amp;amp; mask) + ((x &amp;gt;&amp;gt; 2) &amp;amp; mask);
        mask = 0xF + (0xF &amp;lt;&amp;lt; 8) + (0xF &amp;lt;&amp;lt; 16) + (0xF &amp;lt;&amp;lt; 24);
        x = (x &amp;amp; mask) + ((x &amp;gt;&amp;gt; 4) &amp;amp; mask);
        return (x + (x &amp;gt;&amp;gt; 8) + (x &amp;gt;&amp;gt; 16) + (x &amp;gt;&amp;gt; 24)) &amp;amp; 0xFF;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;bang
    问题：要求使用~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过12个操作数计算x的逻辑非。
    分析：
    逻辑非要求将0变成1，将非0的数变成0。生成0或1可以通过与掩码0x1求按位与实现，重点在于如何构造一个表达式使得0和非0的数产生不同的结果。
    可以考虑对于任意一个非0的数，它的负数都是从最高位到其最低位的1为止(不包括最低位的1)全部取反的结果。
    例如，14是00001110(8位)，而-14是11110010(8位)，为14从最高位到最低位的1(不包括这个1)，也就是000011取反，而最低位的10不变的结果。
    而0的负数永远是0。
    从这里我们可以看出，对于一个非0的数，它与它的负数按位或的结果的最高位一定会是1，而0与非0的按位或的结果的最高位永远是0。我们可以以此实现逻辑非。
    答案：
    {% codeblock lang:c %}
    int bang(int x) {
    /&lt;em&gt; for x != 0, the highest bit of x | (-x) will always become 1 while when x == 0, the result is the opposite &lt;/em&gt;/
        return (~((x | (~x + 1)) &amp;gt;&amp;gt; 31) &amp;amp; 1);
    }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;第二部分 补码运算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;tmin
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过4个运算符返回以补码表示的最小的整数。
    分析：根据补码到整数的公式，最小的整数的补码表示为10000...
    答案：
    {% codeblock lang:c %}
    int tmin(void) {
        /&lt;em&gt; TMin = 10000.... &lt;/em&gt;/
        return (1 &amp;lt;&amp;lt; 31);
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fitsBits
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过15个操作符判断x是否能表示成n位的补码，如果是，则返回1，反之则返回0。
    分析：
    这个问题需要分正数和负数两种情况讨论，对于正数来说，如果一个数x能表示成n位的补码，那么它从最高位直到第n位一定全部为0，它的第n位一定不能为1，否则它就会变成一个负数。对于一个负数来说，如果一个数x能表示成n位的补码，那么它只需从最高位到第n位全部为1即可。
    因此，我们可以先将x右移n-1位，对于满足条件的正数和负数，这将产生一个全0的数或是一个全1的数。然后我们可以根据x的符号构造一个全0或者是全1的掩码。通过将这两个数按位异或并且取逻辑非，就能得到正确的结果。
    答案：
    {% codeblock lang:c %}
    int fitsBits(int x, int n) {
    /* if fitsBits then from highest bit to n bit will all become 1 - negative number or 0 - positive number&lt;/p&gt;
&lt;ul&gt;
&lt;li _="%" endcodeblock&gt;then can construct a mask to implement fitsBits with the help of ^ and !
 */
    return !((x &amp;gt;&amp;gt; (n + (~1) + 1)) ^ (((1 &amp;lt;&amp;lt; 31) &amp;amp; x) &amp;gt;&amp;gt; 31));
}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;divpwr2
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过15个操作符求出x/(2^n)的结果，其中0&amp;lt;=n&amp;lt;=30。
    分析：对于正数，直接使用算术右移即可；对于负数，需要加上适当的偏移量以实现向上舍入，这可以用根据符号位生成1个全0或者全1的掩码来控制。
    答案：
    {% codeblock lang:c %}
    int divpwr2(int x, int n) {
    /&lt;em&gt; add bias when x is negative, which is controlled by a sign-related mask &lt;/em&gt;/
        int mask = x &amp;gt;&amp;gt; 31;
        int add = ((1 &amp;lt;&amp;lt; n) + (~1) + 1) &amp;amp; mask;
        return (x + add) &amp;gt;&amp;gt; n;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;negate
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过5个操作符求出x的负数。
    分析：-x = (~x + 1)
    答案：
    {% codeblock lang:c %}
    int isPositive(int x) {
    ／&lt;em&gt; -x = (~x) + 1 &lt;/em&gt;／
        return (!(x &amp;gt;&amp;gt; 31)) ^ (!(x ^ 0));
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;isPositive
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过8个操作符判断x是否为正数。
    分析：对于正数，它的最高位一定是0，同时还要排除0的影响。
    答案：
    {% codeblock lang:c %}
    int isPositive(int x) {
    /&lt;em&gt; ensure the highest bit is 0 and x != 0 &lt;/em&gt;/
        return (!(x &amp;gt;&amp;gt; 31)) ^ (!(x ^ 0));
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;isLessOrEqual
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过24个操作符判断x是否小于或等于y。
    分析：
    对于这个问题，我们需要按照是否溢出，以及x与y的符号分别讨论。
    最基本的思路是，做y-x，若结果的符号位为1，则返回0，反之返回1。但这样就忽略了溢出可能导致的问题，现在我们做如下考虑。
    若x，y均为正数，或x，y均为负数，则y-x绝不可能溢出，因此可直接用差的符号位判断大小。
    若x为正数，y为负数，可以直接返回0。
    若x为负数，y为正数，可以直接返回1。
    我们可以生成两种条件变量，一种为x，y同号时返回正确结果的条件变量，另一种为x，y异号时返回正确结果的条件变量。
    对于x，y同号和异号这两种不同的情况，我们可以用!((x ^ y) &amp;gt;&amp;gt; 31)生成掩码使得在任意的情况下，只有正确的条件变量生效。
    答案：
    {% codeblock lang:c %}
    int isLessOrEqual(int x, int y) {
    /&lt;em&gt; different processing ways when x and y have the same signs or different signs &lt;/em&gt;/
        int diff = y + (~x) + 1;
        int not_diff_sign = !(diff &amp;gt;&amp;gt; 31);
        int mask = !((x ^ y) &amp;gt;&amp;gt; 31);
        int result_not_overflow = mask &amp;amp; not_diff_sign;
        int result_overflow = (!mask) &amp;amp; (x &amp;gt;&amp;gt; 31);
        return result_overflow | result_not_overflow;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;ilog2
    问题：要求使用! ~ &amp;amp; ^ | + &amp;lt;&amp;lt; &amp;gt;&amp;gt;以及不超过90个操作数求出x以2为底的对数（向下舍入），保证x&amp;gt;0。
    分析：
    这道题参考了网上的答案。核心的思想是二分查找。
    首先将x右移16位，如果x&amp;gt;0，则表明结果的第5位为1，将该位置为1。
    然后根据结果将x右移8位（第5位为0）或者将x右移24位（第5位为1），如果x&amp;gt;0，则表明结果的第4位为1，将该位置为1。
    以此类推，直到得出结果。
    答案：
    {% codeblock lang:c %}
    int ilog2(int x) {
        /&lt;em&gt; Binary Search &lt;/em&gt;/
        int result = (!!(x &amp;gt;&amp;gt; 16) &amp;lt;&amp;lt; 4);
        result = result + ((!!(x &amp;gt;&amp;gt; (result + 8))) &amp;lt;&amp;lt; 3);
        result = result + ((!!(x &amp;gt;&amp;gt; (result + 4))) &amp;lt;&amp;lt; 2);
        result = result + ((!!(x &amp;gt;&amp;gt; (result + 2))) &amp;lt;&amp;lt; 1);
        result = result + (!!(x &amp;gt;&amp;gt; (result + 1)));
        return result;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;第三部分 浮点数操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;float_neg
    问题：返回对于浮点数参数f，-f的等价的位级表示。当参数位NAN时，返回NAN。函数的参数和返回值均为unsigned，但它们实际上都是浮点数的位表示。最多允许使用10个操作符。
    分析：首先要判断参数是否是NAN，如果是则直接返回，否的话直接将参数的最高位取反即可。
    NAN的阶码全为1，尾码不全为0。
    答案：
    {% codeblock lang:c %}
    unsigned float_neg(unsigned uf) {
    /&lt;em&gt; m_flag - if m != 0 e_flag - if e == 0xff &lt;/em&gt;/
        unsigned m_flag = 0x007fffff &amp;amp; uf;
        unsigned e_flag = !(0x7f800000 &amp;amp; (~uf));
        if (e_flag &amp;amp;&amp;amp; m_flag) {
            return uf;
        } else {
            return 0x80000000 ^ uf;
        }
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;float_i2f
    问题：返回(float)x的位级的等价表示。结果被作为unsigned int返回，但它实际上是单精度浮点数的位表示。最多允许使用30个操作符。
    分析：
    首先考虑到整数中只有0会被转换为非规格化浮点数，而其他整数会被转化为规格化浮点数。因此对于0需要做额外的处理。
    其次，对于负数，我们需要将其转化为正数再做处理，这就要求我们需要将x的符号保存下来，并且从补码转化为无符号表示。
    然后，我们需要根据转换成无符号数的x算出阶码e和尾码m。
    最后，我们将尾码舍入后再和阶码符号一起，生成最终的结果即可。
    这里我有一个比较大的误区，舍入的时候看的不仅仅是带舍入位的下一位，而是待舍入位之后的所有位。
    答案：
    {% codeblock lang:c %}
    unsigned float_i2f(int x) {
    /&lt;em&gt; 1.process 0 individually 2.process negative number and store the sign 3.get the e number 4.get the m number and round it 5.construct the result &lt;/em&gt;/
        unsigned count = 0;
        unsigned mask = 0x80000000;
        unsigned sign = x &amp;amp; mask;
        unsigned c = 0, absx = x;
        if (x == 0) {
            return 0;
        } else {
            if (x &amp;lt; 0) {
                absx = -x;
            }
            while (!(mask &amp;amp; absx)) {
                count = count + 1;
                mask = mask &amp;gt;&amp;gt; 1;
            }
            absx = absx &amp;lt;&amp;lt; (count + 1);
            if (((absx &amp;amp; 0x1ff) &amp;gt; 0x100) || ((absx &amp;amp; 0x3ff) &amp;gt;= 0x300)) {
                c = 1;
            }
            return sign + ((158 - count) &amp;lt;&amp;lt; 23) + (absx &amp;gt;&amp;gt; 9)+ c;
        }
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;float_twice
    问题：返回对于浮点数参数f，2&lt;em&gt;f的等价的位级表示。参数和结果都为unsigned int，但它们实际上是浮点数的位表示。当参数是NAN时，返回NAN。最多允许使用30个操作符。
    分析：
    对于非规格化浮点数，只要在保留符号位的情况下将尾码m右移一位即可，这样同时解决了尾码乘以二和进位的情况。
    对于规格化浮点数，只要将其阶码e加1即可。
    答案：
    {% codeblock lang:c %}
    unsigned float_twice(unsigned uf) {
    /&lt;/em&gt; denormailized number - m = m &amp;lt;&amp;lt; 1 normalized number - e = e + 1 */
        unsigned result = uf;
        if ((uf &amp;amp; 0x7f800000) == 0) {
            result = ((uf &amp;amp; 0x007fffff) &amp;lt;&amp;lt; 1) | (uf &amp;amp; 0x80000000);
        } else if ((uf &amp;amp; 0x7f800000) != 0x7f800000) {
            result = uf + 0x00800000;
        }
        return result;
    }&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="计算机系统"></category><category term="实验"></category></entry><entry><title>Android PropertyAnimation 属性动画（二）弹跳小球实例</title><link href="/android-propertyanimation-shu-xing-dong-hua-er-dan-tiao-xiao-qiu-shi-li.html" rel="alternate"></link><published>2017-04-02T10:08:31+08:00</published><updated>2017-04-02T10:08:31+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-04-02:/android-propertyanimation-shu-xing-dong-hua-er-dan-tiao-xiao-qiu-shi-li.html</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/viseator/AndroidAnimatorBounceBallDemo"&gt;GitHub完整代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.viseator.com/2017/03/26/android_property_animation_1/"&gt;上篇博客&lt;/a&gt;简单介绍了属性动画的原理，这篇博客将会以一个简单的实例来运用上之前讲的内容，并对&lt;code&gt;Animator&lt;/code&gt;的几个回调方法进行讲解。&lt;/p&gt;
&lt;p&gt;目标是自定义一个&lt;code&gt;View&lt;/code&gt;，在画布上绘制一个小球，点击屏幕后小球从顶部自由下落，落到底边后反弹，反弹损失一半的能量，也就是说小球只能上升到下落时一半的高度，再重复这个过程直到退出程序。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/android_animator.gif"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;创建自定义View&lt;/h2&gt;
&lt;p&gt;首先我们要创建一个自定义&lt;code&gt;View&lt;/code&gt;，这里我就采用继承&lt;code&gt;LinearLayout&lt;/code&gt;的方式来创建这个&lt;code&gt;View&lt;/code&gt;，但要注意&lt;code&gt;LinearLayout&lt;/code&gt;默认是不绘制自身的，需要在&lt;code&gt;onDraw()&lt;/code&gt;方法之前适当的时候调用&lt;code&gt;setWillNotDraw(false);&lt;/code&gt;令其进行绘制。&lt;/p&gt;
&lt;p&gt;在继承&lt;code&gt;LinearLayout&lt;/code&gt;的同时我们要实现全部三个构造方法，否则xml文件的预览解析会出现问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/viseator/AndroidAnimatorBounceBallDemo"&gt;GitHub完整代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.viseator.com/2017/03/26/android_property_animation_1/"&gt;上篇博客&lt;/a&gt;简单介绍了属性动画的原理，这篇博客将会以一个简单的实例来运用上之前讲的内容，并对&lt;code&gt;Animator&lt;/code&gt;的几个回调方法进行讲解。&lt;/p&gt;
&lt;p&gt;目标是自定义一个&lt;code&gt;View&lt;/code&gt;，在画布上绘制一个小球，点击屏幕后小球从顶部自由下落，落到底边后反弹，反弹损失一半的能量，也就是说小球只能上升到下落时一半的高度，再重复这个过程直到退出程序。如图：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/android_animator.gif"&gt;&lt;/p&gt;
&lt;!--more--&gt;

&lt;h2&gt;创建自定义View&lt;/h2&gt;
&lt;p&gt;首先我们要创建一个自定义&lt;code&gt;View&lt;/code&gt;，这里我就采用继承&lt;code&gt;LinearLayout&lt;/code&gt;的方式来创建这个&lt;code&gt;View&lt;/code&gt;，但要注意&lt;code&gt;LinearLayout&lt;/code&gt;默认是不绘制自身的，需要在&lt;code&gt;onDraw()&lt;/code&gt;方法之前适当的时候调用&lt;code&gt;setWillNotDraw(false);&lt;/code&gt;令其进行绘制。&lt;/p&gt;
&lt;p&gt;在继承&lt;code&gt;LinearLayout&lt;/code&gt;的同时我们要实现全部三个构造方法，否则xml文件的预览解析会出现问题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;创建好自定义&lt;code&gt;View&lt;/code&gt;后，我们就可以在对应的layout xml布局文件中用完整包名+类名的方式使用我们的自定义&lt;code&gt;View&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;com.viseator.viewtest.VView&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同时，我们在绘制之前的&lt;code&gt;onMeasure()&lt;/code&gt;方法中调用&lt;code&gt;setWillNotDraw(false);&lt;/code&gt;使自定义&lt;code&gt;View&lt;/code&gt;可以绘制：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setWillNotDraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;setOnClickListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里也调用了&lt;code&gt;setOnClickListener()&lt;/code&gt;注册之后的点击事件。&lt;/p&gt;
&lt;h2&gt;绘制&lt;/h2&gt;
&lt;h3&gt;小球的绘制&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;ValueAnimator&lt;/span&gt; &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;xPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;yPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Paint&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onDraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onDraw&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animator&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeight&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;         
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getResources&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getColor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Gray&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAntiAlias&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;drawCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;drawCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Canvas&lt;/span&gt; &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;drawCircle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xPos&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yPos&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里第10行对是否是第一次绘制进行判断并将画布大小保存到&lt;code&gt;canvasHeight&lt;/code&gt;供之后的绘制使用（之后的绘制的坐标需要相对于画布的坐标）并设置&lt;code&gt;paint&lt;/code&gt;的属性。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drawCircle()&lt;/code&gt;方法也非常简单，只是调用&lt;code&gt;canvas&lt;/code&gt;提供的&lt;code&gt;drawCircle()&lt;/code&gt;方法指定位置与半径和之前设置的&lt;code&gt;paint&lt;/code&gt;，调用后就会在屏幕上的对应位置绘制一个小球。&lt;/p&gt;
&lt;h3&gt;下落动画的绘制&lt;/h3&gt;
&lt;p&gt;下面就要让小球“动”起来，其实并不是小球发生了移动，只是我们不停地改变小球绘制的位置，当绘制的速率（帧率）大于24帧时的，就在视觉上变成了流畅的动画。也就是说，我们需要使用&lt;code&gt;Animator&lt;/code&gt;连续地改变小球的位置，为了实现加速的效果，位置的改变速率应该随时间增加，也就是需要我们上一篇博客提到的&lt;code&gt;Evaluator&lt;/code&gt;来实现。&lt;/p&gt;
&lt;h4&gt;animator的初始化&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ValueAnimator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ofInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDuration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setRepeatCount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValueAnimator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;INFINITE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setRepeatMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValueAnimator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RESTART&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInterpolator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AccelerateInterpolator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rate&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addUpdateListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addListener&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;写成一个初始化方法便于重新初始化。&lt;/p&gt;
&lt;p&gt;第2行将传入的值区间的开始与结束值作为参数获得了一个值为&lt;code&gt;int&lt;/code&gt;的&lt;code&gt;ValueAnimator&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;第3行设置了动画的时间为1秒。&lt;/p&gt;
&lt;p&gt;第4、5行分别设置了动画的重复次数为无限次，重复模式为重新开始，顾名思义，动画可以重复进行，重新开始的重复模式意味着一次动画结束之后数值重新从&lt;code&gt;start&lt;/code&gt;到&lt;code&gt;end&lt;/code&gt;进行改变，也可以设置重复的模式为反向，即一次动画结束之后数值从&lt;code&gt;end&lt;/code&gt;到&lt;code&gt;start&lt;/code&gt;变化。&lt;/p&gt;
&lt;p&gt;第六行为&lt;code&gt;animator&lt;/code&gt;设置了一个库中提供的&lt;code&gt;AccelerateInterpolator&lt;/code&gt;即加速插值器，这就是我们实现加速效果的关键，上篇之中已经看过它的源码，默认时返回的最终动画进行百分比是时间百分比的平方，达到了位置随着时间的平方变化，也就是实现了加速下落的效果。&lt;/p&gt;
&lt;p&gt;第7、8两行分别为&lt;code&gt;animator&lt;/code&gt;设置了一个&lt;code&gt;UpdateListener&lt;/code&gt;用于监听数值变化，一个&lt;code&gt;Listener&lt;/code&gt;用于监听&lt;code&gt;animator&lt;/code&gt;本身开始、停止、重复。&lt;/p&gt;
&lt;h4&gt;完成下落动画&lt;/h4&gt;
&lt;p&gt;创建好了&lt;code&gt;ValueAnimator&lt;/code&gt;，下一步就是在适合的时候在画布上重新绘制位置参数被&lt;code&gt;animator&lt;/code&gt;改变后的小球。注意到我们之前小球的y坐标存储在&lt;code&gt;yPos&lt;/code&gt;变量中，我们只要适时令&lt;code&gt;yPos&lt;/code&gt;等于改变后的值再通过&lt;code&gt;invalidate()&lt;/code&gt;方法进入&lt;code&gt;onDraw()&lt;/code&gt;方法让&lt;code&gt;View&lt;/code&gt;按小球的参数重新进行绘制就可以了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;animator&lt;/code&gt;的&lt;code&gt;ValueAnimator.AnimatorUpdateListener&lt;/code&gt;为我们提供了一个及时刷新&lt;code&gt;View&lt;/code&gt;的时机，之前为&lt;code&gt;animator&lt;/code&gt;注册一个&lt;code&gt;UpdateListener&lt;/code&gt;之后，每当&lt;code&gt;animator&lt;/code&gt;的值发生改变时，&lt;code&gt;onAniamtionUpdate()&lt;/code&gt;就会被回调。&lt;/p&gt;
&lt;p&gt;那我们就可以在这个回调方法中为&lt;code&gt;yPos&lt;/code&gt;设置新的值并令&lt;code&gt;View&lt;/code&gt;重新绘制：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onAnimationUpdate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValueAnimator&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;yPos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAnimatedValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;invalidate&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;   
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这样，我们只要启动&lt;code&gt;animator&lt;/code&gt;令它的值开始变化，就会不断地调用&lt;code&gt;onAnimationUpdate()&lt;/code&gt;重绘&lt;code&gt;View&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animationHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;方法令&lt;code&gt;animator&lt;/code&gt;开始。&lt;/p&gt;
&lt;p&gt;到这里，我们已经可以看到点击屏幕后小球下落到底部并停止的效果。&lt;/p&gt;
&lt;h3&gt;回弹效果实现&lt;/h3&gt;
&lt;p&gt;我们之前已经为&lt;code&gt;animator&lt;/code&gt;设置了无限重复，并且模式为重新开始，那么要做到回弹的效果，就要在小球落到底边（动画完成）之后，为小球设置新的初始值与最终值，让小球从最低点回到落下时一半的高度。高度数据我们在&lt;code&gt;onClick()&lt;/code&gt;中的第4行（上面代码）已经初始化为了相对于画布的高度，之后再使用时只需把它除2就可以表示圆心距底边的高度了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Animator.AnimatorListener&lt;/code&gt;为我们提供了一系列方法用于监听&lt;code&gt;animator&lt;/code&gt;状态的变化（而不是数值）：&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="/images/AnimatorListener.jpg"&gt;&lt;/p&gt;
&lt;p&gt;（除金色为Android 8新增外），依次为动画取消，动画结束，动画开始重复，动画开始。&lt;/p&gt;
&lt;p&gt;这里我们就需要在&lt;code&gt;onAnimationReapt()&lt;/code&gt;回调中为动画设置新的初值与结束数值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onAnimationRepeat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Animator&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;ValueAnimator&lt;/span&gt; &lt;span class="n"&gt;vAnimation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ValueAnimator&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isDown&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;animationHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animationHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;isDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isDown&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isDown&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setIntValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;animationHeight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;vAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInterpolator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AccelerateInterpolator&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;vAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setIntValues&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;animationHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;vAnimation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setInterpolator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DecelerateInterpolator&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;回调参数中的&lt;code&gt;animation&lt;/code&gt;就是回调这个函数的&lt;code&gt;animator&lt;/code&gt;，第3行对其进行一个类型转换。&lt;/p&gt;
&lt;p&gt;这里我们使用了一个&lt;code&gt;isDown&lt;/code&gt;参数来判断是否是下落过程，如果上个动画是下落过程，就将&lt;code&gt;animationHeight&lt;/code&gt;减半。&lt;/p&gt;
&lt;p&gt;第7行把&lt;code&gt;isDown&lt;/code&gt;置反，再根据&lt;code&gt;isDown&lt;/code&gt;的判断使用&lt;code&gt;setIntValues()&lt;/code&gt;方法为&lt;code&gt;animator&lt;/code&gt;设置新的范围，使用&lt;code&gt;setInterpolator()&lt;/code&gt;方法设置新的插值器，注意上升时使用的应该是&lt;code&gt;DecelerateInterpolater&lt;/code&gt;减速上升。&lt;/p&gt;
&lt;p&gt;这样在新的动画开始时属性改变的范围就得到了改变，也就使得小球可以反弹了。&lt;/p&gt;
&lt;p&gt;为了让每一次点击时动画都可以重新开始，在&lt;code&gt;onClick()&lt;/code&gt;方法中加入几行初始化代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animator&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;animationHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;canvasHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;isDown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;animator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里第3-5行让如果存在的&lt;code&gt;animator&lt;/code&gt;停止，否则新动画无法启动。&lt;/p&gt;
&lt;p&gt;下篇博客将会从源码角度继续探索&lt;code&gt;animator&lt;/code&gt;的实现原理和更高级的一些特性。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/viseator/AndroidAnimatorBounceBallDemo"&gt;GitHub完整代码&lt;/a&gt;&lt;/p&gt;</content><category term="android"></category><category term="UI"></category><category term="animation"></category></entry><entry><title>设计模式——创建型模式</title><link href="/she-ji-mo-shi-chuang-jian-xing-mo-shi.html" rel="alternate"></link><published>2017-03-20T12:56:00+08:00</published><updated>2017-03-20T12:56:00+08:00</updated><author><name>Yifeng Tang</name></author><id>tag:None,2017-03-20:/she-ji-mo-shi-chuang-jian-xing-mo-shi.html</id><summary type="html">&lt;h1&gt;Abstract Factory（抽象工厂）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;提供一个无需指定的类而可以创建一系列相关的对象的接口。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="抽象工厂" src="/images/2017_3_7_1.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;由一个Abstract Factory类派生出多个子类工厂，子类工厂将会提供相应的创建产品的方法。对于客户来说，只需要获得Abstract Factory类中的接口就可以实现各类产品的创建。（与工厂方法有一点区别在抽象工厂一般是生成一系列相互有关系的产品，工厂模式方法一般就是生成某一个产品）&lt;/p&gt;
&lt;h2&gt;使用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个系统要独立于它的产品的创建、组合和表示时；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个系统要由多个产品系列的一个来配置时；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你强调一系列相关产品对象的设计以便联合使用的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你提供一个产品类库，而只想显示他们的接口而不是实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与成员&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AbstractFactory&lt;/p&gt;
&lt;p&gt;声明创建抽象产品对象的操作接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteFactory&lt;/p&gt;
&lt;p&gt;实现创建具体产品对象的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AbstractProduct&lt;/p&gt;
&lt;p&gt;为一类产品对象声明一个接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteProduct&lt;/p&gt;
&lt;p&gt;将被具体工厂实现的具体产品对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;使用Abstract接口的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分离了具体的类，提高解耦度。&lt;/p&gt;
&lt;p&gt;它将客户与类的实现分离开，客户通过手中有的抽象工厂接口操纵。产品的类名也在具体工厂的实现中分离，不会出现在客户代码中。客户不必知道自己到底获得了怎样实现的一个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于改变产品的系列。&lt;/p&gt;
&lt;p&gt;由于具体的工厂方法只会在初始化的时候出现一次，所以想要改变产品的系列只需要转换到相应的工厂对象，就可以重新创建一系列的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有利于产品的一致性。&lt;/p&gt;
&lt;p&gt;当一个系列的产品对象被设计成一起工作或者一个应用只能使用一个系列的产品的时候，抽象工厂就可以很轻易地实现这一个功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;难以支持新的产品（或者说功能？）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例 …&lt;/h2&gt;</summary><content type="html">&lt;h1&gt;Abstract Factory（抽象工厂）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;提供一个无需指定的类而可以创建一系列相关的对象的接口。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="抽象工厂" src="/images/2017_3_7_1.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;由一个Abstract Factory类派生出多个子类工厂，子类工厂将会提供相应的创建产品的方法。对于客户来说，只需要获得Abstract Factory类中的接口就可以实现各类产品的创建。（与工厂方法有一点区别在抽象工厂一般是生成一系列相互有关系的产品，工厂模式方法一般就是生成某一个产品）&lt;/p&gt;
&lt;h2&gt;使用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;一个系统要独立于它的产品的创建、组合和表示时；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个系统要由多个产品系列的一个来配置时；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你强调一系列相关产品对象的设计以便联合使用的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当你提供一个产品类库，而只想显示他们的接口而不是实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与成员&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AbstractFactory&lt;/p&gt;
&lt;p&gt;声明创建抽象产品对象的操作接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteFactory&lt;/p&gt;
&lt;p&gt;实现创建具体产品对象的操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AbstractProduct&lt;/p&gt;
&lt;p&gt;为一类产品对象声明一个接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteProduct&lt;/p&gt;
&lt;p&gt;将被具体工厂实现的具体产品对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client&lt;/p&gt;
&lt;p&gt;使用Abstract接口的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;分离了具体的类，提高解耦度。&lt;/p&gt;
&lt;p&gt;它将客户与类的实现分离开，客户通过手中有的抽象工厂接口操纵。产品的类名也在具体工厂的实现中分离，不会出现在客户代码中。客户不必知道自己到底获得了怎样实现的一个类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于改变产品的系列。&lt;/p&gt;
&lt;p&gt;由于具体的工厂方法只会在初始化的时候出现一次，所以想要改变产品的系列只需要转换到相应的工厂对象，就可以重新创建一系列的产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有利于产品的一致性。&lt;/p&gt;
&lt;p&gt;当一个系列的产品对象被设计成一起工作或者一个应用只能使用一个系列的产品的时候，抽象工厂就可以很轻易地实现这一个功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;难以支持新的产品（或者说功能？）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BenzFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Benz&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;BenzCushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AudiFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Audi&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;AudiCushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="n"&gt;cushionA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="n"&gt;cushionB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addCushion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cushionA&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addCushion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cushionB&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Factory Method（工厂方法）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪一个类。将实例化延迟到其子类。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_9_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;工厂方法被自己的子类所重定义以决定创建哪一个产品对象。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_9_2.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用户创建一个工厂；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;工厂生产一个产品；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户直接使用或者调用产品的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当一个类不知道它所必需创建的对象的类的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当一个类希望由它的子类来制定它所创建的对象的时候；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当类创建对象的职责委托给多个子类中的一个，并且你希望选择某个子类使得具体产品明确化的时候。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Product&lt;/p&gt;
&lt;p&gt;定义工厂方法所创建的对象的接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteProduct&lt;/p&gt;
&lt;p&gt;实现Product的接口；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creator&lt;/p&gt;
&lt;p&gt;声明工厂方法，定义一个具体工厂来生产产品，并且调用工厂方法以返回一个Product；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteCreator&lt;/p&gt;
&lt;p&gt;重定义一个具体的工厂方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将与特定相关产品的代码与你的代码分离，你只需要关心product而不是用户可能会实现出来的各种concreteProduct；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为子类提供了一个hook，这个hook可以帮助提供对象的扩展版本。例如，有一个汽车工厂，该工厂可以生产小汽车，后来这个工厂老板又去开了一家高级汽车厂。这时候，这个汽车厂既可以用原来的方法生产普通汽车，也可以继承之后生产生产高级汽车，此时父类工厂方法已不是一个抽象的方法，而是一个default方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;连接平行的类层次。当一个类将自己的某些功能委托给另一个独立的类的时候，便产生了平行的类层次。例如，有一个类用于判定学生的试卷得分多少，但是最后这个分数将不会存储在自己身上，而是在另一个类之中。此时，这个分数就是从判定分数的类中的工厂方法中生产的，这样就实现了平行的分层。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;与抽象工厂模式的异同&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;异：&lt;/p&gt;
&lt;p&gt;对于一个抽象工厂模式，它更加倾向于强调一系列产品的生产以及调整改变产品系列；对于工厂方法，仅是为了某一个产品的生产。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同&lt;/p&gt;
&lt;p&gt;实际上在某种方面来说，抽象工厂模式囊括了工厂方法。也就是说抽象工厂方法可以用工厂方法来实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BenzFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Benz&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AudiFactory&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Audi&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Singletion（单例模式）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;保证一个类只有一个实例，并且提供一个访问它的全局访问点。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_20_1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;图中反映的是所谓懒汉式单例模式——但需要这样一个对象的时候才开始创建这样的一个对象。相反，还有一种勤劳单例模式，当这个类被加载的时候就会创建这样一个单例对象。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_20_2.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当用户需要的时候，向类请求一个对象；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类如果没有创建这个单例对象，就会创建这个对象并且传递回来，如果类已经创建了这个对象，那么就直接简单地将对象传递回来即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;适用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当类只能有一个实例并且用户将会从一个众所周知的访问点访问它；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当这个唯一实例是通过子类化可扩展的，并且客户应该无须更改代码就能使用一个扩展的实例时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Singleton&lt;/p&gt;
&lt;p&gt;定义一个Instance操作，并且维护一个自己的唯一实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;效果&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对唯一实例的受控访问；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩小名空间（对于java来说不存在命名空间）；&lt;/p&gt;
&lt;p&gt;避免了过多的全部变量的出现，使得命名空间更加精简。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;允许对操作和表示的精化；&lt;/p&gt;
&lt;p&gt;？？？不是很懂书上在说啥（&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以改变成多个可控数目的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Tips&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;使用单例注册表来进行单例的子类的创建。&lt;/p&gt;
&lt;p&gt;Singleton可以将自己的众多子类存放在某个映射表中，然后以某一个字符串或者其他来进行访问注册。（注册过程可以随意地方实现）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;代码实例&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;registerMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="nf"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="nf"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="n"&gt;registerMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;containsKey&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;benz&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;registerMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Audi&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;registerMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;registerMap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BenzFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt; &lt;span class="nf"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Benz&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;BenzCushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AudiFactory&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractFactory&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;();}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt; &lt;span class="nf"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Audi&lt;/span&gt; &lt;span class="nf"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;AudiCushion&lt;/span&gt; &lt;span class="nf"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BenzFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;AbstractFactory&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;AudiFactory&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="n"&gt;cushionA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Cushion&lt;/span&gt; &lt;span class="n"&gt;cushionB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;makeCushion&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addCushion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cushionA&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addCushion&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cushionB&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Builder（生成器）&lt;/h1&gt;
&lt;h2&gt;目标&lt;/h2&gt;
&lt;p&gt;将一个较为复杂的对象的构建与表示分离，并且能够在多个构建过程之后构建出不同的表示。&lt;/p&gt;
&lt;h2&gt;结构&lt;/h2&gt;
&lt;p&gt;&lt;img alt="结构图" src="/images/2017_3_7_2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;对于一个Builder它将会把生产过程中的产物放在自己这里，按照Director的调用方法的顺序来执行生产，最后有一个返回产物的方法。&lt;/p&gt;
&lt;h2&gt;协作&lt;/h2&gt;
&lt;p&gt;&lt;img alt="时序图" src="/images/2017_3_7_3.jpg"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;客户创建一个Director对象，并且配置相应的Builder；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Builder处理Director的请求，将部件添加到产品中；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;客户从Builder中检索获得产品。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;使用情形&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;当创建复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式时；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当构造过程必须允许被构造的对象有不同的表示时。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;参与者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Builder&lt;/p&gt;
&lt;p&gt;为创建一个Product对象的各个部件制定抽象接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConcreteBuilder&lt;/p&gt;
&lt;p&gt;实现Builder的接口并且定义明确他所创建的表示，再提供一个检索产品的接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Director&lt;/p&gt;
&lt;p&gt;一个使用Builder，指导整个生产过程的一个对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Product&lt;/p&gt;
&lt;p&gt;表示被生产的具体产品。（可以不使用一个抽象类来完成构造）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;实例代码&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addWheel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addEngine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;getCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BenzBuilder&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addWheel&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;addEngine&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{}&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;Benz&lt;/span&gt; &lt;span class="nf"&gt;getCar&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Benz&lt;/span&gt;&lt;span class="o"&gt;();}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Director&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Director&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Builder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="nf"&gt;construct&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addWheel&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addEngine&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCar&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;BenzBuilder&lt;/span&gt; &lt;span class="n"&gt;builder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;BenzBuilder&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;Director&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Director&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;director&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;construct&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="design patterns"></category></entry><entry><title>Android View绘制之layout过程</title><link href="/android-viewhui-zhi-zhi-layoutguo-cheng.html" rel="alternate"></link><published>2017-03-12T14:02:47+08:00</published><updated>2017-03-12T14:02:47+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-03-12:/android-viewhui-zhi-zhi-layoutguo-cheng.html</id><summary type="html">&lt;p&gt;经过&lt;a href="http://www.viseator.xyz/2017/03/10/android_view_onMeasure/"&gt;上一篇&lt;/a&gt;介绍的&lt;code&gt;measure&lt;/code&gt;过程之后，各个&lt;code&gt;View&lt;/code&gt;的尺寸信息已经存储在了每个&lt;code&gt;View&lt;/code&gt;中，下面是&lt;code&gt;layout&lt;/code&gt;过程，&lt;code&gt;layout&lt;/code&gt;过程的目的是根据上一步中计算出的尺寸来正确设置各个&lt;code&gt;View&lt;/code&gt;及其后代的位置。这个过程首先被调用的是&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;layout()&lt;/code&gt;方法，&lt;code&gt;layout()&lt;/code&gt;的方法签名是&lt;code&gt;public void layout(int l, int t, int r, int b)&lt;/code&gt;，四个参数分别为左边界距父&lt;code&gt;View&lt;/code&gt;左边界的距离，上边界距父&lt;code&gt;View&lt;/code&gt;上边界的距离，右边界距父&lt;code&gt;View&lt;/code&gt;左边界的距离，下边界距父&lt;code&gt;View&lt;/code&gt;上边界的距离。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isLayoutModeOptical …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;经过&lt;a href="http://www.viseator.xyz/2017/03/10/android_view_onMeasure/"&gt;上一篇&lt;/a&gt;介绍的&lt;code&gt;measure&lt;/code&gt;过程之后，各个&lt;code&gt;View&lt;/code&gt;的尺寸信息已经存储在了每个&lt;code&gt;View&lt;/code&gt;中，下面是&lt;code&gt;layout&lt;/code&gt;过程，&lt;code&gt;layout&lt;/code&gt;过程的目的是根据上一步中计算出的尺寸来正确设置各个&lt;code&gt;View&lt;/code&gt;及其后代的位置。这个过程首先被调用的是&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;layout()&lt;/code&gt;方法，&lt;code&gt;layout()&lt;/code&gt;的方法签名是&lt;code&gt;public void layout(int l, int t, int r, int b)&lt;/code&gt;，四个参数分别为左边界距父&lt;code&gt;View&lt;/code&gt;左边界的距离，上边界距父&lt;code&gt;View&lt;/code&gt;上边界的距离，右边界距父&lt;code&gt;View&lt;/code&gt;左边界的距离，下边界距父&lt;code&gt;View&lt;/code&gt;上边界的距离。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;isLayoutModeOptical&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mParent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
        &lt;span class="n"&gt;setOpticalFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;setFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;changed&lt;/code&gt;是用于传递给&lt;code&gt;onLayout()&lt;/code&gt;方法的参数，它指示了布局是否被改变。&lt;/p&gt;
&lt;p&gt;后面的表达式查看了父&lt;code&gt;View&lt;/code&gt;的布局模式是否需要显示边框，如需要，调用的是&lt;code&gt;setOpticalFrame()&lt;/code&gt;方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;setOpticalFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Insets&lt;/span&gt; &lt;span class="n"&gt;parentInsets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mParent&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;mParent&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;getOpticalInsets&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Insets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NONE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Insets&lt;/span&gt; &lt;span class="n"&gt;childInsets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getOpticalInsets&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;setFrame&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;left&lt;/span&gt;   &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parentInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;childInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;top&lt;/span&gt;    &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parentInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;childInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;right&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parentInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;childInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;parentInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;top&lt;/span&gt;  &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;childInsets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到这个方法读取了设置的边框值， 把原值加上边框值后还是调用了&lt;code&gt;setFrame()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setFrame()&lt;/code&gt;方法通过传入的参数确定了该&lt;code&gt;View&lt;/code&gt;最终的位置以及尺寸。&lt;/p&gt;
&lt;p&gt;可以看到，一个&lt;code&gt;View&lt;/code&gt;最终显示在什么位置以及它的尺寸是由&lt;code&gt;layout()&lt;/code&gt;方法决定的，&lt;code&gt;onMeasure()&lt;/code&gt;方法只是将测量出的&lt;code&gt;View&lt;/code&gt;期望具有的大小储存在&lt;code&gt;View&lt;/code&gt;中。一般情况下，我们会根据储存的这个尺寸来作为设定的依据。&lt;/p&gt;
&lt;p&gt;接下来&lt;code&gt;layout()&lt;/code&gt;方法会调用&lt;code&gt;onLayout()&lt;/code&gt;方法，（如果需要的话）我们需要重写这个方法来调用子&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;layout()&lt;/code&gt;方法。所以决定子&lt;code&gt;View&lt;/code&gt;如何显示的关键步骤就在这里，他们的位置和尺寸完全取决于这里调用它们的&lt;code&gt;layout()&lt;/code&gt;方法时传入的参数。当然一般情况下我们会根据子&lt;code&gt;View&lt;/code&gt;中的测量结果来设置这个值。这里拿&lt;code&gt;FrameLayout&lt;/code&gt;这个需要处理子&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;ViewGroup&lt;/code&gt;实例来举例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onLayout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;layoutChildren&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="cm"&gt;/* no force left gravity */&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;直接调用了&lt;code&gt;layoutChildren()&lt;/code&gt;：（省略部分行）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;layoutChildren&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="n"&gt;forceLeftGravity&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getChildCount&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentLeft&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPaddingLeftWithForeground&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentRight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;getPaddingRightWithForeground&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getPaddingTopWithForeground&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;parentBottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;getPaddingBottomWithForeground&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getChildAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMeasuredWidth&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMeasuredHeight&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;childLeft&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;childTop&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

            &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;verticalGravity&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Gravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;TOP&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;childTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topMargin&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Gravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CENTER_VERTICAL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;childTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parentBottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;parentTop&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topMargin&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bottomMargin&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;Gravity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;BOTTOM&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;childTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentBottom&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bottomMargin&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                    &lt;span class="n"&gt;childTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parentTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topMargin&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;childLeft&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;childTop&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;childLeft&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;childTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;省略了与获取布局属性相关的代码，可以看到：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-8行获取了父&lt;code&gt;View&lt;/code&gt;的位置数据并在18-31行用于确定最终的位置数据&lt;/li&gt;
&lt;li&gt;10-11行遍历了所有的子&lt;code&gt;View&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;12-13行获取了子&lt;code&gt;View&lt;/code&gt;中在上一步骤的测量过程中储存的宽和高，并用于第33行中设置最终的右边界与下边界&lt;/li&gt;
&lt;li&gt;第33行调用子&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;layout()&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;</content><category term="android"></category><category term="view"></category></entry><entry><title>Android View绘制之measure过程</title><link href="/android-viewhui-zhi-zhi-measureguo-cheng.html" rel="alternate"></link><published>2017-03-10T18:30:16+08:00</published><updated>2017-03-10T18:30:16+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-03-10:/android-viewhui-zhi-zhi-measureguo-cheng.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.viseator.xyz/2017/03/09/android_view_lifeCycle/"&gt;上一篇博客&lt;/a&gt;简单地介绍了&lt;code&gt;View&lt;/code&gt;绘制的生命周期， 从这篇博客开始将会对这个周期中一些有用的过程进行一个详细一些的介绍。这篇的主角就是在构造方法之后调用的&lt;code&gt;measure&lt;/code&gt;过程。&lt;/p&gt;
&lt;p&gt;为了演示，继承了&lt;code&gt;TextView&lt;/code&gt;来实现一个自定义的&lt;code&gt;View&lt;/code&gt;。注意这里继承的应该是&lt;code&gt;android.support.v7.widget.AppCompatTextView&lt;/code&gt;这个类。同时为了&lt;code&gt;xml&lt;/code&gt;文件的正常解析，我们需要实现&lt;code&gt;View&lt;/code&gt;的三个构造方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.viseator.xyz/2017/03/09/android_view_lifeCycle/"&gt;上一篇博客&lt;/a&gt;简单地介绍了&lt;code&gt;View&lt;/code&gt;绘制的生命周期， 从这篇博客开始将会对这个周期中一些有用的过程进行一个详细一些的介绍。这篇的主角就是在构造方法之后调用的&lt;code&gt;measure&lt;/code&gt;过程。&lt;/p&gt;
&lt;p&gt;为了演示，继承了&lt;code&gt;TextView&lt;/code&gt;来实现一个自定义的&lt;code&gt;View&lt;/code&gt;。注意这里继承的应该是&lt;code&gt;android.support.v7.widget.AppCompatTextView&lt;/code&gt;这个类。同时为了&lt;code&gt;xml&lt;/code&gt;文件的正常解析，我们需要实现&lt;code&gt;View&lt;/code&gt;的三个构造方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;VView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Context&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defStyleAttr&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;再通过完整包名的方法在&lt;code&gt;xml&lt;/code&gt;布局文件中创建我们的&lt;code&gt;View&lt;/code&gt;就可以直接显示了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;com.viseator.viewtest.VView&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100dp&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100dp&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@color/Gray&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里给了&lt;code&gt;TextView&lt;/code&gt;一个背景颜色便于后面的观察。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面就开始分析&lt;code&gt;measure&lt;/code&gt;过程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;measure&lt;/code&gt;是一个自顶向下的过程，即父&lt;code&gt;View&lt;/code&gt;会依次调用它的子&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;measure()&lt;/code&gt;方法来对它的子&lt;code&gt;View&lt;/code&gt;进行测量。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;measure()&lt;/code&gt;方法最终会调用&lt;code&gt;onMeasure()&lt;/code&gt;，真正的尺寸信息就是在&lt;code&gt;onMeasure()&lt;/code&gt;方法中最终确定的。所以我们需要做的就是在自定义&lt;code&gt;View&lt;/code&gt;中重写&lt;code&gt;onMeasure()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;那么子&lt;code&gt;View&lt;/code&gt;根据什么来确定自己应该具有的尺寸呢？当然不可能让子&lt;code&gt;View&lt;/code&gt;自由地决定自己的大小，父&lt;code&gt;View&lt;/code&gt;必然需要向子&lt;code&gt;View&lt;/code&gt;传递信息来帮助子&lt;code&gt;View&lt;/code&gt;来确定尺寸，而子&lt;code&gt;View&lt;/code&gt;则必须满足父&lt;code&gt;View&lt;/code&gt;的要求。查看&lt;code&gt;measure()&lt;/code&gt;的方法签名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;measure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的&lt;code&gt;widthMeasureSpec&lt;/code&gt;与&lt;code&gt;heightMeasureSpec&lt;/code&gt;就是存储这一信息的参数。它们的类型是&lt;code&gt;int&lt;/code&gt;，内部以高两位来存储测量的模式，低三十位为测量的大小，计算中使用了位运算来提高并优化效率。当然我们不必使用位运算来获得对应的数值，&lt;code&gt;View.MeasureSpec&lt;/code&gt;为我们提供了对应的方法。&lt;/p&gt;
&lt;p&gt;测量模式有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;EXACTLY&lt;/code&gt;：精确值模式，即子&lt;code&gt;View&lt;/code&gt;必须使用这一尺寸，并且保证它们的所有后代都在这个范围之内。当我们将控件的&lt;code&gt;layout_width&lt;/code&gt;、&lt;code&gt;layout_height&lt;/code&gt;属性指定为具体数值或&lt;code&gt;match_parent&lt;/code&gt;时，系统使用这一模式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;UNSPECIFIED&lt;/code&gt;：无限制模式，不对子&lt;code&gt;View&lt;/code&gt;施加任何限制，完全由子&lt;code&gt;View&lt;/code&gt;决定自己的大小。可以用于查看子&lt;code&gt;View&lt;/code&gt;想要的尺寸，比如可以把子&lt;code&gt;View&lt;/code&gt;的长度使用&lt;code&gt;EXACTLY&lt;/code&gt;模式限制在100，不限制宽度来查看子&lt;code&gt;View&lt;/code&gt;在长度为100情况想要的宽度。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AT_MOST&lt;/code&gt;：最大值模式，只限制子&lt;code&gt;View&lt;/code&gt;能具有的最大尺寸，子&lt;code&gt;View&lt;/code&gt;必须保证它和它的后代们都在这一范围之内。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;了解这些，我们就可以通过重写&lt;code&gt;onMeasure()&lt;/code&gt;来确定一个&lt;code&gt;View&lt;/code&gt;的尺寸。&lt;/p&gt;
&lt;p&gt;但在重写方法时要注意：必须调用&lt;code&gt;setMeasuredDimension()&lt;/code&gt; 来将最终尺寸存储在&lt;code&gt;View&lt;/code&gt;中，否则会抛出一个&lt;code&gt;IllegalStateException&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;com.viseator.viewtest.VView&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;wrap_content&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100dp&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@color/Gray&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;VView&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;widthMode: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;widthMode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;heightMode: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;heightMode&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width :&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;d&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TAG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;height :&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;log:&lt;/p&gt;
&lt;p&gt;&lt;img alt="output" src="/images/onMeasureOutput1.png"&gt;&lt;/p&gt;
&lt;p&gt;这段简单的代码验证了之前的说法，分别对宽高设置了&lt;code&gt;wrap_content&lt;/code&gt;和固定值，可以发现模式分别为&lt;code&gt;AT_MOST&lt;/code&gt;与&lt;code&gt;EXACTLY&lt;/code&gt;（以数值表示）。&lt;/p&gt;
&lt;p&gt;这里输出的宽高值是以像素为单位的，可以看到高度的期望值就是设置的大小，但&lt;code&gt;wrap_content&lt;/code&gt;期望的宽度值为1080（屏幕宽度），默认即为屏幕宽度，但最终计算得出的宽度值由于里面没有文字所以为0。&lt;/p&gt;
&lt;p&gt;同样地，&lt;code&gt;UNSPECIFIED&lt;/code&gt;模式给出的默认尺寸也是屏幕的宽/高。&lt;/p&gt;
&lt;p&gt;所以我们可以看到如果想要实现&lt;code&gt;wrap_content&lt;/code&gt;的效果，我们必须在&lt;code&gt;onMeasure&lt;/code&gt;中对&lt;code&gt;AT_MOST&lt;/code&gt;模式计算其内容宽/高并作为最终的宽/高，否则将以屏幕的宽/高进行填充。以&lt;code&gt;LinearLayout&lt;/code&gt;的源码为例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;useLargestChild&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heightMode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;AT_MOST&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;heightMode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UNSPECIFIED&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mTotalLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getVirtualChildAt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;mTotalLength&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;measureNullChild&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getVisibility&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GONE&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;getChildrenSkipCount&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LinearLayout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getLayoutParams&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// Account for negative margins&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;totalLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mTotalLength&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;mTotalLength&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalLength&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLength&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;largestChildHeight&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topMargin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bottomMargin&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;getNextLocationOffset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Add in our padding&lt;/span&gt;
&lt;span class="n"&gt;mTotalLength&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;mPaddingTop&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;mPaddingBottom&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mTotalLength&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这部分代码向我们展示了&lt;code&gt;LinearLayout&lt;/code&gt;处理子&lt;code&gt;View&lt;/code&gt;并计算所有的高度的情况。&lt;/p&gt;
&lt;p&gt;知道了这个调用过程，我们就可以真正地进行&lt;code&gt;onMeasure()&lt;/code&gt;的重写了。&lt;/p&gt;
&lt;p&gt;例如可以暴力指定&lt;code&gt;View&lt;/code&gt;尺寸：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;setMeasuredDimension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以为&lt;code&gt;AT_MOST&lt;/code&gt;与&lt;code&gt;UNSPECIFIED&lt;/code&gt;模式指定一个默认大小：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@Override&lt;/span&gt;
&lt;span class="kd"&gt;protected&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;onMeasure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;setMeasuredDimension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;measureSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;widthMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;measureSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;heightMeasureSpec&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;measureSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;measureSpec&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getMode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;measureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;measureSpec&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EXACTLY&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Default size&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;MeasureSpec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;measureSpec&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;至于更复杂的计算逻辑由于本人能力有限就不写demo了，如果以后实际中遇到需要的时候再作补充。&lt;/p&gt;</content><category term="android"></category><category term="view"></category></entry><entry><title>Android PropertyAnimation 属性动画（一）初探</title><link href="/android-propertyanimation-shu-xing-dong-hua-yi-chu-tan.html" rel="alternate"></link><published>2017-03-10T14:14:45+08:00</published><updated>2017-03-10T14:14:45+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-03-10:/android-propertyanimation-shu-xing-dong-hua-yi-chu-tan.html</id><summary type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;相对于静态的页面，动画往往能更直观地表达所需的信息，在UI开发过程中起着相当大的作用。&lt;/p&gt;
&lt;p&gt;Android为我们提供了一系列实现动画效果的方法，&lt;code&gt;PropertyAnimaiton&lt;/code&gt;是最常见也是最实用的一种，如同它的名字一样，它的实现方式是通过改变对象的一系列属性值来改变对象的状态， 例如动态地改变绘制的位置就可以实现绘制物体的移动效果，动态地改变对象的显示状态可以实现闪烁效果。&lt;/p&gt;
&lt;h2&gt;Animator概览&lt;/h2&gt;
&lt;p&gt;Android提供的实现属性动画的工具是&lt;code&gt;android.animation.Animator&lt;/code&gt;这个类，它的使用需要配合&lt;code&gt;animation&lt;/code&gt;包下的其他工具类，这个类的功能是什么，我们要如何使用它来实现属性动画呢？&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我们可以将&lt;code&gt;Animator&lt;/code&gt;理解为&lt;code&gt;Android&lt;/code&gt;为我们提供的一个按我们的需要在一定时间段内&lt;strong&gt;连续地&lt;/strong&gt;计算并返回值的工具，这个值可以是通用的整型、浮点型，也可以是我们自定义的类型。&lt;/p&gt;
&lt;p&gt;我们可以设置返回值的范围，并可以控制值变化的快慢，例如实现自由落体下落的物体时我们需要让高度值以一个越来越快的速度降低。&lt;/p&gt;
&lt;p&gt;这里的连续需要注意，实际上是不可能产生真正意义上的连续值的，但是如果&lt;strong&gt;在绘制过程中计算这个值的速度小于绘制一帧所需要的时间&lt;/strong&gt;，那么我们就可以在视觉上认为这个值是在连续改变的。这一点也是理解其作用的关键：我们很难去写出一个可以随时获取连续值的工具，而&lt;code&gt;Animator&lt;/code&gt;正是一个满足我们这个需求的一个通用工具。&lt;/p&gt;
&lt;p&gt;通过将&lt;code&gt;Animator&lt;/code&gt;与&lt;code&gt;View&lt;/code&gt;的绘制过程结合 …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;相对于静态的页面，动画往往能更直观地表达所需的信息，在UI开发过程中起着相当大的作用。&lt;/p&gt;
&lt;p&gt;Android为我们提供了一系列实现动画效果的方法，&lt;code&gt;PropertyAnimaiton&lt;/code&gt;是最常见也是最实用的一种，如同它的名字一样，它的实现方式是通过改变对象的一系列属性值来改变对象的状态， 例如动态地改变绘制的位置就可以实现绘制物体的移动效果，动态地改变对象的显示状态可以实现闪烁效果。&lt;/p&gt;
&lt;h2&gt;Animator概览&lt;/h2&gt;
&lt;p&gt;Android提供的实现属性动画的工具是&lt;code&gt;android.animation.Animator&lt;/code&gt;这个类，它的使用需要配合&lt;code&gt;animation&lt;/code&gt;包下的其他工具类，这个类的功能是什么，我们要如何使用它来实现属性动画呢？&lt;/p&gt;
&lt;!--more--&gt;

&lt;p&gt;我们可以将&lt;code&gt;Animator&lt;/code&gt;理解为&lt;code&gt;Android&lt;/code&gt;为我们提供的一个按我们的需要在一定时间段内&lt;strong&gt;连续地&lt;/strong&gt;计算并返回值的工具，这个值可以是通用的整型、浮点型，也可以是我们自定义的类型。&lt;/p&gt;
&lt;p&gt;我们可以设置返回值的范围，并可以控制值变化的快慢，例如实现自由落体下落的物体时我们需要让高度值以一个越来越快的速度降低。&lt;/p&gt;
&lt;p&gt;这里的连续需要注意，实际上是不可能产生真正意义上的连续值的，但是如果&lt;strong&gt;在绘制过程中计算这个值的速度小于绘制一帧所需要的时间&lt;/strong&gt;，那么我们就可以在视觉上认为这个值是在连续改变的。这一点也是理解其作用的关键：我们很难去写出一个可以随时获取连续值的工具，而&lt;code&gt;Animator&lt;/code&gt;正是一个满足我们这个需求的一个通用工具。&lt;/p&gt;
&lt;p&gt;通过将&lt;code&gt;Animator&lt;/code&gt;与&lt;code&gt;View&lt;/code&gt;的绘制过程结合，就可以实现绝大多数的动画效果， 但是&lt;code&gt;Animator&lt;/code&gt;也不只局限在使用在绘制动画，只要是有相似需求的地方都可以使用它来实现， 同时由于属性动画只针对属性进行修改，与被修改对象之前几乎没有耦合，不需要对被修改对象作出改变，可以设置方式也多种多样，这些都是动画的另一种实现方法&lt;code&gt;ViewAnimator&lt;/code&gt;所无法做到的，所以我属性动画是现在实现动画效果的普遍做法。&lt;/p&gt;
&lt;h2&gt;使用Animator&lt;/h2&gt;
&lt;h3&gt;Animator子类&lt;/h3&gt;
&lt;p&gt;下面就来看看如何使用&lt;code&gt;Animator&lt;/code&gt;满足我们的需求。&lt;/p&gt;
&lt;p&gt;我们使用&lt;code&gt;Animator&lt;/code&gt;可以分为两个步骤，一是进行数值的计算，二是将计算出的数值设置到对应的对象上。而&lt;code&gt;Animator&lt;/code&gt;有着三个子类：&lt;code&gt;ValueAnimator&lt;/code&gt; &lt;code&gt;ObjectAnimator&lt;/code&gt; &lt;code&gt;AnimatorSet&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ValueAnimator&lt;/code&gt;实现了上述过程的第一个步骤：进行数值的计算。第二个步骤则需要我们重写它的回调在值发生改变时候手动地为对象更新属性值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ObjectAnimator&lt;/code&gt;则在其基础上进行了进一步的封装，加入了一些方法使得它可以绑定一个对象，在数值改变的同时对对象的属性进行更新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnimatorSet&lt;/code&gt;可以对&lt;code&gt;Animator&lt;/code&gt;进行组合，让它们之间进行联动，例如可以设置一个动画根据另一个动画的状态来决定是否开始、暂停或停止。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以看到，&lt;code&gt;ValueAnimator&lt;/code&gt;提供了一个&lt;code&gt;Animator&lt;/code&gt;最核心的内容，也是使用中最为灵活的一个。&lt;code&gt;ObjectAnimator&lt;/code&gt;由于绑定了相应的对象，在使用上会受一些限制。&lt;code&gt;AnimatorSet&lt;/code&gt;专用于需要组合动画的场景。&lt;/p&gt;
&lt;h3&gt;ValueAnimator&lt;/h3&gt;
&lt;p&gt;在这篇博客中，我们关注最为核心的&lt;code&gt;ValueAnimator&lt;/code&gt;。&lt;/p&gt;
&lt;h4&gt;关键属性&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator&lt;/code&gt;对象内部维护了一系列属性来保存所需的各种信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Duration&lt;/code&gt;：动画的持续时间，通过&lt;code&gt;setDuration()&lt;/code&gt;方法设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Repeat count and behavior&lt;/code&gt;：重复计数与重复模式，我们可以通过设置这两个属性来控制动画是否重复以及重复的次数，通过&lt;code&gt;setRepeatCount()&lt;/code&gt;与&lt;code&gt;setRepeatMode()&lt;/code&gt;方法设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Frame refresh delay&lt;/code&gt;：帧刷新延迟，也就是计算两帧动画之间的间隔时间，但这个时间只是&lt;code&gt;Animator&lt;/code&gt;尽力去保持的值，具体的间隔时间会由于系统负载与性能的不同而不同，同时设置它的方法为一个静态方法：&lt;code&gt;ValueAnimator.setFrameDelay()&lt;/code&gt;，会被设置到所有的&lt;code&gt;Animator&lt;/code&gt;上，这是因为这些&lt;code&gt;Animator&lt;/code&gt;都在同一个时间循环中。这个属性也有可能会被忽略如果动画系统采用了内部的计时来源，例如&lt;code&gt;vsync&lt;/code&gt;来计算属性。同时这个方法需要在与&lt;code&gt;start()&lt;/code&gt;方法相同的进程中调用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Time interpolation&lt;/code&gt;：时间插值器，是我们实现不同动画效果的关键，每一时刻所返回的数值由它决定，后文会详细讲&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;初始化与TypeEvaluator&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator&lt;/code&gt;对象的构造函数只由内部使用，获取&lt;code&gt;ValueAnimator&lt;/code&gt;对象的方法是调用它的工厂方法：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator.ofArgb()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator.ofInt()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator.ofFloat()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator.ofObject()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ValueAnimator.ofPropertyValuesHolder()&lt;/code&gt; //本篇未涉及，下一篇进行讲解&lt;/p&gt;
&lt;p&gt;前三个可以看作是&lt;code&gt;ValueAnimator&lt;/code&gt;为我们提供的初始化方式，它们的参数都是对应类型的长度可变参数:&lt;code&gt;(Type ...values)&lt;/code&gt;，我们需要提供一个以上的参数，&lt;code&gt;ValueAnimator&lt;/code&gt;最终提供的值会在这些值之前变动。&lt;/p&gt;
&lt;p&gt;一般情况下这里提供的&lt;code&gt;Argb&lt;/code&gt;（用于颜色值的变化）和整型、浮点值基本可以满足我们的需求，但是某些时候我们需要结果是我们自定义的一些对象，这个时候就需要用到&lt;code&gt;TypeEvaluator&amp;lt;&amp;gt;&lt;/code&gt;接口了，与这个接口对应的工厂方法是&lt;code&gt;ValueAnimator.ofObject()&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ValueAnimator&lt;/span&gt; &lt;span class="nf"&gt;ofObject&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TypeEvaluator&lt;/span&gt; &lt;span class="n"&gt;evaluator&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这里的可变参数类型变为了&lt;code&gt;Object&lt;/code&gt;，同时还需要我们提供一个&lt;code&gt;TypeEvaluator&amp;lt;&amp;gt;&lt;/code&gt;，用于“告诉”&lt;code&gt;Animator&lt;/code&gt;如何返回这个&lt;code&gt;Object&lt;/code&gt;值。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;TypeEvaluator&amp;lt;&amp;gt;&lt;/code&gt;接口并不复杂，只有一个方法需要我们重写：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;evaluate&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;fraction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;startValue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;endValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;startValue&lt;/code&gt;与&lt;code&gt;endValue&lt;/code&gt;非常好理解，就是我们在获取&lt;code&gt;Animator&lt;/code&gt;时指定的值的起始值和结束值。类型与返回类型一致，当然都是我们自定义的类型。&lt;/p&gt;
&lt;p&gt;这里的&lt;code&gt;fraction&lt;/code&gt;就是决定我们最终返回值的关键参数。我们可以把这个&lt;code&gt;fraction&lt;/code&gt;理解为&lt;code&gt;animator&lt;/code&gt;提供给我们的最终的数值改变的比例，以小数表示，小于0表示低于&lt;code&gt;startValue&lt;/code&gt;，大于0表示超出&lt;code&gt;endValue&lt;/code&gt;，0-1之间表示在&lt;code&gt;startValue&lt;/code&gt;与&lt;code&gt;endValue&lt;/code&gt;之间。我们要做的就是把这个值转换为在起始和结果范围之间的合适的对象值。&lt;/p&gt;
&lt;p&gt;例如，对于基本的浮点类型，默认的&lt;code&gt;FloatEvaluator&lt;/code&gt;是这样的：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Float&lt;/span&gt; &lt;span class="nf"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;fraction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;startValue&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="n"&gt;endValue&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;startFloat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;startValue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;floatValue&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;startFloat&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endValue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;floatValue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startFloat&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到，就是相当于把&lt;code&gt;fraction&lt;/code&gt;所表示的比例“投射”到了我们所需要的数据对象上，这里是浮点类型。如果使用我们的自定义类型，我们必须为自己的类型定义这样的操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;这里要求我们必须将&lt;code&gt;fraction&lt;/code&gt;&lt;strong&gt;线性&lt;/strong&gt;地反应到对应的类型上，因为&lt;code&gt;fraction&lt;/code&gt;反映的是最终的动画进度，我们必须如实地按照这个进度改变我们的属性，所以需要将result = x0 + t * (x1 - x0)`这样的形式反映到我们自己的对象上。&lt;/p&gt;
&lt;p&gt;自定义了&lt;code&gt;TypeEvaluator&lt;/code&gt;以后就可以作为参数使用在上面的&lt;code&gt;obObject()&lt;/code&gt;工厂方法中了。&lt;/p&gt;
&lt;h4&gt;插补细分器(&lt;code&gt;Interpolators&lt;/code&gt;)&lt;/h4&gt;
&lt;p&gt;下面介绍使用&lt;code&gt;ValueAnimator&lt;/code&gt;控制值变化过程中最为重要的一个概念：插补细分器(&lt;code&gt;Interpolators&lt;/code&gt;)。&lt;/p&gt;
&lt;p&gt;它实际上是一个关于时间的函数， 根据时刻的不同来返回不同的值，进而来控制最后的输出的值。那么它是如何表示的呢？&lt;/p&gt;
&lt;p&gt;系统为我们提供了一系列预置的&lt;code&gt;Interpolators&lt;/code&gt;，以较常用的&lt;code&gt;LinearInterpolater&lt;/code&gt;为例，顾名思义，它是一个线性的插补细分器，意味着输入与输出呈线性关系：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getInterpolation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入输出的关键函数就是这个&lt;code&gt;getInterpolation()&lt;/code&gt;了，可以看到，参数与返回值都是&lt;code&gt;float&lt;/code&gt;类型，&lt;code&gt;input&lt;/code&gt;的值在0-1之间，结合前面，我们可以很容易理解，这个&lt;code&gt;input&lt;/code&gt;就是一个以0-1之间的小数表示的过去的时间值，例如整个动画是1000ms，当&lt;code&gt;input&lt;/code&gt;为0.25的时候意味着现在的时间过去了250ms。&lt;/p&gt;
&lt;p&gt;而返回值就是经过我们的转换，表示出的动画应该进行的时间的比例，这里由于是线性的，所以可以直接返回&lt;code&gt;input&lt;/code&gt;，这个值最后会到哪里呢？自然就是给我们前面介绍的&lt;code&gt;TypeEvaluator&lt;/code&gt;。下面一段源码展示了这个过程：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mInterpolator&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fraction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mInterpolator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getInterpolation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fraction&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mEvaluator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;evaluate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fraction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mFirstKeyframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;mLastKeyframe&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValue&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;作为&lt;code&gt;getInterpolation()&lt;/code&gt;参数的&lt;code&gt;fraction&lt;/code&gt;代表着过去的时间比例，这里调用我们设置的&lt;code&gt;Interpolator&lt;/code&gt;来更新这个&lt;code&gt;fraction&lt;/code&gt;，现在这个&lt;code&gt;fraction&lt;/code&gt;表示的就是动画已经进行的比例，下一步就要根据它来获取对应的对象值（调用了我们之间谈到过的&lt;code&gt;evaluate()&lt;/code&gt;方法，这里的&lt;code&gt;KeyFrame&lt;/code&gt;的概念会在之后的博客讲到），后面的两个参数就是传递给&lt;code&gt;evaluate&lt;/code&gt;的起始与结束范围。&lt;/p&gt;
&lt;p&gt;最终，我们就获得了一个按照我们设定的&lt;code&gt;Interpolator&lt;/code&gt;返回的动画属性值。&lt;/p&gt;
&lt;p&gt;如果想要实现加速效果呢？Android同样为我们提供了现成的&lt;code&gt;AccelerateInterpolator&lt;/code&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;getInterpolation&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mFactor&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mf"&gt;1.0f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mDoubleFactor&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;同样很简洁，这里用到了&lt;code&gt;mFactor&lt;/code&gt;与&lt;code&gt;mDoubleFactor&lt;/code&gt;分别表示我们在构造函数里面设置的指数值：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;AccelerateInterpolator&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;mFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mDoubleFactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mFactor&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果我们设置的为1，会返回&lt;code&gt;input&lt;/code&gt;的平方，其他值则会返回&lt;code&gt;input&lt;/code&gt;的&lt;code&gt;mDoubleFactor&lt;/code&gt;次方，使得动画属性可以以不同的函数曲线形式变化。&lt;/p&gt;
&lt;p&gt;如果我们要实现自己的&lt;code&gt;Interpolator&lt;/code&gt;呢？只需要实现&lt;code&gt;TimeInterpolator&lt;/code&gt;接口，这个接口只需要我们实现一个&lt;code&gt;getInterpolation&lt;/code&gt;方法。我们可以根据&lt;code&gt;input&lt;/code&gt;值返回不同的值来返回不同的值表示动画的进度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;返回值的范围不一定要在0-1之间，小于0或大小1的值可以表示超出预设范围的目标值。&lt;/p&gt;
&lt;p&gt;这篇博客到此结束，在下一篇博客中将会以一个绘制自由落体的弹跳小球的示例来演示如何使用&lt;code&gt;Animator&lt;/code&gt;与介绍它的回调函数。&lt;/p&gt;</content><category term="android"></category><category term="UI"></category><category term="animation"></category></entry><entry><title>汇编语言综合研究</title><link href="/hui-bian-yu-yan-zong-he-yan-jiu.html" rel="alternate"></link><published>2017-03-10T10:35:37+08:00</published><updated>2017-03-10T10:35:37+08:00</updated><author><name>Zhihao Chen</name></author><id>tag:None,2017-03-10:/hui-bian-yu-yan-zong-he-yan-jiu.html</id><summary type="html">&lt;h2&gt;研究试验1 搭建一个精简的C语言开发环境&lt;/h2&gt;
&lt;p&gt;TC进行连接需要如下的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C0S.OBJ&lt;/li&gt;
&lt;li&gt;CS.LIB&lt;/li&gt;
&lt;li&gt;EMU.LIB&lt;/li&gt;
&lt;li&gt;GRAPHICS.LIB&lt;/li&gt;
&lt;li&gt;MATHS.LIB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;研究试验2 使用寄存器&lt;/h2&gt;
&lt;ol&gt;
&lt;li _="%" endcodeblock&gt;编一个程序ur1.c
    {% codeblock lang:c %}
    main ()
    {
        _AX = 1;
        _BX = 1;
        _CX = 2;
        _AX = _BX + _CX;
        _AH = _BL + _CL;
        _AL = _BH + _CH;
    }&lt;/li&gt;
&lt;li&gt;用Debug加载ur1.exe，用u命令查看ur1.exe编译后的机器码和汇编代码。
    思考：main函数的代码在什么段中？用Debug怎样找到ur1.exe中main函数的代码？
    回答：main函数的代码在CS段中，需要知道main函数的偏移地址才能找到main函数的代码。&lt;/li&gt;
&lt;li&gt;用下面的方法打印出ur1.exe被加载运行时，main函数在代码段中的偏移地址 …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h2&gt;研究试验1 搭建一个精简的C语言开发环境&lt;/h2&gt;
&lt;p&gt;TC进行连接需要如下的文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C0S.OBJ&lt;/li&gt;
&lt;li&gt;CS.LIB&lt;/li&gt;
&lt;li&gt;EMU.LIB&lt;/li&gt;
&lt;li&gt;GRAPHICS.LIB&lt;/li&gt;
&lt;li&gt;MATHS.LIB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;研究试验2 使用寄存器&lt;/h2&gt;
&lt;ol&gt;
&lt;li _="%" endcodeblock&gt;编一个程序ur1.c
    {% codeblock lang:c %}
    main ()
    {
        _AX = 1;
        _BX = 1;
        _CX = 2;
        _AX = _BX + _CX;
        _AH = _BL + _CL;
        _AL = _BH + _CH;
    }&lt;/li&gt;
&lt;li&gt;用Debug加载ur1.exe，用u命令查看ur1.exe编译后的机器码和汇编代码。
    思考：main函数的代码在什么段中？用Debug怎样找到ur1.exe中main函数的代码？
    回答：main函数的代码在CS段中，需要知道main函数的偏移地址才能找到main函数的代码。&lt;/li&gt;
&lt;li&gt;用下面的方法打印出ur1.exe被加载运行时，main函数在代码段中的偏移地址。
    {% codeblock lang:c %}
    main ()
    {
        printf("%x\n", main);
    }
    {% endcodeblock %}
    思考：为什么这个程序能够打印出main函数在代码段中的偏移地址？
    回答：由学过的知识可知，C语言中用指针表示地址，这里的printf打印了main函数的入口地址，也即main函数在代码段中的偏移地址。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Debug加载ur1.exe，根据上面打印出的main函数的偏移地址，用u命令察看main函数的汇编代码。仔细找到ur1.c中每条C语句对应的汇编代码。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;地址&lt;/th&gt;
&lt;th align="center"&gt;汇编语句&lt;/th&gt;
&lt;th align="center"&gt;C语句&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FA&lt;/td&gt;
&lt;td align="center"&gt;PUSH BP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FB&lt;/td&gt;
&lt;td align="center"&gt;MOV BP,SP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FD&lt;/td&gt;
&lt;td align="center"&gt;MOV AX,0001&lt;/td&gt;
&lt;td align="center"&gt;_AX = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0200&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,0001&lt;/td&gt;
&lt;td align="center"&gt;_BX = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0203&lt;/td&gt;
&lt;td align="center"&gt;MOV CX,0002&lt;/td&gt;
&lt;td align="center"&gt;_CX = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0206&lt;/td&gt;
&lt;td align="center"&gt;MOV AX,BX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0208&lt;/td&gt;
&lt;td align="center"&gt;ADD AX,CX&lt;/td&gt;
&lt;td align="center"&gt;_AX = _BX + _CX&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:020A&lt;/td&gt;
&lt;td align="center"&gt;MOV AH,BL&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:020C&lt;/td&gt;
&lt;td align="center"&gt;ADD AH,CL&lt;/td&gt;
&lt;td align="center"&gt;_AH = _BL + _CL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:020E&lt;/td&gt;
&lt;td align="center"&gt;MOV AL,BH&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0210&lt;/td&gt;
&lt;td align="center"&gt;ADD AL,CH&lt;/td&gt;
&lt;td align="center"&gt;_AL = _BH + _CH&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0212&lt;/td&gt;
&lt;td align="center"&gt;POP BP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0213&lt;/td&gt;
&lt;td align="center"&gt;RET&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意：在这里，对于main函数汇编代码开始处的“push bp mov bp,sp”和结尾处的“pop bp”，这里只了解到：这是C编译器安排的为函数中可能使用到bp寄存器而设置的，就可以了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过main函数后面有ret指令，我们可以设想：C语言将函数实现为汇编语言中的子程序。研究下面程序的汇编代码，验证我们的设想。
    {% codeblock lang:c %}
    void f(void);&lt;/p&gt;
&lt;p&gt;main()
{
    _AX = 1; _BX = 1; _CX = 2;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;void f(void)
{
    _AX = _BX + _CX;
}
{% endcodeblock %}
编译、连接后用Debug查看汇编代码如下：
{% codeblock lang:x86asm %}
PUSH BP
MOV BP,SP
MOV AX,0001
MOV BX,0001
MOV CX,0002
CALL 020B
POP BP
RET
PUSH BP
MOV BP,SP
MOV AX,BX
ADD AX,CX
POP BP
RET
{% endcodeblock %}
设想正确&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;研究试验3 使用内存空间&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编一个程序um1.c：
    {% codeblock lang:c %}
    main()
    {
        &lt;em&gt;(char &lt;/em&gt;)0x2000='a';
        &lt;em&gt;(int &lt;/em&gt;)0x2000=0xf;
        &lt;em&gt;(char far &lt;/em&gt;)0x20001000='a';&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_AX=0x2000;
*(char *)_AX=&amp;#39;b&amp;#39;;

_BX=0x1000;
*(char *)(_BX+_BX)=&amp;#39;a&amp;#39;;
*(char far *)(0x20001000+_BX)=*(char *)_AX;
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock&gt;}&lt;/p&gt;
&lt;p&gt;把um1.c保存在C:\MINIC下，编译，连接生成um1.exe。然后用Debug加载um1.exe，对main函数的汇编代码进行分析，找到每条C语句对应的汇编代码；对main函数进行单步跟踪，察看相关内存单元的内容。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;地址&lt;/th&gt;
&lt;th align="center"&gt;汇编语句&lt;/th&gt;
&lt;th align="center"&gt;C语句&lt;/th&gt;
&lt;th align="center"&gt;相关内存单元&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FA&lt;/td&gt;
&lt;td align="center"&gt;PUSH BP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FB&lt;/td&gt;
&lt;td align="center"&gt;MOV BP,SP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:01FD&lt;/td&gt;
&lt;td align="center"&gt;MOV BYTE PTR [2000],61&lt;/td&gt;
&lt;td align="center"&gt;*(char *)0x2000='a'&lt;/td&gt;
&lt;td align="center"&gt;07C4:2000 -&amp;gt; 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0202&lt;/td&gt;
&lt;td align="center"&gt;MOV WORD PTR [2000],000F&lt;/td&gt;
&lt;td align="center"&gt;*(int *)0x2000=0xf&lt;/td&gt;
&lt;td align="center"&gt;07C4:2000-07C4:2001 -&amp;gt; 0F 00&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0208&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,2000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:020B&lt;/td&gt;
&lt;td align="center"&gt;MOV ES,BX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:020D&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,1000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0210&lt;/td&gt;
&lt;td align="center"&gt;ES:&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0211&lt;/td&gt;
&lt;td align="center"&gt;MOV BYTE PTR [BX],61&lt;/td&gt;
&lt;td align="center"&gt;*(char far *)0x20001000='a'&lt;/td&gt;
&lt;td align="center"&gt;2000:1000 -&amp;gt; 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0214&lt;/td&gt;
&lt;td align="center"&gt;MOV AX,2000&lt;/td&gt;
&lt;td align="center"&gt;_AX=0x2000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0217&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,AX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0219&lt;/td&gt;
&lt;td align="center"&gt;MOV BYTE PTR [BX],62&lt;/td&gt;
&lt;td align="center"&gt;*(char *)_AX='b'&lt;/td&gt;
&lt;td align="center"&gt;07C4:2000 -&amp;gt; 62&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:021C&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,1000&lt;/td&gt;
&lt;td align="center"&gt;_BX=0x1000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:021F&lt;/td&gt;
&lt;td align="center"&gt;ADD BX,BX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0221&lt;/td&gt;
&lt;td align="center"&gt;MOV BYTE PTR [BX],61&lt;/td&gt;
&lt;td align="center"&gt;*(char *)(_BX + _BX)='a'&lt;/td&gt;
&lt;td align="center"&gt;07C4:2000 -&amp;gt; 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0224&lt;/td&gt;
&lt;td align="center"&gt;MOV BX,AX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0226&lt;/td&gt;
&lt;td align="center"&gt;MOV AL,[BX]&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0228&lt;/td&gt;
&lt;td align="center"&gt;XOR CX,CX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:022A&lt;/td&gt;
&lt;td align="center"&gt;ADD BX,1000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:022E&lt;/td&gt;
&lt;td align="center"&gt;ADC CX,2000&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0232&lt;/td&gt;
&lt;td align="center"&gt;MOV ES,CX&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0234&lt;/td&gt;
&lt;td align="center"&gt;ES:&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0235&lt;/td&gt;
&lt;td align="center"&gt;MOV [BX],AL&lt;/td&gt;
&lt;td align="center"&gt;*(char far *)(0x20001000+_BX)=*(char *)_AX&lt;/td&gt;
&lt;td align="center"&gt;2000:3000 -&amp;gt; 61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0237&lt;/td&gt;
&lt;td align="center"&gt;POP BP&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;076A:0238&lt;/td&gt;
&lt;td align="center"&gt;RET&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;td align="center"&gt;----&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;编一个程序，用一条C语句实现在屏幕的中间显示一个绿色的字符"a"。
    {% codeblock lang:c %}
    main()
    {
        &lt;em&gt;(int far &lt;/em&gt;)0xb80007d0=0x261
    }&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析下面程序中所有函数的汇编代码，思考相关的问题。
    {% codeblock lang:c %}
    int a1, a2, a3;
    void f(void);
    main()
    {
        int b1, b2, b3;
        a1 = 0xa1; a2 = 0xa2; a3 = 0xa3;
        b1 = 0xb1; b2 = 0xb2; b3 = 0xb3;
    }
    void f(void)
    {
        int c1, c2, c3;
        a1 = 0x0fa1; a2 = 0x0fa2; a3 = 0x0fa3;
        c1 = 0xc1; c2 = 0xc2; c3 = 0xc3;
    }
    {% endcodeblock %}
    问题：C语言将全局变量存放在哪里？将局部变量存放在哪里？每个函数开头的“push bp mov bp,sp”有何含义？
    程序中main函数的汇编代码如下：
    {% codeblock lang:x86asm %}
    PUSH BP
    MOV BP, SP
    SUB SP, 6
    MOV WORD PTR [01A6], 00A1
    MOV WORD PTR [01A8], 00A2
    MOV WORD PTR [01AA], 00A3
    MOV WORD PTR [BP-6], 00B1
    MOV WORD PTR [BP-4], 00B2
    MOV WORD PTR [BP-2], 00B3
    MOV SP, BP
    POP BP
    RET
    {% endcodeblock %}
    程序中f函数的汇编代码如下：
    {% codeblock lang:x86asm %}
    PUSH BP
    MOV BP, SP
    SUB SP, 6
    MOV WORD PTR [01A6], 0FA1
    MOV WORD PTR [01A8], 0FA2
    MOV WORD PTR [01AA], 0FA3
    MOV WORD PTR [BP-6], 00C1
    MOV WORD PTR [BP-4], 00C2
    MOV WORD PTR [BP-2], 00C3
    MOV SP, BP
    POP BP
    RET
    {% endcodeblock %}
    答案：
    C语言将全局变量存放在内存中，将局部变量存放在栈中，每个函数开头的push bp以及mov bp,sp是为了保护与还原现场。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;分析下面程序的汇编代码，思考相关的问题。
    {% codeblock lang:c %}
    int f(void);&lt;/p&gt;
&lt;p&gt;int a,b,ab;&lt;/p&gt;
&lt;p&gt;main()
{
    int c;
    c = f();
}
int f(void)
{
    ab=a+b;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;return ab;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
{% endcodeblock %}
问题：C语言将函数的返回值存放在哪里？
程序中main函数的汇编代码如下：
{% codeblock lang:x86asm %}
PUSH BP
MOV BP, SP
SUB SP, 2
CALL 020A
MOV [BP-2], AX
MOV SP, BP
POP BP
RET
{% endcodeblock %}
程序中f函数的汇编代码如下：
{% codeblock lang:x86asm %}
PUSH BP
MOV BP, SP
MOV AX, [01A6]
ADD AX, [01A8]
MOV [01AA], AX
MOV AX, [01AA]
JMP 021C
POP BP
RET
{% endcodeblock %}
答案：
在该情况下，C语言将返回值存放在通用寄存器AX中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面的程序向安全的内存空间写入从“a”到“h”8个字符，理解程序的含义，深入理解相关的知识。（注意：请自己学习、研究malloc函数的用法）
    {% codeblock lang:c %}
    #define Buffer ((char &lt;em&gt;) * (int far &lt;/em&gt;)0x02000000)&lt;/p&gt;
&lt;p&gt;main()
{
    Buffer = (char *)malloc(20);&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Buffer[10] = 0;

while(Buffer[10]!=8)
{
    Buffer[Buffer[10]]=&amp;#39;a&amp;#39;+Buffer[10];
    Buffer[10]++;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
{% endcodeblock %}
理解：
程序通过malloc分配大小为20字节的空间给并将其地址存入Buffer所指向的空间即0200:0000中。随后，通过一个while循环将这20个字节的空间的0-7个字节分别赋予对应的字符，并且用第10个字节计数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;研究试验4 不用main函数编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把程序F.C保存在C:\MINIC下，对其进行编译，连接，思考相关的问题。
    问题：
    ①编译和连接哪个环节会出问题？
    ②显示出的错误信息是什么？
    ③这个错误信息可能和哪个文件有关？
    答案：
    ①连接环节出现了错误
    ②在C0S模块中未定义的标号_main
    ③和C0S.OBJ这个文件有关&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用学习汇编语言时使用的LINK.EXE对TC.EXE生成的F.OBJ文件进行连接，生成F.EXE。用DEBUG加载F.EXE，察看整个程序的汇编代码。思考相关的问题。
    问题：
    ①F.EXE的程序代码总共有多少字节？
    ②F.EXE的程序能正确返回吗？
    ③F函数的偏移地址是多少？
    答案：
    ①F.EXE的程序代码总共有1DH个字节
    ②F.EXE的程序不能正确的返回
    ③F函数的偏移地址为0&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个程序M.C。
    {% codeblock lang:c %}
    main ()
    {
        &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000+160&lt;em&gt;10+80)='a';
        &lt;/em&gt;(char far &lt;em&gt;)(0xb8000000+160&lt;/em&gt;10+81)=2;
    }
    {% endcodeblock %}
    用TC.EXE对M.C进行编译，连接，生成M.EXE，用Debug察看M.EXE整个程序的汇编代码。思考相关的问题。
    问题：
    ①M.EXE的程序代码总共有多少字节？
    ②M.EXE的程序能正确返回吗？
    ③M.EXE程序中的main函数和F.EXE中的f函数的汇编代码有何不同？
    答案：
    ①M.EXE的程序代码总共有5F5H个字节
    ②M.EXE的程序能正确返回
    ③M.EXE程序中的main函数和F.EXE中的f函数的汇编代码没有不同&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Debug对m.exe进行跟踪：
    ①找到对main函数进行调用的指令的地址
    ②找到整个程序返回的指令
    注意：使用g命令和p命令。
    答案：
    ①对main函数进行调用的指令的地址为076A:011A CALL 01FA
    ②整个程序返回的指令为076A:0156 INT 21&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;思考如下几个问题：
    ①对main函数调用的指令和程序返回的指令是哪里来的？
    ②没有main函数时，出现的错误信息里有和“C0S”相关的信息；而前面在搭建开发环境时，没有C0S.OBJ文件TC.EXE就无法对程序进行连接。是不是TC.EXE把C0S.OBJ和用户程序的.OBJ一起进行连接生成.EXE文件？
    ③对用户程序的main函数进行调用的指令和程序返回的指令是否就来自C0S.OBJ文件？
    ④我们如何看到C0S.OBJ文件中的程序代码呢？
    ⑤C0S.OBJ文件里有我们设想的代码吗？
    回答：
    ①对main函数调用的指令和程序返回的指令是来自于其他的文件而非编译后的文件。
    ②是的
    ③是的
    ④用LINK.EXE对其进行连接即可
    ⑤有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用LINK.EXE对C:\MINIC目录下的C0S.OBJ进行连接，生成C0S.EXE。
    用Debug分别察看C0S.EXE和M.EXE的汇编代码。注意：从头开始察看，两个文件中的程序代码有和相同之处？
    两个程序的代码基本相同，且都是在011A调用了CALL指令，在0156调用了INT 21中断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用Debug找到M.EXE中调用main函数的CALL指令的偏移地址，从这个偏移地址开始向后察看10条指令；然后用Debug加载C0S.EXE，从相同的偏移地址开始向后察看10条指令，对两处的指令进行对比。
    M.EXE和C0S.EXE在偏移地址011A之后的10条指令除了跳转指令的跳转地址有所不同外几乎完全相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下面，我们用汇编语言编一个程序C0S.ASM，然后把它编译为C0S.OBJ，替代C:\MINIC目录下的C0S.OBJ。
    程序C0S.ASM：
    {% codeblock lang:x86asm %}
    assume cs:code
    data segment
        db 128 dup (0)
    data ends&lt;/p&gt;
&lt;p&gt;code segment
start:  mov ax, data
        mov ds, ax
        mov ss, ax
        mov sp, 108&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    call s

    mov ax, 4c00h
    int 21h
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;s:      &lt;/p&gt;
&lt;p&gt;code ends&lt;/p&gt;
&lt;p _="%" endcodeblock&gt;end start&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p _="%" endcodeblock&gt;在C:\MINIC目录下，用TC.EXE将F.C重新进行编译，连接，生成F.EXE。这次能通过连接吗？F.EXE可以正确运行吗？用Debug察看F.EXE的汇编代码。
    能通过连接，可以正确运行，汇编代码如下：
    {% codeblock lang:x86asm %}
    MOV AX,076A
    MOV DS,AX
    MOV SS,AX
    MOV SP,0080
    CALL 0012
    MOV AX,4C00
    INT 21
    MOV BP,SP
    MOV BX,B800
    MOV ES,BX
    MOV BX,0690
    ES:
    MOV BYTE PTR [BX],61
    MOV BX,B800
    MOV ES,BX
    MOV BX,0691
    ES:
    MOV BYTE PTR [BX],02
    POP BP
    RET
    ...&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在新的C0S.OBJ的基础上，写一个新的F.C，向安全的内存空间写入从“a”到“h”的8个字符，分析、理解F.C。
    程序F.C：
    {% codeblock lang:c %}
    #define Buffer ((char &lt;em&gt;) * (int far &lt;/em&gt;)0x02000000)&lt;/p&gt;
&lt;p&gt;f()
{
    Buffer = 0;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Buffer[10] = 0;

while(Buffer[10]!=8)
{
    Buffer[Buffer[10]]=&amp;#39;a&amp;#39;+Buffer[10];
    Buffer[10]++;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p _="%" endcodeblock&gt;}
{% endcodeblock %}
汇编代码如下：
{% codeblock lang:x86asm %}
MOV AX,076A
MOV DS,AX
MOV SS,AX
MOV SP,0080
CALL 0012 ;调用f函数
INT 21
PUSH BP ;0012
MOV BP,SP
MOV BX,0200
MOV ES,BX
XOR BX,BX
ES:
MOV WORD PTR [BX],0000 ;设置Buffer=0，即将0200:0000处的内存单元改为0
MOV BX,0200
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX] ;将Buffer解引用，即将0200:0000处的内存字单元存入BX中
MOV BYTE PTR [BX+0A],00 ;设置Buffer[10]=0 即将DS:000A处的内存单元改为0
JMP 006D ;while 循环条件判断
MOV BX,0200 ;0031
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX] ;将Buffer解引用，即将0200:0000处的内存字单元存入BX中
MOV AL,[BX+0A] ;AL等于Buffer[10]，即将DS:000A内存字节单元的内容存入AL中
ADD AL,61 ;为AL加上'a'
MOV BX,0200
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX] ;将Buffer解引用，即将0200:0000处的内存字单元存入BX中
PUSH AX
PUSH BX
MOV BX,0200
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX] ;将Buffer解引用，即将0200:0000处的内存字单元存入BX中
MOV AL,[BX+0A] ;将Buffer[10]的值传入AL，即将DS:000A处的内存字节单元存入AL中
CBW ;将AL扩展至16位
POP BX ;取回BX
ADD BX,AX ;BX现在值为Buffer[10]
POP AX ;取回AX
MOV [BX],AL ;将所要设置的数值'a'+Buffer[10]存入Buffer[Buffer[10]]中
MOV BX,0200
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX] ;将Buffer解引用，即将0200:0000处的内存字单元存入BX中
INC BYTE PTR [BX+0A] ;将Buffer[10]自增
MOV BX,0200 ;006D
MOV ES,BX
XOR BX,BX
ES:
MOV BX,[BX]
CMP BYTE PTR [BX+0A],08 ;判断Buffer[10]是否等于8
JNZ 0031 ;不等于则继续
POP BP ;等于则返回
RET&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;研究试验5 函数如何接受不定数量的参数&lt;/h2&gt;
&lt;p&gt;用C:\MINIC下的TC.EXE完成下面的试验。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;写一个程序A.C：
    {% codeblock lang:c %}
    void showchar(char a, int b);&lt;/p&gt;
&lt;p&gt;main()
{
    showchar('a', 2);
}&lt;/p&gt;
&lt;p&gt;void showchar(char a, int b)
{
    &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000+160*10+80)=a;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*(char far *)(0xb8000000+160*10+81)=b;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
{% endcodeblock %}
用TC.EXE对A.C进行编译，连接，生成A.EXE。用Debug加载A.EXE，对函数的汇编代码进行分析。解答这两个问题：main函数是如何给showchar传递参数的？showchar是如何接受参数的？
main函数的汇编代码如下：
{% codeblock lang:x86asm %}
PUSH BP
MOV BP,SP
MOV AX,0002
PUSH AX
MOV AL,61
PUSH AX
CALL 020B ;调用showchar函数
POP CX
POP CX
POP BP
RET
{% endcodeblock %}
showchar函数的汇编代码如下：
{% codeblock lang:x86asm %}
PUSH BP
MOV BP,SP
MOV AL,[BP+4]
MOV BX,B800
MOV ES,BX
MOV BX,0690
ES:
MOV [BX],AL ;f函数的第1条语句
MOV AL,[BP+6]
MOV BX,B800
MOV ES,BX
MOV BX,0691
ES:
MOV [BX],AL ;f函数的第2条语句
POP BP
RET
{% endcodeblock %}
答案：
main函数通过将对应的参数压栈来给showchar传递参数，并且在函数返回后通过POP操作将参数退栈。
showchar通过SS:BP以及寻址在栈中取得对应的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;写一个程序B.C：
    {% codeblock lang:c %}
    void showchar(int,int,...);&lt;/p&gt;
&lt;p&gt;main()
{
    showchar(8,2,'a','b','c','d','e','f','g','f');
}&lt;/p&gt;
&lt;p&gt;void showchar(int n,int color,...)
{
    int a;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for(a=0;a!=n;a++)
{
    *(char far *)(0xb8000000+160*10+80+a+a)=*(int *)(_BP+8+a+a);//加8是因～为call的时候将CS、IP压栈

    *(char far *)(0xb8000000+160*10+81+a+a)=color;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;}
{% endcodeblock %}
分析程序B.C，深入理解相关的知识。
思考：showchar函数是如何知道要显示多少个字符的？printf函数是如何知道有多少个参数的？
待显示字符的个数为showchar函数的第一个参数，showchar函数以此得知要显示的字符的个数。
通过对printf的一个参数所指向的字符串的分析，printf函数以此得知参数的个数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实现一个简单的printf函数，只需支持“%c %d”即可。
    {% codeblock lang:c %}
    void myprintf(char *, ...);&lt;/p&gt;
&lt;p&gt;main()
{
    myprintf("%d %c abc %%\n", -12345, 48);
}&lt;/p&gt;
&lt;p _="%" endcodeblock&gt;void myprintf(char * str, ...)
{
    int count = 0;
    int position = 0;
    while (&lt;em&gt;str != 0)
    {
        if (&lt;/em&gt;str == 37)
        {
            str++;
            if (&lt;em&gt;str == 68 || &lt;/em&gt;str == 100)
            {
                int index;
                char flag = 0;
                int length = 0;
                int num = &lt;em&gt;(int &lt;/em&gt;)(_BP + 6 + count);
                if (num &amp;lt; 0) {
                    flag = 1;
                    num &lt;em&gt;= -1;
                }
                while (num != 0)
                {
                    num = num / 10;
                    length++;
                }
                num = &lt;/em&gt;(int &lt;em&gt;)(_BP + 6 + count);
                if (flag == 1) num &lt;/em&gt;= -1;
                position += length + flag - 1;
                for (index = 0 ; index &amp;lt; length; ++index)
                {
                    &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000 + 1600 + position * 2) = num % 10 + 48;
                    num = num / 10;
                    position--;
                }
                if (flag == 1)
                {
                    &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000 + 1600 + position * 2) = '-';
                    position--;
                }
                position += length + flag + 1;
                count += 2;
                str++;
            }
            else if (&lt;em&gt;str == 67 || &lt;/em&gt;str == 99)
            {
                &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000 + 1600 + position * 2) = &lt;em&gt;(char &lt;/em&gt;)(_BP + 6 + count);
                count++;
                position++;
                str++;
            }
            else
            {
                &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000 + 1600 + position * 2) = '%';
                position++;
            }
        }
        else
        {
            &lt;em&gt;(char far &lt;/em&gt;)(0xb8000000 + 1600 + position * 2) = *str;
            position++;
            str++;
        }
    }
}&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</content><category term="汇编"></category><category term="实验"></category></entry><entry><title>Android View绘制生命周期总览</title><link href="/android-viewhui-zhi-sheng-ming-zhou-qi-zong-lan.html" rel="alternate"></link><published>2017-03-09T17:22:41+08:00</published><updated>2017-03-09T17:22:41+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-03-09:/android-viewhui-zhi-sheng-ming-zhou-qi-zong-lan.html</id><summary type="html">&lt;p&gt;为了直观表示整个过程，我制作了一张流程图。注意以下只是整个生命周期中比较常用的方法，并不代表所有的过程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="viewLifeCircle" src="/images/viewLifeCircle.png"&gt;&lt;/p&gt;
&lt;p&gt;当一个&lt;code&gt;Activity&lt;/code&gt;收到焦点即将要处于激活状态时，将会被要求绘制它的布局，绘制布局之前的过程在这里不涉及，我们从绘制&lt;code&gt;View&lt;/code&gt;开始分析。&lt;/p&gt;
&lt;p&gt;每个&lt;code&gt;Activity&lt;/code&gt;被要求提供一个&lt;code&gt;ViewGroup&lt;/code&gt;作为View树的根，也就是我们熟悉的&lt;code&gt;setContentView&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@LayoutRes&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;layoutResID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutResID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;为了直观表示整个过程，我制作了一张流程图。注意以下只是整个生命周期中比较常用的方法，并不代表所有的过程。&lt;/p&gt;
&lt;p&gt;&lt;img alt="viewLifeCircle" src="/images/viewLifeCircle.png"&gt;&lt;/p&gt;
&lt;p&gt;当一个&lt;code&gt;Activity&lt;/code&gt;收到焦点即将要处于激活状态时，将会被要求绘制它的布局，绘制布局之前的过程在这里不涉及，我们从绘制&lt;code&gt;View&lt;/code&gt;开始分析。&lt;/p&gt;
&lt;p&gt;每个&lt;code&gt;Activity&lt;/code&gt;被要求提供一个&lt;code&gt;ViewGroup&lt;/code&gt;作为View树的根，也就是我们熟悉的&lt;code&gt;setContentView&lt;/code&gt;方法。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@LayoutRes&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;layoutResID&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;layoutResID&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;View&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ViewGroup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LayoutParams&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;getDelegate&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setContentView&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以看到&lt;code&gt;setContentView&lt;/code&gt;拥有三种形式，可以直接传入&lt;code&gt;View&lt;/code&gt;、传入一个&lt;code&gt;layout&lt;/code&gt;资源文件，或传入一个&lt;code&gt;View&lt;/code&gt;文件和一个用于提供参数的&lt;code&gt;LayoutParams&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;整个过程将从这个根&lt;code&gt;View&lt;/code&gt;开始，并遍历它的子&lt;code&gt;View&lt;/code&gt;来逐一绘制，每个&lt;code&gt;ViewGroup&lt;/code&gt;承担了要求它的子&lt;code&gt;View&lt;/code&gt;进行绘制的责任，每个&lt;code&gt;View&lt;/code&gt;承担了绘制自身的责任。并且父&lt;code&gt;View&lt;/code&gt;会在子&lt;code&gt;View&lt;/code&gt;完成绘制之前进行绘制，同级的&lt;code&gt;View&lt;/code&gt;将以它们出现在树中的顺序进行绘制。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;首先调用的当然是&lt;code&gt;View&lt;/code&gt;的构造函数，构造函数分为两种，一种供代码创建的&lt;code&gt;View&lt;/code&gt;使用，另一种是由&lt;code&gt;layout&lt;/code&gt;文件生成的&lt;code&gt;View&lt;/code&gt;使用，区别在于后者会从&lt;code&gt;layout&lt;/code&gt;文件中读入所有的属性，前者的属性则需要在代码中设置。&lt;/p&gt;
&lt;p&gt;另外后者在所有的子&lt;code&gt;View&lt;/code&gt;都生成完毕之后会回调&lt;code&gt;onFinishInflate&lt;/code&gt;方法。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;在正式绘制之前要进行两个过程（布局机制[layout mechanism]）：&lt;/p&gt;
&lt;p&gt;首先是&lt;code&gt;measure&lt;/code&gt;过程。这是一个自顶向下的过程，父&lt;code&gt;View&lt;/code&gt;将期望尺寸传递给子&lt;code&gt;View&lt;/code&gt;，子&lt;code&gt;View&lt;/code&gt;需要根据这一信息确定自己的尺寸，并且保证这一尺寸满足父&lt;code&gt;View&lt;/code&gt;对其的要求，在子&lt;code&gt;View&lt;/code&gt;确定自己尺寸的过程中也要向它的子&lt;code&gt;View&lt;/code&gt;传递信息，就这样递归地确定自己的尺寸信息并储存在自身中，保证在&lt;code&gt;measure&lt;/code&gt;方法返回时，自身的尺寸信息已经确定。所以在根&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;measure&lt;/code&gt;方法返回时，所有子&lt;code&gt;View&lt;/code&gt;的尺寸信息已经全部确定了。&lt;/p&gt;
&lt;p&gt;这个过程需要注意一个&lt;code&gt;View&lt;/code&gt;可能不止一次地调用&lt;code&gt;measure&lt;/code&gt;方法来对子&lt;code&gt;View&lt;/code&gt;进行测量。比如，可能要先传递一个无限制的信息来获取子&lt;code&gt;View&lt;/code&gt;想要的尺寸，当子&lt;code&gt;View&lt;/code&gt;希望的尺寸过大或过小时，父&lt;code&gt;View&lt;/code&gt;需要再次调用&lt;code&gt;measure&lt;/code&gt;方法来给予子&lt;code&gt;View&lt;/code&gt;一些限制。&lt;/p&gt;
&lt;p&gt;第二个是&lt;code&gt;layout&lt;/code&gt;过程，这也是一个自顶向下的遍历过程，在这个过程中父&lt;code&gt;View&lt;/code&gt;负责按照上一个过程中计算并储存在&lt;code&gt;View&lt;/code&gt;中的尺寸信息来正确地放置子&lt;code&gt;View&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;同时这个过程可以通过调用&lt;code&gt;requestLayout()&lt;/code&gt;来重新进行，并且会引起后面步骤的执行，相当于对以这个&lt;code&gt;View&lt;/code&gt;为根的&lt;code&gt;View&lt;/code&gt;树进行重新布局。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;下面就是真正的绘制过程了，也就是&lt;code&gt;View&lt;/code&gt;的&lt;code&gt;draw()&lt;/code&gt;方法，在&lt;code&gt;draw()&lt;/code&gt;方法中，（如果需要）会&lt;strong&gt;依次&lt;/strong&gt;调用如下方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;drawBackground()&lt;/code&gt;：在画布上绘制特定的背景&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDraw()&lt;/code&gt;：重写&lt;code&gt;View&lt;/code&gt;几乎必重写的一个方法，用于绘制图形&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchDraw()&lt;/code&gt;：&lt;code&gt;ViewGroup&lt;/code&gt;会重写这个方法，用于对所有的子&lt;code&gt;View&lt;/code&gt;调用&lt;code&gt;draw()&lt;/code&gt;方法进行绘制&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onDrawForeground()&lt;/code&gt;：用于绘制前景（如果需要）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看到如果需要调用上述的方法必定会按照这个顺序进行，也就是说，子&lt;code&gt;View&lt;/code&gt;的绘制是在父&lt;code&gt;View&lt;/code&gt;绘制之后进行的，而同级&lt;code&gt;View&lt;/code&gt;的绘制是根据&lt;code&gt;View&lt;/code&gt;在父&lt;code&gt;View&lt;/code&gt;中的顺序进行绘制的。&lt;/p&gt;
&lt;p&gt;同时这个过程可以通过调用&lt;code&gt;invalidate()&lt;/code&gt;来重新进行，相当于进行某个&lt;code&gt;View&lt;/code&gt;的重绘。&lt;/p&gt;</content><category term="android"></category><category term="view"></category><category term="lifeCycle"></category></entry><entry><title>王爽汇编语言第三版实验</title><link href="/wang-shuang-hui-bian-yu-yan-di-san-ban-shi-yan.html" rel="alternate"></link><published>2017-03-09T11:42:37+08:00</published><updated>2017-03-09T11:42:37+08:00</updated><author><name>Zhihao Chen</name></author><id>tag:None,2017-03-09:/wang-shuang-hui-bian-yu-yan-di-san-ban-shi-yan.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第二部分，包括了书本上的实验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实验1 查看CPU和内存，用机器指令和汇编指令编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用Debug，将下面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器的变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style="text-align: center"&gt;机器码&lt;/th&gt;&lt;th style="text-align: center"&gt;汇编指令&lt;/th&gt;&lt;th style="text-align: center"&gt;执行后相关寄存器变化&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;b8 20 4e&lt;/td&gt;&lt;td style="text-align: center"&gt;mov ax, 4E20H&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=4E20H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;05 16 14&lt;/td&gt;&lt;td style="text-align: center"&gt;add ax, 1416H&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=6236H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;bb 00 20&lt;/td&gt;&lt;td style="text-align: center"&gt;mov bx, 2000H&lt;/td&gt;&lt;td style="text-align: center"&gt;BX=2000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;01 d8&lt;/td&gt;&lt;td style="text-align: center"&gt;add ax, bx&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=8236H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;89 …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第二部分，包括了书本上的实验&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;实验1 查看CPU和内存，用机器指令和汇编指令编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用Debug，将下面的程序段写入内存，逐条执行，观察每条指令执行后，CPU中相关寄存器的变化。&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;

&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style="text-align: center"&gt;机器码&lt;/th&gt;&lt;th style="text-align: center"&gt;汇编指令&lt;/th&gt;&lt;th style="text-align: center"&gt;执行后相关寄存器变化&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;b8 20 4e&lt;/td&gt;&lt;td style="text-align: center"&gt;mov ax, 4E20H&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=4E20H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;05 16 14&lt;/td&gt;&lt;td style="text-align: center"&gt;add ax, 1416H&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=6236H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;bb 00 20&lt;/td&gt;&lt;td style="text-align: center"&gt;mov bx, 2000H&lt;/td&gt;&lt;td style="text-align: center"&gt;BX=2000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;01 d8&lt;/td&gt;&lt;td style="text-align: center"&gt;add ax, bx&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=8236H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;89 c3&lt;/td&gt;&lt;td style="text-align: center"&gt;mov bx, ax&lt;/td&gt;&lt;td style="text-align: center"&gt;BX=8236H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;01 d8&lt;/td&gt;&lt;td style="text-align: center"&gt;add ax, bx&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=046CH&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;b8 1a 00&lt;/td&gt;&lt;td style="text-align: center"&gt;mov ax, 001AH&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=001AH&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;bb 26 00&lt;/td&gt;&lt;td style="text-align: center"&gt;mov bx, 0026H&lt;/td&gt;&lt;td style="text-align: center"&gt;BX=0026H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;00 d8&lt;/td&gt;&lt;td style="text-align: center"&gt;add al, bl&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=0040H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;00 dc&lt;/td&gt;&lt;td style="text-align: center"&gt;add ah, bl&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=2640H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;00 c7&lt;/td&gt;&lt;td style="text-align: center"&gt;add bh, al&lt;/td&gt;&lt;td style="text-align: center"&gt;BX=4026H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;b4 00&lt;/td&gt;&lt;td style="text-align: center"&gt;mov ah, 0&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=0040H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;00 d8&lt;/td&gt;&lt;td style="text-align: center"&gt;add al, bl&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=0066H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;04 9c&lt;/td&gt;&lt;td style="text-align: center"&gt;add al, 9CH&lt;/td&gt;&lt;td style="text-align: center"&gt;AX=0002H&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;提示，可用E命令和A命令以两种方式将指令写入内存。注意用T命令执行时，CS:IP的指向。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将下面3条指令写入从2000:0开始的内存单元中，利用这3条指令计算2的8次方。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 1
add ax, ax
jmp 2000:0003
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每次执行 add ax, ax 相当于将ax乘2，重复执行该条指令8次即可。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看内存中的内容。
PC机主板上的ROM写有一个生产日期，在内存FFF00H～FFFFFH的某几个单元中，请找到这个生产日期并试图改变它。
提示，如果读者对实验的结果感到疑惑，请仔细阅读第1章中的1.15节。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过Debug中的D命令，可以观察到生产日期以MM/DD/YY的格式存储在内存的ffff:0005-ffff:000c共计8个字节处。
该生产日期不可被修改，因为其只读。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;向内存从B8100H开始的单元中填写数据，如：&lt;/p&gt;
&lt;p&gt;-e B810:0000 01 01 02 02 03 03 04 04&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;请读者先填写不同的数据，观察产生的现象；再改变填写的地址，观察产生的现象。
提示，如果读者对实验的结果感到疑惑，请仔细阅读第1章中的1.15节。&lt;/p&gt;
&lt;p&gt;通过向内存中的显存地址空间写入数据，控制在屏幕上的不同位置显示不同颜色的字符。&lt;/p&gt;
&lt;h2&gt;实验2 用机器指令和汇编指令编程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;使用Debug，将下面的程序段写入内存，逐条执行，根据指令执行后的实验运行情况填空。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, ffff
mov ds, ax

mov ax, 2200
mov ss, ax

mov sp, 1000

mov ax,[0]  ;ax = _____
add ax,[2]  ;ax = _____
mov bx,[4]  ;bx = _____
add bx,[6]  ;bx = _____

push ax     ;sp = _____ 修改的内存单元的地址是_____内容为_____
push bx     ;sp = _____ 修改的内存单元的地址是_____内容为_____
pop ax      ;sp = _____ ax = _____
pop bx      ;sp = _____ bx = _____

push [4]    ;sp = _____ 修改的内存单元的地址是_____内容为_____
push [6]    ;sp = _____ 修改的内存单元的地址是_____内容为_____
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果（不唯一）:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;D4EA
25EE
3002
5F37
00FE 220FE 25EE
00FC 220FC 5F37
00FE 5F37
0100 25EE
00FE 220FE 3002
00FC 220FC 2F35
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;仔细观察图3.19中的实验过程，然后分析：为什么2000:0～2000:f中的内容会发生改变？
在使用T命令进行单步追踪的时候，产生了中断，为了保护现场，CPU将PSW、CS和IP依此入栈，导致了内存相关位置内容的改变。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;实验3 编程、编译、连接、跟踪&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将下面的程序保存为t1.asm文件，将其生成可执行文件t1.exe。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg

codesg segment
mov ax, 2000H
mov ss, ax
mov sp, 0
add sp, 10
pop ax
pop bx
push ax
push bx
pop ax
pop bx

mov ax, 4c00h
int 21h
codesg ends

end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;edit t1.asm
masm.exe t1.asm;
link.exe t1.obj;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;用Debug跟踪t1.exe的执行过程，写出每一步执行后，相关寄存器中的内容和栈顶的内容。
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style="text-align: center"&gt;汇编指令&lt;/th&gt;&lt;th style="text-align: center"&gt;相关寄存器的内容&lt;/th&gt;&lt;th style="text-align: center"&gt;栈顶的内容&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;mov ax, 2000H&lt;/td&gt;&lt;td style="text-align: center"&gt;AX = 2000H&lt;/td&gt;&lt;td style="text-align: center"&gt;00B8H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;mov ss, ax&lt;/td&gt;&lt;td style="text-align: center"&gt;SS = 2000H&lt;/td&gt;&lt;td style="text-align: center"&gt;-----&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;mov sp, 0&lt;/td&gt;&lt;td style="text-align: center"&gt;SP = 0&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;add sp, 10&lt;/td&gt;&lt;td style="text-align: center"&gt;SP = 10&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;pop ax&lt;/td&gt;&lt;td style="text-align: center"&gt;AX = 0 SP = 12&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;pop bx&lt;/td&gt;&lt;td style="text-align: center"&gt;BX = 0 SP = 14&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;push ax&lt;/td&gt;&lt;td style="text-align: center"&gt;SP = 12&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;push bx&lt;/td&gt;&lt;td style="text-align: center"&gt;SP = 10&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;pop ax&lt;/td&gt;&lt;td style="text-align: center"&gt;AX = 0 SP = 12&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;pop bx&lt;/td&gt;&lt;td style="text-align: center"&gt;BX = 0 SP = 14&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;mov ax, 4c00h&lt;/td&gt;&lt;td style="text-align: center"&gt;AX = 4C00H&lt;/td&gt;&lt;td style="text-align: center"&gt;0000H&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td style="text-align: center"&gt;int 21h&lt;/td&gt;&lt;td style="text-align: center"&gt;-----&lt;/td&gt;&lt;td style="text-align: center"&gt;-----&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
结果不唯一&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PSP的头两个字节是CD 20，用Debug加载t1.exe，查看PSP的内容。&lt;/p&gt;
&lt;p&gt;-d 2119:0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2119为CS-0010H&lt;/p&gt;
&lt;h2&gt;实验4 [bx]和loop的使用&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;编程，向内存0:200～0:23F依此传送数据0～63（3FH）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程，向内存0:200～0:23F依此传送数据0～63（3FH），程序中只能使用9条指令，9条指令中包括“mov ax, 4c00h”和“int 21h”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
mov ax, 0020h
mov ds, ax
mov bl, 0
mov cx, 64

s:      mov [bx], bl
inc bl
loop s

mov ax, 4c00h
int 21h
code ends
end
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;下面的程序的功能是将“mov ax, 4c00h”之前的指令复制到内存的0:200处，补全程序，上机调试，跟踪运行结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
mov ax, _____
mov ds, ax
mov ax, 0020h
mov es, ax
mov bx, 0
mov cx, _____
s:      mov al, [bx]
mov es:[bx], al
inc bx
loop s
mov ax, 4c00h
int 21h
code ends
end
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;结果：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;code
18H
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提示：
复制的是什么？从哪里到哪里？
复制的是代码段中mov ax, 4c00h之前的代码，以数据的形式，从内存中代码段的位置复制到内存中0:200处开始的一段连续的空间。
复制的是什么？有多少个字节？你如何直到要复制的字节的数量？
可以用offset计算得出，也可以在Debug中用T命令观察得出。&lt;/p&gt;
&lt;h2&gt;实验5 编写、调试具有多个段的程序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ds:data, ss:stack

data segment
dw 0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h
data ends

stack segment
dw 0, 0, 0, 0, 0, 0, 0, 0
stack ends

code segment
start:  mov ax, stack
mov ss, ax
mov sp, 16

mov ax, data
mov ds, ax

push ds:[0]
push ds:[2]
pop ds:[2]
pop ds:[0]

mov ax, 4c00h
int 21h
code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;①CPU执行程序，程序返回前，data段中的数据为多少？
②CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。
③设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。
答案：
①data段中的数据不变。
②212B、212A、2129（答案不唯一）
③X-2、X-1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ds:data, ss:stack

data segment
dw 0123h, 0456h
data ends

stack segment
dw 0, 0
stack ends

code segment
start:  mov ax, stack
mov ss, ax
mov sp, 16

mov ax, data
mov ds, ax

push ds:[0]
push ds:[2]
pop ds:[2]
pop ds:[0]

mov ax, 4c00h
int 21h
code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;①CPU执行程序，程序返回前，data段中的数据为多少？
②CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。
③设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。
④对于如下定义的段：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;name segment
...
segment ends
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果段中的数据占N个字节，则程序加载后，该段实际占有的空间为_____。
答案：
①data段中的数据不变。
②212B、212A、2129（答案不唯一）
③X-2、X-1
④((N-1)/16 + 1)*16 其中除法为整除&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将下面的程序编译连接，用Debug加载、跟踪，然后回答问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ds:data, ss:stack

code segment
start:  mov ax, stack
mov ss, ax
mov sp, 16

mov ax, data
mov ds, ax

push ds:[0]
push ds:[2]
pop ds:[2]
pop ds:[0]

mov ax, 4c00h
int 21h
code ends

data segment
dw 0123h, 0456h
data ends

stack segment
dw 0, 0
stack ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;①CPU执行程序，程序返回前，data段中的数据为多少？
②CPU执行程序，程序返回前，CS = _____、SS = _____、DS = _____。
③设程序加载后，code段的段地址为X，则data段的段地址为_____，stack段的段地址为_____。
答案：
①data段中的数据不变。
②2129、212D、212C（答案不唯一）
③X+3、X+4&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果将1. 2. 3.题中的最后一条伪指令“end start”改为“end”（也就是说，不指明程序的入口），则哪个程序仍然可以正确执行？请说明原因。
答案：
只有程序3可以正确运行，在不指明程序入口的情况下，程序默认按照顺序从头开始执行，而3个程序中只有程序3的code段位于最开始的部分，所以只有程序3可以正确运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序如下，编写code段中的代码，将a段和b段中的数据依此相加，将结果存到c段中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
a segment
db 1, 2, 3, 4, 5, 6, 7, 8
a ends

b segment
db 1, 2, 3, 4, 5, 6, 7, 8
b ends

c segment
db 0, 0, 0, 0, 0, 0, 0, 0
c ends

code segment
start:
?
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;al&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;al&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;:[&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;al&lt;/span&gt;
&lt;span class="n"&gt;inc&lt;/span&gt; &lt;span class="n"&gt;bx&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;c00h&lt;/span&gt;
&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;程序如下，编写code段中的代码，用push指令将a段中的前8个字型数据，逆序存储到b段中。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

a segment
dw 1, 2, 3, 4, 5, 6, 7, 8, 9, 0ah, 0bh, 0ch, 0dh, 0eh, 0fh, 0ffh
a ends

b segment
dw 0, 0, 0, 0, 0, 0, 0, 0
b ends

code segment
start:  
?
code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;cx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;bx&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="n"&gt;c00h&lt;/span&gt;
&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验6 实践课程中的程序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将课程中所有讲解过的程序上机调试，用Debug跟踪其执行过程，并在过程中进一步理解所讲内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编程，完成问题7.9中的程序。
程序如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg, ss:stacksg, ds:datasg
stacksg segment
dw 0, 0, 0, 0, 0, 0, 0, 0
stacksg ends

datasg segment
db &amp;#39;1. display      &amp;#39;
db &amp;#39;2. brows        &amp;#39;
db &amp;#39;3. replace      &amp;#39;
db &amp;#39;4. modify       &amp;#39;
datasg ends

codesg segment
start:  mov ax, datasg
mov ds, ax
mov ax, stacksg
mov ss, ax
mov sp, 16
mov bx, 0
mov cx, 4
s:      push cx
mov cx, 4
mov si, 0
s0:     mov al, [bx + si + 3]
and al, 11011111b
mov [bx + si + 3], al
inc si
loop s0
add bx, 16
pop cx
loop s
mov ax, 4c00h
int 21h
codesg ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验7 寻址方式在结构化数据访问中的应用&lt;/h2&gt;
&lt;p&gt;编程，将data段中的数据按如下格式写入到table段中，并计算21年中的人均收入（取整），结果也按照下面的格式保存在table段中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg, ss:stack

stack segment
dw 8 dup (0)
stack ends

data segment
db &amp;#39;1975&amp;#39;, &amp;#39;1976&amp;#39;, &amp;#39;1977&amp;#39;, &amp;#39;1978&amp;#39;, &amp;#39;1979&amp;#39;, &amp;#39;1980&amp;#39;, &amp;#39;1981&amp;#39;, &amp;#39;1982&amp;#39;, &amp;#39;1983&amp;#39;
db &amp;#39;1984&amp;#39;, &amp;#39;1985&amp;#39;, &amp;#39;1986&amp;#39;, &amp;#39;1987&amp;#39;, &amp;#39;1988&amp;#39;, &amp;#39;1989&amp;#39;, &amp;#39;1990&amp;#39;, &amp;#39;1991&amp;#39;, &amp;#39;1992&amp;#39;
db &amp;#39;1993&amp;#39;, &amp;#39;1994&amp;#39;, &amp;#39;1995&amp;#39;

dd 16, 22, 382, 1356, 2390, 8000, 16000, 24486, 50065, 97479, 140417, 197514
dd 345980, 590827, 803530, 1183000, 1843000, 2759000, 3753000, 4649000, 5937000

dw 3, 7, 9, 13, 28, 38, 130, 220, 476, 778, 1001, 1442, 2258, 2793, 4037, 5635, 8226
dw 11542, 14430, 15257, 17800
data ends

table segment
db 21 dup (&amp;#39;year summ ne ?? &amp;#39;)
table ends

codesg segment
start:  mov ax, stack
mov ss, ax
mov sp, 16
mov ax, table
mov ds, ax
mov ax, data
mov es, ax
mov bx, 0
mov si, 0
mov cx, 21
year:   push cx
mov cx, 4
mov di, 0
char:   mov al, es:[si]
mov [bx+di], al
inc si
inc di
loop char
add bx, 16
pop cx
loop year
mov cx, 21
mov bx, 0
income: mov ax, es:[si]
mov [5+bx], ax
add si, 2
mov ax, es:[si]
mov [7+bx], ax
add si, 2
add bx, 16
loop income
mov cx, 21
mov bx, 0
staff:  mov ax, es:[si]
mov [10+bx], ax
add si, 2
add bx, 16
loop staff
mov cx, 21
mov bx, 0
average:mov ax, [bx+5]
mov dx, [bx+7]
div word ptr [bx+10]
mov [13+bx], ax
add bx, 16
loop average
mov ax, 4c00h
int 21h
codesg ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验8 分析一个奇怪的程序&lt;/h2&gt;
&lt;p&gt;分析下面的程序，在运行前思考，这个程序可以正确返回吗？
运行后再思考：为什么是这种结果？
通过这个程序加深对相关内容的理解。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg
codesg segment
mov ax, 4c00h
int 21h
start: mov ax, 0
s:     nop
nop
mov di, offset s
mov si, offset s2
mov ax, cs:[si]
mov cs:[di], ax
s0:    jmp short s
s1:    mov ax, 0
int 21h
mov ax, 0
s2:    jmp short s1
nop
codesg ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分析：
这个程序可以正确返回，程序的入口为mov ax, 0，注意到指令jmp short s1占2字节，于是指令mov di, offset s将s的偏移地址传送到寄存器DI，mov si, offset s2将s2的偏移地址传送到SI，然后再通过通用寄存器ax做中转将s2处的指令复制到s处，最后再跳转至s处执行复制过来的指令。
注意jmp short s1是相对跳转，其直接修改IP寄存器，从s2到s1共有8个字节的偏移，实际上 jmp short s1等价于(ip)=(ip)-8，通过Debug可知第一个nop指令的偏移地址为8，所以再执行了复制过的指令后，IP将指向0，程序按照顺序执行mov ax, 4c00h和int 21h，正确返回。&lt;/p&gt;
&lt;h2&gt;实验9 根据材料编程&lt;/h2&gt;
&lt;p&gt;编程：在屏幕中间分别显示绿色、绿底红色、白底蓝色的字符串'welcome to masm!'。
编程所需的只是通过阅读、分析下面的材料获得。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume ds:data, cs:code

data segment
db &amp;#39;welcome to masm!&amp;#39;
data ends

code segment
start:  mov ax, data
mov ds, ax
mov ax, 0B800H
mov es, ax

mov bx, 1664
mov si, 0
mov cx, 16
char1:  mov al, [si]
mov ah, 10000010B
mov es:[bx], ax
add bx, 2
inc si
loop char1

mov bx, 1824
mov si, 0
mov cx, 16
char2:  mov al, [si]
mov ah, 10100100B
mov es:[bx], ax
add bx, 2
inc si
loop char2

mov bx, 1984
mov si, 0
mov cx, 16
char3:  mov al, [si]
mov ah, 11110001B
mov es:[bx], ax
add bx, 2
inc si
loop char3

mov ax, 4C00H
int 21H
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验10 编写子程序&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;显示字符串&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ss:stack

stack segment
dw 16 dup (0)
stack ends

data segment
db &amp;#39;Welcome to masm!&amp;#39;, 0
data ends

code segment
start:  mov dh, 8
mov dl, 3
mov cl, 2
mov ax, data
mov ds, ax
mov ax, stack
mov ss, ax
mov sp, 32
mov si, 0
call show_str

mov ax, 4c00h
int 21h

show_str:
push cx
push bx
push ax
push si
push di
push es
;using cx, bx, ax, si, di, es
mov ax, 0b800h
mov es, ax
mov bx, 0
mov di, 0
mov al, 160
mul dh
add bx, ax
mov al, 2
mul dl
add bx, ax ;bx stores address of start character
mov al, cl ;al stores the color of character
char:   mov ch, 0
mov cl, ds:[si]
jcxz zero
mov ch, al
mov es:[bx+di], cx
add di, 2
inc si
jmp char
zero:   pop es
pop di
pop si
pop ax
pop bx
pop cx
ret

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;解决除法溢出的问题&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ss:stack

stack segment
dw 16 dup (0)
stack ends

code segment
start:  mov ax, stack
mov ss, ax
mov sp, 32
mov ax, 4240h
mov dx, 000fh
mov cx, 0ah
call divdw

mov ax, 4c00h
int 21h

divdw:  push bx

mov bx, ax ; bx stores L
mov ax, dx ; ax stores H
mov dx, 0
div cx ; after div, ax holds int(H/N), dx holds rem(H/N)
push ax ; push int(H/N) temporarily
mov ax, bx ; ax stores L
div cx
mov cx, dx
pop dx

pop bx
ret

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;数值显示&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ss:stack

stack segment
dw 16 dup (0)
stack ends

data segment
db 10 dup (0)
data ends

code segment
start:  mov ax, data
mov ds, ax
mov ax, stack
mov ss, ax
mov sp, 32
mov ax, 12666
mov si, 0
call dtoc

mov dh, 8
mov dl, 3
mov cl, 2
call show_str

mov ax, 4c00h
int 21h

dtoc:   push ax
push si
push di
push dx
push bx
push cx
mov di, 0
mov dx, 0
mov bx, 10

devide: mov cx, ax
jcxz stop
div bx
inc di
push dx
mov dx, 0
jmp devide
stop:   mov cx, di
string: pop bx
add bx, 30h
mov [si], bl
inc si
loop string

pop cx
pop bx
pop dx
pop di
pop si
pop ax
ret

show_str:
push cx
push bx
push ax
push si
push di
push es
;using cx, bx, ax, si, di, es
mov ax, 0b800h
mov es, ax
mov bx, 0
mov di, 0
mov al, 160
mul dh
add bx, ax
mov al, 2
mul dl
add bx, ax ;bx stores address of start character
mov al, cl ;al stores the color of character
char:   mov ch, 0
mov cl, ds:[si]
jcxz zero
mov ch, al
mov es:[bx+di], cx
add di, 2
inc si
jmp char
zero:   pop es
pop di
pop si
pop ax
pop bx
pop cx
ret

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验11 编写子程序&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

stack segment
dw 8 dup (0)
stack ends

data segment
db &amp;quot;Beginner&amp;#39;s All-purpose Symbolic Instruction Code.&amp;quot;, 0
data ends

code segment
begin:  mov ax, stack
mov ss, ax
mov sp, 16
mov ax, data
mov ds, ax
mov si, 0
call letterc

mov ax, 4c00h
int 21h

letterc:
push cx
push si
pushf

mov ch, 0
start:  mov cl, ds:[si]
jcxz zero
cmp cl, 97
jb next
cmp cl, 122
ja next
sub cl, 20h
mov ds:[si], cl
next:   inc si
jmp start

zero:   popf
pop si
pop cx
ret

code ends
end begin
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验12 编写0号中断的处理程序&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

code segment
start:
mov ax, cs
mov ds, ax
mov si, offset do0

mov ax, 0
mov es, ax
mov di, 200h

mov cx, offset do0end - offset do0

cld

rep movsb

mov ax, 0
mov es, ax
mov word ptr es:[0], 200h
mov word ptr es:[2], 0

mov ax, 4c00h
int 21h

do0:
jmp short do0start
db &amp;quot;overflow!&amp;quot;
do0start:
mov ax, cs
mov ds, ax
mov si, 202h
mov ax, 0b800h
mov es, ax
mov di, 12*160+36*2
mov cx, 9
s:
mov al, [si]
mov es:[di], al
inc si
add di, 2
loop s

mov ax, 4c00h
int 21h
do0end:
nop

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验13 编写、应用中断例程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;编写并安装int 7ch中断例程，功能为显示一个用0结束的字符串，中断例程安装在0:200处。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

code segment
start:  mov ax, cs
mov ds, ax
mov si, offset print
mov ax, 0
mov es, ax
mov di, 200h
mov cx, offset printend - offset print
cld
rep movsb

mov ax, 0
mov es, ax
mov word ptr es:[7ch * 4], 200h
mov word ptr es:[7ch * 4 + 2], 0
mov ax, 4c00h
int 21h

print:
push es
push ax
push cx
push dx
push si
push di

mov ax, 0b800h
mov es, ax
mov al, 160
mov ah, 0
mul dh
mov di, ax
add dl, dl
mov dh, 0
add di, dx

mov al, cl
printstart:
mov ch, 0
mov cl, [si]
jcxz zero
mov ch, al
mov es:[di], cx
add di, 2
inc si
jmp printstart

zero:
pop di
pop si
pop dx
pop cx
pop ax
pop es
iret
printend:
nop

code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;编写并安装int 7ch中断例程，功能为完成loop指令功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

code segment
start:  mov ax, cs
mov ds, ax
mov si, offset lp
mov ax, 0
mov es, ax
mov di, 200h
mov cx, offset lpend - offset lp
cld
rep movsb

mov ax, 0
mov es, ax
mov word ptr es:[7ch * 4], 200h
mov word ptr es:[7ch * 4 + 2], 0
mov ax, 4c00h
int 21h

lp:     push bp
mov bp, sp
dec cx
jcxz lpret
add [bp + 2], bx
lpret:  pop bp
iret
lpend:  nop

code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;下面的程序，分别在屏幕的第2、4、6、8行显示4句英文诗，补全程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
s1:     db &amp;#39;Good,better,best,&amp;#39;, &amp;#39;$&amp;#39;
s2:     db &amp;#39;Never let it rest,&amp;#39;, &amp;#39;$&amp;#39;
s3:     db &amp;#39;Till good is better,&amp;#39;, &amp;#39;$&amp;#39;
s4:     db &amp;#39;And better,best.&amp;#39;, &amp;#39;$&amp;#39;
s:      dw offset s1, offset s2, offset s3, offset s4
row:    db 2, 4, 6, 8

start:  mov ax, cs
mov ds, ax
mov bx, offset s
mov si, offset row
mov cx, 4
ok:     mov bh, 0
mov dh, _____
mov dl, 0
mov ah, 2
int 10h

mov dx, _____
mov ah, 9
int 21h
_________
_________
loop ok
mov ax, 4c00h
int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[si]&lt;/span&gt;
&lt;span class="k"&gt;[bx]&lt;/span&gt;
&lt;span class="na"&gt;add bx, 2&lt;/span&gt;
&lt;span class="na"&gt;inc si&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验14 访问CMOS RAM&lt;/h2&gt;
&lt;p&gt;编程，以"年/月/日 时:分:秒"的格式，显示当前的日期，时间。
注意：CMOS RAM中存储着系统的配置信息，出了保存时间信息的单元外，不要向其他的单元中写入内容，否则将引起一些系统错误。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, ds:data

data segment
s db 9, 8, 7, 4, 2, 0
data ends
code segment
start:  mov ax, 0b800h
mov es, ax
mov di, 160 * 12
mov ax, data
mov ds, ax
mov si, 0
mov cx, 6

print:  mov al, s[si]
out 70h, al
in al, 71h
call number
cmp si, 2
jb slash
je space
cmp si, 5
jb colon
next:   inc si
loop print

mov ax, 4c00h
int 21h

;al-&amp;gt;number, es:di-&amp;gt;begin
number: push cx
mov ah, al
mov cl, 4
shr ah, cl
and al, 00001111b
add ah, 30h
add al, 30h
mov byte ptr es:[di], ah
mov byte ptr es:[di + 2], al
add di, 4
pop cx
ret

slash:  mov byte ptr es:[di], &amp;#39;\&amp;#39;
add di, 2
jmp next

colon:  mov byte ptr es:[di], &amp;#39;:&amp;#39;
add di, 2
jmp next

space:  mov byte ptr es:[di], &amp;#39; &amp;#39;
add di, 2
jmp next

code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验15 安装新的int 9中断例程&lt;/h2&gt;
&lt;p&gt;安装一个新的int 9中断例程，功能：在DOS下，按下'A'键后，除非不再松开，如果松开，就显示满屏幕的'A'；其他键照常处理。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

stack segment
db 128 dup (0)
stack ends

code segment
start:  mov ax, stack
mov ss, ax
mov sp, 128

push cs
pop ds

mov ax, 0
mov es, ax

mov si, offset int9
mov di, 204h
mov cx, offset int9end - offset int9
cld
rep movsb

push es: [9 * 4]
pop es: [200h]
push es: [9 * 4 + 2]
pop es: [202h]

cli
mov word ptr es: [9 * 4], 204h
mov word ptr es: [9 * 4 + 2], 0
sti

mov ax, 4c00h
int 21h

int9:   push ax
push bx
push cx
push es

in al, 60h

pushf
call word ptr cs:[200h]

cmp al, 9eh
jne int9ret

mov ax, 0b800h
mov es, ax
mov bx, 0
mov cx, 2000
s:      mov byte ptr es:[bx], &amp;#39;A&amp;#39;
add bx, 2
loop s

int9ret:pop es
pop cx
pop bx
pop ax
iret

int9end:nop

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验16 编写包含多个功能子程序的中断例程&lt;/h2&gt;
&lt;p&gt;安装一个新的int  7ch中断例程，为显示输出提供如下功能子程序&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;清屏&lt;/li&gt;
&lt;li&gt;设置前景色&lt;/li&gt;
&lt;li&gt;设置背景色&lt;/li&gt;
&lt;li&gt;向上滚动一行&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

code segment
start:  mov ax, cs
mov ds, ax
mov si, offset screen
mov ax, 0
mov es, ax
mov di, 200h
mov cx, offset screenend - offset screen
cld
rep movsb

mov ax, 0
mov es, ax
mov word ptr es:[7ch * 4], 200h
mov word ptr es:[7ch * 4 + 2], 0
mov ax, 4c00h
int 21h

screen: jmp short set
;考虑到安装中断例程后偏移地址发生了变化，需要重新计算相关的偏移地址
table   dw offset sub1 - offset screen + 200h, offset sub2 - offset screen + 200h, offset sub3 - offset screen + 200h, offset sub4 - offset screen + 200h

set:    push bx

cmp ah, 3
ja sret
mov bl, ah
mov bh, 0
add bx, bx

;同上
call word ptr cs:(table - screen + 200h)[bx]

sret:   pop bx
iret

sub1:   push bx
push cx
push es
mov bx, 0b800h
mov es, bx
mov bx, 0
mov cx, 2000
sub1s:  mov byte ptr es:[bx], &amp;#39; &amp;#39;
add bx, 2
loop sub1s
pop es
pop cx
pop bx
ret

sub2:   push bx
push cx
push es

mov bx, 0b800h
mov es, bx
mov bx, 1
mov cx, 2000
sub2s:  and byte ptr es:[bx], 11111000B
or es:[bx], al
add bx, 2
loop sub2s

pop es
pop cx
pop bx
ret

sub3:   push bx
push cx
push es
mov cl, 4
shl al, cl
mov bx, 0b800h
mov es, bx
mov bx, 1
mov cx, 2000
sub3s:  and byte ptr es:[bx], 10001111B
or es:[bx], al
add bx, 2
loop sub3s
pop es
pop cx
pop bx
ret

sub4:   push cx
push si
push di
push es
push ds

mov si, 0b800h
mov es, si
mov ds, si
mov si, 160
mov di, 0
cld
mov cx, 24
sub4s:  push cx
mov cx, 160
rep movsb
pop cx
loop sub4s

mov cx, 80
mov si, 0
sub4s1: mov byte ptr [160*24+si], &amp;#39; &amp;#39;
add si, 2
loop sub4s1

pop ds
pop es
pop di
pop si
pop cx
ret

screenend:
nop

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考&lt;a href="http://blog.csdn.net/lixiang0522/article/details/8434450"&gt;王爽《汇编语言》实验16：包含多个功能子程序的中断例程 解答&lt;/a&gt;
可以用伪指令org x简化该程序
org x表明接下来的指令从偏移地址x开始
修改后的相关指令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;org 200h
screen: jmp short set

table   dw sub1, sub2, sub3, sub4

set:    push bx

cmp ah, 3
ja sret
mov bl, ah
mov bh, 0
add bx, bx

call word ptr table[bx]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;实验17 编写包含多个功能子程序的中断例程&lt;/h2&gt;
&lt;p&gt;安装一个新的int 7ch中断例程，实现通过逻辑扇区号对软盘进行读写。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

code segment
start:  mov ax, cs
mov ds, ax
mov si, offset floppyio
mov ax, 0
mov es, ax
mov di, 200h
mov cx, offset floppyioend - offset floppyio
cld
rep movsb

mov ax, 0
mov es, ax
mov word ptr es:[7ch * 4], 200h
mov word ptr es:[7ch * 4 + 2], 0
mov ax, 4c00h
int 21h

floppyio:
push ax
push cx
push dx

add ah, 2
mov al, 1
push ax ;计算相应的ah和al并压栈
mov ax, dx
mov dx, 0
mov cx, 1440
div cx ;计算逻辑扇区号/1440
push ax ;将商即面号压栈
mov ax, dx
mov dl, 18
div dl ;计算逻辑扇区号/1440的余数/18
inc ah
mov ch, al
mov cl, ah ;设置相应的ch和cl
pop ax ;将相应的面号出栈
mov dh, al
mov dl, 0 ;设置相应的dh和dl
pop ax ;将相应的ah和al出栈
int 13h ;调用13h例程进行实际的读写

pop dx
pop cx
pop ax
iret
floppyioend:
nop

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;over&lt;/p&gt;</content><category term="汇编"></category><category term="实验"></category></entry><entry><title>王爽汇编语言第三版检测点答案</title><link href="/wang-shuang-hui-bian-yu-yan-di-san-ban-jian-ce-dian-da-an.html" rel="alternate"></link><published>2017-03-05T18:49:39+08:00</published><updated>2017-03-05T18:49:39+08:00</updated><author><name>Zhihao Chen</name></author><id>tag:None,2017-03-05:/wang-shuang-hui-bian-yu-yan-di-san-ban-jian-ce-dian-da-an.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第一部分，包括了书上所有的检测点答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;第一章 基础知识&lt;/h2&gt;
&lt;h3&gt;检测点 1.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;1个CPU的寻址能力为8KB，那么它的地址总线的宽度为____。
    &lt;strong&gt;13&lt;/strong&gt;
    解析：CPU在内存中寻址的最小单位是Byte（字节），8KB = 2^13B，因此地址总线的宽度为13.&lt;/li&gt;
&lt;li&gt;1KB的存储器有____个存储单元。存储单元的编号从____到____。
    &lt;strong&gt;1024  0   1023&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1KB的存储器可以存储____个bit，____个Byte。
    &lt;strong&gt;2^13  2^10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1GB、1MB、1KB分别是____________Byte
    &lt;strong&gt;2^30  2^20    2^10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;8080、8088、80286、80386的地址总线宽度分别为16根、20根、24根、32根，则他们的寻址能力分别为____ …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;开学三周，王爽的《汇编语言》（第三版）总算是基本上看完了，本文是总结的第一部分，包括了书上所有的检测点答案&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;第一章 基础知识&lt;/h2&gt;
&lt;h3&gt;检测点 1.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;1个CPU的寻址能力为8KB，那么它的地址总线的宽度为____。
    &lt;strong&gt;13&lt;/strong&gt;
    解析：CPU在内存中寻址的最小单位是Byte（字节），8KB = 2^13B，因此地址总线的宽度为13.&lt;/li&gt;
&lt;li&gt;1KB的存储器有____个存储单元。存储单元的编号从____到____。
    &lt;strong&gt;1024  0   1023&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1KB的存储器可以存储____个bit，____个Byte。
    &lt;strong&gt;2^13  2^10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;1GB、1MB、1KB分别是____________Byte
    &lt;strong&gt;2^30  2^20    2^10&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;8080、8088、80286、80386的地址总线宽度分别为16根、20根、24根、32根，则他们的寻址能力分别为____（KB）、____（MB）、____（MB）、____（GB）。
    &lt;strong&gt;64    1   16  4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为：____（B）、____（B）、____（B）、____（B）、____（B）。
    &lt;strong&gt;1 1   2   2   4&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;从内存中读取1024字节的数据，8086至少要读取____次，80386至少要读取____次。
    &lt;strong&gt;512   256&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;在存储器中，数据和程序以____形式存放。
    &lt;strong&gt;二进制&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;第二章 寄存器&lt;/h2&gt;
&lt;h3&gt;检测点 2.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;写出每条汇编指令执行后相关寄存器中的值&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 62627       AX =
mov ah, 31H     AX =
mov al, 23H     AX =
add ax, ax      AX =
mov bx, 826CH       BX =
mov cx, ax      CX =
mov ax, bx      AX =
add ax, bx      AX =
mov al, bh      AX =
mov ah, bl      AX =
add ah, ah      AX =
add al, 6       AX =
add al, al      AX =
mov ax, cx      AX =
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;F4A3H 31A3H   3123H 6246H 826CH   6246H   826CH   04D8H   0482H   6C82H   D882H   D888H   D810H   6246H&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能使用目前学过的汇编指令，最多使用4条指令，编程计算2的4次方。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 2   
add ax, ax
add ax, ax
add ax, ax
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 2.2&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;给定段地址为0001H，仅通过变化偏移地址寻址，CPU的寻址范围为_____到_____。
    &lt;strong&gt;00010H到1000FH&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;有一数据存放在内存20000H的单元中，现给定段地址为SA，若想用偏移地址寻到此单元。则SA应满足的条件是：最小为_____，最大为_____。提示，反过来思考一下，当段地址给定为多少，CPU无论怎么变化偏移地址都无法寻到20000H单元？
    &lt;strong&gt;1001F 2000H&lt;/strong&gt;
    &lt;strong&gt;20000H - 0FFFFH = 10001H&lt;/strong&gt;
    &lt;strong&gt;20000H - 00000H = 20000H&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;检测点 2.3&lt;/h3&gt;
&lt;p&gt;下面的3条指令执行后，CPU几次修改IP？都是在什么时候？最后IP中的值是多少？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, bx
sub ax, ax
jmp ax
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;修改了四次：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第1条指令执行后，IP指向第2条指令&lt;/li&gt;
&lt;li&gt;第2条指令执行后，IP指向第3条指令&lt;/li&gt;
&lt;li&gt;第3条指令执行后，IP指向第4条指令&lt;/li&gt;
&lt;li&gt;JMP指令执行后，IP重新指向第1条指令&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;第三章 寄存器（内存访问）&lt;/h2&gt;
&lt;h3&gt;检测点 3.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在Debug中，用“d 0:0 1f”查看内存，结果如下。&lt;/p&gt;
&lt;p&gt;0000:0000 70 80 F0 30 EF 60 30 E2-00 80 80 12 66 20 22 60
0000:0010 62 26 E6 D6 CC 2E 3C 3B-AB BA 00 00 26 06 66 88&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面的程序执行前，AX=0，BX=0，写出每条汇编指令执行完后相关寄存器中的值。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 1
mov ds, ax
mov ax, [0000]          AX = 
mov bx, [0001]          BX = 
mov ax, bx          AX = 
mov ax, [0000]          AX = 
mov bx, [0002]          BX =
add ax, bx          AX = 
add ax, [0004]          AX = 
mov ax, 0           AX = 
mov al, [0002]          AX = 
mov bx, 0           BX =
mov bl, [000C]          BX = 
add al, bl          AX = 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;提示，注意ds的设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2662H E626H   E626H   2662H   D6E6H   FD48H   2C14H   0   00E6H   0   0026H   000CH&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内存中的情况如图3.6所示。
    各寄存器的初始值：CS=2000H，IP=0，DS=1000H，AX=0，BX=0；
    ①写出CPU执行的指令序列（用汇编指令写出）
    ②写出CPU执行每条指令后，CS、IP和相关寄存器中的数值。
    ③再次体会：数据和程序有区别吗？如何确定内存中的信息哪些是数据，哪些是程序？&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;指令&lt;/th&gt;
&lt;th align="center"&gt;CS:IP&lt;/th&gt;
&lt;th align="center"&gt;DS&lt;/th&gt;
&lt;th align="center"&gt;AX&lt;/th&gt;
&lt;th align="center"&gt;BX&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov ax, 6622H&lt;/td&gt;
&lt;td align="center"&gt;2000:3&lt;/td&gt;
&lt;td align="center"&gt;1000H&lt;/td&gt;
&lt;td align="center"&gt;6622H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;jmp 0ff0:0100&lt;/td&gt;
&lt;td align="center"&gt;2000:8-&amp;gt;1000:0&lt;/td&gt;
&lt;td align="center"&gt;1000H&lt;/td&gt;
&lt;td align="center"&gt;6622H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov ax, 2000H&lt;/td&gt;
&lt;td align="center"&gt;1000:3&lt;/td&gt;
&lt;td align="center"&gt;1000H&lt;/td&gt;
&lt;td align="center"&gt;2000H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov ds, ax&lt;/td&gt;
&lt;td align="center"&gt;1000:5&lt;/td&gt;
&lt;td align="center"&gt;2000H&lt;/td&gt;
&lt;td align="center"&gt;2000H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov ax, [0008]&lt;/td&gt;
&lt;td align="center"&gt;1000:8&lt;/td&gt;
&lt;td align="center"&gt;2000H&lt;/td&gt;
&lt;td align="center"&gt;C389H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov ax, [0002]&lt;/td&gt;
&lt;td align="center"&gt;1000:B&lt;/td&gt;
&lt;td align="center"&gt;2000H&lt;/td&gt;
&lt;td align="center"&gt;EA66H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;程序和数据没有区别，本质上都是二进制01码，关键在于CPU如何解读。&lt;/p&gt;
&lt;h3&gt;检测点 3.2&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。逆序复制的含义如图3.17所示（图中内存里的数据均为假设）。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 1000H
mov ds, ax
__________
__________
__________
push [0]
push [2]
push [4]
push [6]
push [8]
push [A]
push [C]
push [E]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 2000H
mov ss, ax
mov sp, 0010H
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;补全下面的程序，使其可以将10000H～1000FH中的8个字，逆序复制到20000H～2000FH中。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 2000H
mov ds, ax
__________
__________
__________
pop [E]
pop [C]
pop [A]
pop [8]
pop [6]
pop [4]
pop [2]
pop [0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 1000H
mov ss, ax
mov sp, 0
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第六章 包含多个段的程序&lt;/h2&gt;
&lt;h3&gt;检测点 6.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，完成程序：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg

codesg segment
    dw 0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h

start:  mov ax, 0
    mov ds, ax
    mov bx, 0

    mov cx, 8
s:  mov ax, [bx]
    _________
    add bx, 2
    loop s

    mov ax, 4c00h
    int 21h

codesg ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov cs:[bx], ax
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;下面的程序实现依此用内存0:0-0:15单元中的内容改写程序中的数据，数据的传送用栈来进行。栈空间设置在程序内。完成程序：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg
    dw 0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h

    dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

start:  mov ax, ____
    mov ss, ax
    mov sp, ____

    mov ax, 0
    mov ds, ax
    mov bx, 0
    mov cx, 8
s:  push [bx]
    ____________
    add bx, 2
    loop s

    mov ax, 4c00h
    int 21h

codesg ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0
24h
pop cs:[bx]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第九章 转移指令的原理&lt;/h2&gt;
&lt;h3&gt;检测点 9.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;程序如下&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

data segment
    ___________
data ends

code segment
start:  mov ax, data
    mov ds, ax
    mov bx, 0
    jmp word ptr [bx+1]

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;若要使程序中的jmp指令执行后，CS:IP指向程序的第一条指令，在data段中应该定义哪些数据？
答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dw 0, 0
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;程序如下&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

data segment
    dd 12345678H
data ends

code segment

start:  mov ax, data
    mov ds, ax
    mov bx, 0
    mov [bx], ____
    mov [bx + 2], ____
    jmp dword ptr ds:[0]

code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;补全程序，使jmp指令执行后，CS:IP指向程序的第一条指令。
答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bx
cs
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意：bx指向低位，bx+2指向高位，低位为IP，而高位为CS。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用Debug查看内存，结果如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="n"&gt;BE&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;06&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="o"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;则此时，CPU执行指令后，(CS)=?，(IP)=?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 2000H
mov es, ax
jmp dword ptr es:[1000H]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：
(CS)=0006，(IP)=00BE&lt;/p&gt;
&lt;h3&gt;检测点 9.2&lt;/h3&gt;
&lt;p&gt;补全编程，利用jcxz指令，实现在内存2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
start:  mov ax, 2000H
    mov ds, ax
    mov bx, 0
s:  __________
    __________
    __________
    __________
    jmp short s
ok: mov dx, bx
    mov ax, 4c00h
    int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov cl, [bx]
mov ch, 0 ;注意这一步的必要性
jcxz ok
inc bx
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 9.3&lt;/h3&gt;
&lt;p&gt;补全编程，利用loop指令，实现在内存的2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存储在dx中。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
start:  mov ax, 2000H
    mov ds, ax
    mov bx, 0
s:  mov cl, [bx]
    mov ch, 0
    _________
    inc bx
    loop s
ok: dec bx
    mov dx, bx
    mov ax, 4c00h
    int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;inc cx ;注意loop的工作原理
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第十章 CALL和RET指令&lt;/h2&gt;
&lt;h3&gt;检测点 10.1&lt;/h3&gt;
&lt;p&gt;补全程序，实现从内存1000：0000处开始执行指令。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code

stack segment
    db 16 dup (0)
stack ends

code segment
start:  mov ax,stack
    mov ss,ax
    mov sp,16
    mov ax, ____
    push ax
    mov ax, ____ 
    push ax
    retf
code ends

end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1000h
0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 10.2&lt;/h3&gt;
&lt;p&gt;下面的程序执行后，ax中的数值为多少？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;内存地址&lt;/th&gt;
&lt;th align="center"&gt;机器码&lt;/th&gt;
&lt;th align="center"&gt;汇编指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:0&lt;/td&gt;
&lt;td align="center"&gt;b8 00 00&lt;/td&gt;
&lt;td align="center"&gt;mov ax,0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:3&lt;/td&gt;
&lt;td align="center"&gt;e8 01 00&lt;/td&gt;
&lt;td align="center"&gt;call s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:6&lt;/td&gt;
&lt;td align="center"&gt;40&lt;/td&gt;
&lt;td align="center"&gt;inc ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:7&lt;/td&gt;
&lt;td align="center"&gt;58&lt;/td&gt;
&lt;td align="center"&gt;s:   pop ax&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ax中的数值为6，注意执行完call s后，IP先变为6，然后将IP的值压栈，最后跳转至s。&lt;/p&gt;
&lt;h3&gt;检测点 10.3&lt;/h3&gt;
&lt;p&gt;下面的程序执行后，ax中的数值为多少？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;内存地址&lt;/th&gt;
&lt;th align="center"&gt;机器码&lt;/th&gt;
&lt;th align="center"&gt;汇编指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:0&lt;/td&gt;
&lt;td align="center"&gt;b8 00 00&lt;/td&gt;
&lt;td align="center"&gt;mov ax,0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:3&lt;/td&gt;
&lt;td align="center"&gt;9a 09 00 00 10&lt;/td&gt;
&lt;td align="center"&gt;call far ptr s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:8&lt;/td&gt;
&lt;td align="center"&gt;40&lt;/td&gt;
&lt;td align="center"&gt;inc ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:9&lt;/td&gt;
&lt;td align="center"&gt;58&lt;/td&gt;
&lt;td align="center"&gt;s:   pop ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;add ax,ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;pop bx&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;add ax,bx&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ax中的数值为1010H，注意执行完call far ptr s后，IP先变为8，然后将CS、IP的值分别为1000和8依此压栈，最后再跳转至s继续执行。&lt;/p&gt;
&lt;h3&gt;检测点 10.4&lt;/h3&gt;
&lt;p&gt;下面的程序执行后，ax中的数值为多少？&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;内存地址&lt;/th&gt;
&lt;th align="center"&gt;机器码&lt;/th&gt;
&lt;th align="center"&gt;汇编指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:0&lt;/td&gt;
&lt;td align="center"&gt;b8 06 00&lt;/td&gt;
&lt;td align="center"&gt;mov ax,6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:3&lt;/td&gt;
&lt;td align="center"&gt;ff d0&lt;/td&gt;
&lt;td align="center"&gt;call ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:5&lt;/td&gt;
&lt;td align="center"&gt;40&lt;/td&gt;
&lt;td align="center"&gt;inc ax&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;1000:6&lt;/td&gt;
&lt;td align="center"&gt;58&lt;/td&gt;
&lt;td align="center"&gt;mov bp,sp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;td align="center"&gt;add ax,[bp]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;ax中的数值为0BH，分析方法类似检测点10.2&lt;/p&gt;
&lt;h3&gt;检测点 10.5&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下面的程序执行后，ax中的数值为多少？&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
stack segment
    dw 8 dup (0)
stack ends
code segment
start:  mov ax,stack
    mov ss,ax
    mov sp,16
    mov ds,ax
    mov ax,0
    call word ptr ds:[0eh]
    inc ax
    inc ax
    inc ax
    mov ax,4c00h
    int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ax中的数值为3，注意ds与ss中存放的段地址相同，在执行了call word ptr ds:[0EH]之后，程序会先将下一条指令inc ax的偏移量压栈，然后跳转到栈顶所指向的指令的位置，即跳转至第一条inc ax的位置，故最后ax的值为3。&lt;/p&gt;
&lt;p&gt;注意：在使用Debug单步跟踪的时候，由于t命令所导致的中断，而影响了栈中的值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下面的程序执行后，ax和bx中的数值为多少？&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:codesg
data segment
    dw 8 dup (0)
data ends
code segment
start:  mov ax,data
    mov ss,ax
    mov sp,16
    mov word ptr ss:[0],offset s
    mov ss:[2],cs
    call dword ptr ss:[0]
    nop
s:  mov ax,offset s
    sub ax,ss:[0ch]     
    mov bx,cs
    sub bx,ss:[0eh]
    mov ax,4c00h
    int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ax中的数值为1，bx中的数值为0，注意到程序的一开始将a的偏移量和cs放入ss:[0]和ss:[2]中，然后调用call指令，将CS和IP(nop指令的偏移量)依此压栈后跳转到s处继续执行，ax最终为s的偏移量减去nop指令所在位置的偏移量，为1，bx最终为cs的段地址相减，为0。&lt;/p&gt;
&lt;h2&gt;第十一章 标志寄存器&lt;/h2&gt;
&lt;h3&gt;检测点 11.1&lt;/h3&gt;
&lt;p&gt;写出下面每条指令执行后，ZF、PF、SF等标志位的值&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;指令&lt;/th&gt;
&lt;th align="center"&gt;ZF&lt;/th&gt;
&lt;th align="center"&gt;PF&lt;/th&gt;
&lt;th align="center"&gt;SF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;sub al, al&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov al, 1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;push ax&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;pop bx&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add al, bl&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add bl, 10&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mul al&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;检测点 11.2&lt;/h3&gt;
&lt;p&gt;写出下面每条指令执行后，ZF、PF、SF、CF、OF等标志位的值&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;指令&lt;/th&gt;
&lt;th align="center"&gt;CF&lt;/th&gt;
&lt;th align="center"&gt;OF&lt;/th&gt;
&lt;th align="center"&gt;SF&lt;/th&gt;
&lt;th align="center"&gt;ZF&lt;/th&gt;
&lt;th align="center"&gt;PF&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;sub al, al&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov al, 10H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add al, 90H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov al, 80H&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add al, 80H&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov al, 0FCH&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add al, 05H&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;mov al, 7DH&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;add al, 0BH&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;td align="center"&gt;0&lt;/td&gt;
&lt;td align="center"&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;检测点 11.3&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;补全下面的程序，统计F000:0处32个字节中，大小在[32,128]的数据的个数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mov ax, 0f000h
    mov ds, ax

    mov bx, 0
    mov dx, 0
    mov cx, 32
s:  mov al, [bx]
    cmp al, 32
    __________
    cmp al, 128
    __________
    inc dx
s0: inc bx
    loop s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jb s0
ja s0
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;补全下面的程序，统计F000:0处32个字节中，大小在(32,128)的数据的个数。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mov ax, 0f000h
    mov ds, ax

    mov bx, 0
    mov dx, 0
    mov cx, 32
s:  mov al, [bx]
    cmp al, 32
    __________
    cmp al, 128
    __________
    inc dx
    s0: inc bx
    loop s
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jna s0
jnb s0
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 11.4&lt;/h3&gt;
&lt;p&gt;下面的程序执行后：(ax)=?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, 0
push ax
popf ;将PSW置0(本章所学习的标志位都为0)
mov ax, 0fff0h
add ax, 0010h ;修改相关标志位
pushf
pop ax ;(将PSW保存至ax)
and al, 11000101B
and ah, 00001000B ;只考虑CF,PF,ZF,SF,OF五个标志位
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：
(ax)=45H&lt;/p&gt;
&lt;h2&gt;第十二章 内中断&lt;/h2&gt;
&lt;h3&gt;检测点 12.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用Debug查看内存，情况如下：
    0000:0000 68 10 A7 00 8B 01 70 00-16 00 9D 03 8B 01 70 00
    则3号中断源对应的中断处理程序的入口地址为：&lt;strong&gt;&lt;em&gt;_&lt;/em&gt;&lt;/strong&gt;_____&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;p&gt;0070:018B&lt;/p&gt;
&lt;p&gt;注意高地址存放段地址，低地址存放偏移地址&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;存储N号中断源对应的中断处理程序入口的偏移地址的内存单元的地址为：&lt;strong&gt;&lt;em&gt;_
    存储N号中断源对应的中断处理程序入口的段地址的内存单元的地址为：&lt;/em&gt;&lt;/strong&gt;_&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案：4N，4N+2&lt;/p&gt;
&lt;h2&gt;第十三章 int指令&lt;/h2&gt;
&lt;h3&gt;检测点 13.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在上面的内容中，我们用7ch中断例程实现loop的功能，则上面的7ch中断例程所能进行的最大转移位移为多少？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案：65535&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用7ch中断例程完成jmp near ptr s指令的功能，用bx向中断例程传送转移位移。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;jnp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;
    &lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sp&lt;/span&gt;
    &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;bp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;bx&lt;/span&gt;
    &lt;span class="n"&gt;pop&lt;/span&gt; &lt;span class="n"&gt;bp&lt;/span&gt;
    &lt;span class="n"&gt;iret&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 13.2&lt;/h3&gt;
&lt;p&gt;判断下面说法的正误：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我们可以编程改变FFFF:0处的指令，使得CPU不去执行BIOS中的硬件系统检测和初始化程序。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;错误：FFFF:0处的内容无法修改&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;int 19h中断例程，可以由DOS提供。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;错误：此时DOS还未被引导&lt;/p&gt;
&lt;h2&gt;第十四章 端口&lt;/h2&gt;
&lt;h3&gt;检测点 14.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;编程，读取CMOS RAM的2号单元的内容。&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov al, 2
out 70h, 2
in al, 71h
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;编程，向CMOS RAM的2号单元写入0。 &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov al, 2
out 70h, 2
mov al, 0
out 71h, al
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;检测点 14.2&lt;/h3&gt;
&lt;p&gt;编程，用加法和位移指令计算(ax)=(ax)*10。
提示，(ax)*10=(ax)*2+(ax)*8。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov bx, ax
shl ax, 1
mov cl, 3
shl bx, cx
add ax, bx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第十五章 外中断&lt;/h2&gt;
&lt;h3&gt;检测点 15.1&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;仔细分析一下上面的int 9中断例程，看看是否可以精简一下？
    其实在我们的int 9中断例程中，模拟int指令调用原int 9中断例程的程序段是可以精简的，因为在进入中断例程后，IF和TF都已经置0，没有必要再进行设置了。对于程序段：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushf
pushf
pop ax
and ah, 11111100B
push ax
popf
call dword ptr ds:[0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;可以精简为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pushf
call dword ptr ds:[0]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;两条指令。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仔细分析上面程序中的主程序，看看有什么潜在的问题？
    在主程序中，如果在执行设置int 9中断例程的段地址和偏移地址的指令之间发生了键盘中断，则CPU将转去一个错误的地址执行，将发生错误。
    找出这样的程序段，改写它们，排除潜在的问题。
    提示，注意sti和cli指令的用法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cli
mov word ptr es:[9*4],offset int9
mov word ptr es:[9*4+2],cs
sti
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以及：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cli
push ds:[0]
pop es:[9*4]
push ds:[2]
pop es:[9*4+2]
sti
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第十六章 直接定址表&lt;/h2&gt;
&lt;h3&gt;检测点 16.1&lt;/h3&gt;
&lt;p&gt;下面的程序将code段中a处的8个数据累加，结果存储到b处的双字中，补全程序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code
code segment
    a dw 1, 2, 3, 4, 5, 6, 7, 8
    b dd 0
start:  mov si, 0
    mov cx, 8
s:  mov ax, ____
    add ____, ax
    adc ____, 0
    add si, ____
    loop s

    mov ax, 4c00h
    int 21h

code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;a[si]
word ptr b[0]
word ptr b[2]
2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;注意word ptr的使用&lt;/p&gt;
&lt;h3&gt;检测点 16.2&lt;/h3&gt;
&lt;p&gt;下面的程序将data段中a处的8个数据累加，结果存储到b处的字中，补全程序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;assume cs:code, es:data

data segment
a   db 1, 2, 3, 4, 5, 6, 7, 8
b   dw 0
data ends

code segment
start:  __________
    __________
    mov si, 0
    mov cx, 8
s:  mov al, a[si]
    mov ah, 0
    add b, ax
    inc si
    loop s

    mov ax, 4c00h
    int 21h
code ends
end start
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mov ax, data
mov es, ax
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;第十七章 使用BIOS进行键盘输入和磁盘读写&lt;/h2&gt;
&lt;h3&gt;检测点 17.1&lt;/h3&gt;
&lt;p&gt;“在int 16h中断例程中，一定有设置IF=1的指令”，这种说法对吗？&lt;/p&gt;
&lt;p&gt;正确，int 16h中断例程在键盘缓冲区中没有数据时，会等待直到键盘缓冲区中有数据为止，因此，int 16h中需要处理int 9h中断，所以一定有设置IF=1的指令。&lt;/p&gt;
&lt;p&gt;over&lt;/p&gt;</content><category term="答案"></category><category term="汇编"></category></entry><entry><title>Java泛型中List、List&lt;Object&gt;、List&lt;?&gt;的区别</title><link href="/javafan-xing-zhong-list-listobject-listde-qu-bie.html" rel="alternate"></link><published>2017-02-14T16:30:00+08:00</published><updated>2017-02-14T16:30:00+08:00</updated><author><name>Di Wu</name></author><id>tag:None,2017-02-14:/javafan-xing-zhong-list-listobject-listde-qu-bie.html</id><summary type="html">&lt;p&gt;Java 1.5中引入了泛型的概念以增加代码的安全性与清晰度，同时为了提供对旧代码的兼容性，让旧代码不经过改动也可以在新版本中运行，Java提供了原生态类型（或称原始类型）。但是实际中在新的代码中已经不应该使用原生态类型。&lt;/p&gt;
&lt;p&gt;原生态类型的含义是不带任何实际参数的泛型名称，例如Java 1.5后改为泛型实现的&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;，&lt;code&gt;List&lt;/code&gt;就是它的原生态类型，与没有引入泛型之前的类型完全一致。&lt;/p&gt;
&lt;p&gt;而在虚拟机层面上，是没有泛型这一概念的——所有对象都属于普通类。在编译时，所有的泛型类都会被视为原生态类型。&lt;/p&gt;
&lt;p&gt;那么为什么不应该使用原生态类型呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用原生态类型，就失掉了泛型在安全性和表述性方面的所有优势。——Effective Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;泛型的目的简单地说就是可以让一些运行时才能发现的错误可以在编译期间就可以被编译器所检测出，运行时出问题的代价与编译期出现问题的代价的差别可想而知。换句话说，泛型是编译器的一种及时发现错误的机制，同时也给用户带来了代码的清晰与简洁的附加好处（不必再写一些复杂而危险并且不直观的强制类型转换）。&lt;/p&gt;
&lt;p&gt;下面就进入正题谈谈以&lt;code&gt;List&lt;/code&gt;为例时&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;、&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;的区别。&lt;/p&gt;
&lt;p&gt;先下定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;：&lt;strong&gt;原生态类型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;：&lt;strong&gt;参数化的类型&lt;/strong&gt;，表明&lt;code&gt;List&lt;/code&gt;中可以 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Java 1.5中引入了泛型的概念以增加代码的安全性与清晰度，同时为了提供对旧代码的兼容性，让旧代码不经过改动也可以在新版本中运行，Java提供了原生态类型（或称原始类型）。但是实际中在新的代码中已经不应该使用原生态类型。&lt;/p&gt;
&lt;p&gt;原生态类型的含义是不带任何实际参数的泛型名称，例如Java 1.5后改为泛型实现的&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;，&lt;code&gt;List&lt;/code&gt;就是它的原生态类型，与没有引入泛型之前的类型完全一致。&lt;/p&gt;
&lt;p&gt;而在虚拟机层面上，是没有泛型这一概念的——所有对象都属于普通类。在编译时，所有的泛型类都会被视为原生态类型。&lt;/p&gt;
&lt;p&gt;那么为什么不应该使用原生态类型呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果使用原生态类型，就失掉了泛型在安全性和表述性方面的所有优势。——Effective Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;泛型的目的简单地说就是可以让一些运行时才能发现的错误可以在编译期间就可以被编译器所检测出，运行时出问题的代价与编译期出现问题的代价的差别可想而知。换句话说，泛型是编译器的一种及时发现错误的机制，同时也给用户带来了代码的清晰与简洁的附加好处（不必再写一些复杂而危险并且不直观的强制类型转换）。&lt;/p&gt;
&lt;p&gt;下面就进入正题谈谈以&lt;code&gt;List&lt;/code&gt;为例时&lt;code&gt;List&lt;/code&gt;、&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;、&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;的区别。&lt;/p&gt;
&lt;p&gt;先下定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;：&lt;strong&gt;原生态类型&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;：&lt;strong&gt;参数化的类型&lt;/strong&gt;，表明&lt;code&gt;List&lt;/code&gt;中可以&lt;strong&gt;容纳&lt;/strong&gt;任意类型的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;：&lt;strong&gt;无限定通配符类型&lt;/strong&gt;，表示&lt;strong&gt;只能包含某一种未知对象类型&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面看一段代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DiffInGeneric&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//ok&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//Error: java: incompatible types: java.util.List&amp;lt;java.lang.String&amp;gt; cannot be converted to java.util.List&amp;lt;java.lang.Object&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们创建了一个&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;类型的对象&lt;code&gt;strings&lt;/code&gt;，再把它赋给原生态类型&lt;code&gt;List&lt;/code&gt;，这是可以的。但是第5行中尝试把它传递给&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;时，出现了一个类型不相容错误，注意，这是一个编译期错误。&lt;/p&gt;
&lt;p&gt;这是因为泛型有子类型化的规则：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;是原生态类型&lt;code&gt;List&lt;/code&gt;的一个子类型。虽然&lt;code&gt;String&lt;/code&gt;是&lt;code&gt;Object&lt;/code&gt;的子类型，但是由于&lt;strong&gt;泛型是不可协变的&lt;/strong&gt;，&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;并不是&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;的子类型，所以这里的传递无法通过编译。&lt;/p&gt;
&lt;p&gt;如果像上面那样使用原生态类型会有什么隐患呢？看下面一段代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DiffInGeneric&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;unsafeAdd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unsafeAdd&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;object&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;编译器提示了两条警告：&lt;/p&gt;
&lt;p&gt;第8行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;warning: &lt;span class="o"&gt;[&lt;/span&gt;rawtypes&lt;span class="o"&gt;]&lt;/span&gt; found raw type: List
private static void unsafeAdd&lt;span class="o"&gt;(&lt;/span&gt;List list, Object object&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                              ^
missing &lt;span class="nb"&gt;type&lt;/span&gt; arguments &lt;span class="k"&gt;for&lt;/span&gt; generic class List&amp;lt;E&amp;gt;
where E is a type-variable:
    E extends Object declared in interface List
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;警告发现了原生态类型&lt;code&gt;List&lt;/code&gt;，同时还贴心地指出了&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;的形式以及&lt;code&gt;E&lt;/code&gt;的来源。&lt;/p&gt;
&lt;p&gt;第9行：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;warning: &lt;span class="o"&gt;[&lt;/span&gt;unchecked&lt;span class="o"&gt;]&lt;/span&gt; unchecked call to add&lt;span class="o"&gt;(&lt;/span&gt;E&lt;span class="o"&gt;)&lt;/span&gt; as a member of the raw &lt;span class="nb"&gt;type&lt;/span&gt; List
        list.add&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                ^
 where E is a type-variable:
    E extends Object declared in interface List
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;同样指出了我们正在把一个对象添加到&lt;code&gt;List&lt;/code&gt;中，而这个添加过程由于我们使用了原生态类型而无法被检验。&lt;/p&gt;
&lt;p&gt;如果忽略这两条警告并运行这个程序，显然会出现一条错误：&lt;/p&gt;
&lt;p&gt;第5行： &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;thread&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ClassCastException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;cannot&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;String&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;我们试图把一个自动装箱后的&lt;code&gt;Integer&lt;/code&gt;对象插入到了一个被声明为&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;的&lt;code&gt;List&lt;/code&gt;中，由于我们在&lt;code&gt;unsafeAdd&lt;/code&gt;方法中使用了原生态类型，从而使得编译器无法在编译期间检查&lt;code&gt;add&lt;/code&gt;参数的合法性，从而没有产生编译错误而是产生了一条警告，运行后当试图把这个错误的&lt;code&gt;Integer&lt;/code&gt;对象作为&lt;code&gt;String&lt;/code&gt;取出时就会出现&lt;code&gt;ClassCaseException&lt;/code&gt;异常，这是个运行时的异常，导致了程序中断。&lt;/p&gt;
&lt;p&gt;如果我们把&lt;code&gt;unsafeAdd&lt;/code&gt;方法的参数从&lt;code&gt;List&lt;/code&gt;改为&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;会发生什么呢？正如之前所说的那样，由于&lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt;并不是&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;的子类型，所以在传递参数的时候就会出现第一段代码中出现的&lt;strong&gt;编译期错误&lt;/strong&gt;。这体现了泛型所带来的安全性。&lt;/p&gt;
&lt;p&gt;可以这么说，&lt;code&gt;List&amp;lt;Object&amp;gt;&lt;/code&gt;唯一特殊的地方只是&lt;code&gt;Object&lt;/code&gt;是所有类型的超类，由于泛型的不可协变性，&lt;strong&gt;它只能表示&lt;code&gt;List&lt;/code&gt;中可以容纳所有类型的对象，却不能表示任何参数类型的&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;则是通配符类型中的一种特例，它并没有&lt;code&gt;extend&lt;/code&gt;或&lt;code&gt;super&lt;/code&gt;这样的限制，从而可以做到引用任意参数类型的&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;。但由于没有表示类型的符号（&lt;code&gt;E&lt;/code&gt;），在方法中无法引用这个类型，所以它只用于无需使用具体类型的方法之中，如果不是这个情况，则需要使用泛型方法（只用&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;的&lt;strong&gt;不是&lt;/strong&gt;一个泛型方法，它具有&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;这个固定的参数`）。&lt;/p&gt;
&lt;p&gt;但是&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;还是不能用作上面的&lt;code&gt;unsafeAdd&lt;/code&gt;的参数，修改后会出现一条奇怪的编译错误：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: no suitable method found &lt;span class="k"&gt;for&lt;/span&gt; add&lt;span class="o"&gt;(&lt;/span&gt;Object&lt;span class="o"&gt;)&lt;/span&gt;
        list.add&lt;span class="o"&gt;(&lt;/span&gt;object&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        ^
method Collection.add&lt;span class="o"&gt;(&lt;/span&gt;CAP#1&lt;span class="o"&gt;)&lt;/span&gt; is not applicable
  &lt;span class="o"&gt;(&lt;/span&gt;argument mismatch&lt;span class="p"&gt;;&lt;/span&gt; Object cannot be converted to CAP#1&lt;span class="o"&gt;)&lt;/span&gt;
method List.add&lt;span class="o"&gt;(&lt;/span&gt;CAP#1&lt;span class="o"&gt;)&lt;/span&gt; is not applicable
  &lt;span class="o"&gt;(&lt;/span&gt;argument mismatch&lt;span class="p"&gt;;&lt;/span&gt; Object cannot be converted to CAP#1&lt;span class="o"&gt;)&lt;/span&gt;
where CAP#1 is a fresh type-variable:
    CAP#1 extends Object from capture of ?
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这是因为无法将任何元素（&lt;code&gt;null&lt;/code&gt;除外）放入&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;中。这又是为什么呢？先来看一个有限定通配符的例子：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DiffInGeneric&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;第7行报出了与之前相似的编译错误：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;error: no suitable method found &lt;span class="k"&gt;for&lt;/span&gt; add&lt;span class="o"&gt;(&lt;/span&gt;Integer&lt;span class="o"&gt;)&lt;/span&gt;
    numbers.add&lt;span class="o"&gt;(&lt;/span&gt;new Integer&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           ^
method Collection.add&lt;span class="o"&gt;(&lt;/span&gt;CAP#1&lt;span class="o"&gt;)&lt;/span&gt; is not applicable
  &lt;span class="o"&gt;(&lt;/span&gt;argument mismatch&lt;span class="p"&gt;;&lt;/span&gt; Integer cannot be converted to CAP#1&lt;span class="o"&gt;)&lt;/span&gt;
method List.add&lt;span class="o"&gt;(&lt;/span&gt;CAP#1&lt;span class="o"&gt;)&lt;/span&gt; is not applicable
  &lt;span class="o"&gt;(&lt;/span&gt;argument mismatch&lt;span class="p"&gt;;&lt;/span&gt; Integer cannot be converted to CAP#1&lt;span class="o"&gt;)&lt;/span&gt;
where CAP#1 is a fresh type-variable:
    CAP#1 extends Number from capture of ? extends Number
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这次我们可以看出错误的原因：可以将一个&lt;code&gt;List&amp;lt;Integer&amp;gt;&lt;/code&gt;传递给&lt;code&gt;List&amp;lt;? extends Number&amp;gt;&lt;/code&gt;，因为&lt;code&gt;Integer&lt;/code&gt;是&lt;code&gt;Number&lt;/code&gt;的子类，符合限定符的条件。同理，也可以将类似的对象传递给它，当然也可以把&lt;code&gt;List&amp;lt;Number&amp;gt;&lt;/code&gt;传递给它。&lt;/p&gt;
&lt;p&gt;如果允许这个对象的&lt;code&gt;add&lt;/code&gt;操作，我们无法知道这个参数是否与对象的泛型参数相同，因为我们只知道它是&lt;code&gt;Number&lt;/code&gt;的一个子类。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Child&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;();&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;?&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Parent&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面的1,2两行是完全合法的，如果允许第3行的&lt;code&gt;add&lt;/code&gt;操作，那么会把一个&lt;code&gt;Parent&lt;/code&gt;对象加入到一个实际类型是&lt;code&gt;Child&lt;/code&gt;的&lt;code&gt;List&lt;/code&gt;中，而&lt;code&gt;Parent&lt;/code&gt;is-not-a &lt;code&gt;Child&lt;/code&gt;，这破坏了Java的类型安全，是绝对不允许的。&lt;/p&gt;
&lt;p&gt;上面是有限制通配符的情况，那么针对&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;这样的无限制通配符更是如此。因此，为了保证类型安全，不允许对&lt;code&gt;List&amp;lt;?&amp;gt;&lt;/code&gt;或&lt;code&gt;List&amp;lt;? extends E&amp;gt;&lt;/code&gt;这样的通配符类型进行类似&lt;code&gt;add&lt;/code&gt;的操作。&lt;/p&gt;
&lt;p&gt;使用泛型方法可以避免这个问题（重申通配符类型并不是泛型方法），使用无限制通配符类型可以取代其他需要表示&lt;strong&gt;包含某一种对象类型的泛型类型&lt;/strong&gt;的情况而不是使用原生态类型&lt;code&gt;List&lt;/code&gt;。&lt;/p&gt;</content><category term="java"></category></entry></feed>