<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>华科美团点评技术俱乐部 - ALG</title><link href="/" rel="alternate"></link><link href="/feeds/alg.atom.xml" rel="self"></link><id>/</id><updated>2017-10-14T21:38:57+08:00</updated><entry><title>Advancing B-trees w</title><link href="/advancing-b-trees-w.html" rel="alternate"></link><published>2017-10-14T21:38:57+08:00</published><updated>2017-10-14T21:38:57+08:00</updated><author><name>Huatian Zhou</name></author><id>tag:None,2017-10-14:/advancing-b-trees-w.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;（续上文）&lt;/p&gt;
&lt;p&gt;--  什么？B树？&lt;/p&gt;
&lt;p&gt;--  不好意思，我不仅有B树，我还有……w&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;emmm，虽然 B 树已经提供了相当优秀的使用体验了，但是如果要真的使用它来做文件系统，我们还需要一些小小的改动w&lt;/p&gt;
&lt;p&gt;这篇博客将介绍一部分的这些改动，下一篇博客就要用 &lt;code&gt;btrfs&lt;/code&gt; 作为例子来介绍 B 树在文件系统里的应用了w&lt;/p&gt;
&lt;p&gt;（啊……我就在用 &lt;code&gt;btrfs&lt;/code&gt; w...&lt;/p&gt;
&lt;h2&gt;0x00 B+ trees&lt;/h2&gt;
&lt;p&gt;![B+ trees example](https://upload.wikimedia.org/wikipedia/commons/3/37/Bplustree.png A Example of B+ Tree)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Grundprinzip&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Wikipedia&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tree …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;（续上文）&lt;/p&gt;
&lt;p&gt;--  什么？B树？&lt;/p&gt;
&lt;p&gt;--  不好意思，我不仅有B树，我还有……w&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;emmm，虽然 B 树已经提供了相当优秀的使用体验了，但是如果要真的使用它来做文件系统，我们还需要一些小小的改动w&lt;/p&gt;
&lt;p&gt;这篇博客将介绍一部分的这些改动，下一篇博客就要用 &lt;code&gt;btrfs&lt;/code&gt; 作为例子来介绍 B 树在文件系统里的应用了w&lt;/p&gt;
&lt;p&gt;（啊……我就在用 &lt;code&gt;btrfs&lt;/code&gt; w...&lt;/p&gt;
&lt;h2&gt;0x00 B+ trees&lt;/h2&gt;
&lt;p&gt;![B+ trees example](https://upload.wikimedia.org/wikipedia/commons/3/37/Bplustree.png A Example of B+ Tree)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Grundprinzip&lt;/span&gt;
&lt;span class="n"&gt;From&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Wikipedia&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;
&lt;span class="n"&gt;License&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Creative&lt;/span&gt; &lt;span class="n"&gt;Commons&lt;/span&gt; &lt;span class="n"&gt;Attribution&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt; &lt;span class="n"&gt;Unported&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;B+ tree&lt;/code&gt; 是 B 树的一种变种，它使用一种不同的模式来存储键值对：在非叶子节点中，仅存储键，在叶子节点中，存储键和指向值的连接（参考上图）。&lt;/p&gt;
&lt;p&gt;由于这种设计模式，B+ 树的根节点要么是叶子节点，要么是有两个或者以上键的非叶子节点。&lt;/p&gt;
&lt;p&gt;首先定义 &lt;code&gt;b(branching factor)&lt;/code&gt; 是 B+ 树的一个节点最大拥有的子节点的数量，那么：&lt;/p&gt;
&lt;p&gt;非根节点的最小键数量是&lt;code&gt;上取整(b/2)-1&lt;/code&gt; （最大键数量当然是……）。根节点和 B 树一样不受限制。&lt;/p&gt;
&lt;p&gt;B+ 树的插入、删除、查找算法都与 B 树没有较大的区别。但是有一点需要注意的是，B+ 树为了保证能够实现常数时间复杂度的前驱后继（在文件系统实现当中，这是一个非常重要的特性），所以将叶子节点的最后一个指针指向了它的紧邻的右子节点，这让整个 B+ 树的叶子节点的值形成了有序的链表。在执行操作时，务必对这些指针进行维护。&lt;/p&gt;
&lt;h2&gt;0x01 B-link Tree&lt;/h2&gt;
&lt;p&gt;为了解决 B 树的并行访问问题（写时读，一个成熟的文件系统不可能在写的时候不允许读取），B-link 树被设计了出来 ( &lt;code&gt;Efficient Looking for Concurrent Operations on B-Trees, 1981&lt;/code&gt; )。&lt;/p&gt;
&lt;p&gt;B 树没有办法在写的时候读取的问题在于写入可能会导致树平衡，从而修改树的结构。&lt;/p&gt;
&lt;p&gt;B-link 树采用了增加一个指针来解决这个问题。它在所有 B 树原来的节点上增加了一个指针，这个指针指向了它紧邻的右节点。在树结构变换时，会首先保证这个指针被更新。在这种情况下，由树结构改变导致的节点无法访问可以通过指针来访问到。&lt;/p&gt;
&lt;p&gt;接下来将简要介绍 B-link 树的算法。由于增加了指针，它的一些算法和一般的 B 树略有区别w&lt;/p&gt;
&lt;h3&gt;Search&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;按照 B 树的方式找到它应该在的叶子节点。&lt;/li&gt;
&lt;li&gt;如果它在那个节点，那么就查找到了&lt;/li&gt;
&lt;li&gt;如果它不在，用指针向右遍历。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Insertion&lt;/h3&gt;
&lt;p&gt;注意所有修改节点和节点关系的操作都是需要加锁的。&lt;/p&gt;
&lt;p&gt;关键的区别产生在将节点拆分的过程。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先创建拆分后的右子节点，将数据复制进去，并将它的后继指针指向原先的后继。&lt;/li&gt;
&lt;li&gt;将原先节点的后继指向新的右子节点，然后将应该复制进去的数据删除。&lt;/li&gt;
&lt;li&gt;最后将这个右子节点连接到父节点上。如果这个连接过程使得父节点需要拆分，那么递归向上。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意在拆分父节点的过程中，需要向右遍历：b-link 树的结构不适合维护指向父节点的指针，因此在更新某一子节点的过程中，父节点被并行的其它操作更新了。&lt;/p&gt;
&lt;h3&gt;Deletion&lt;/h3&gt;
&lt;p&gt;Emmmm... B-link 树使用了一种……比较emmm的方式解决删除的并行化w&lt;/p&gt;
&lt;p&gt;那就是仅删除键，不平衡树……&lt;/p&gt;
&lt;h2&gt;0x02 Shadowing &amp;amp; Cloning based on B+-trees&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;B-trees, Shadowing, and Clones ,Ohad Rodeh, 2007&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;emmmm...&lt;/p&gt;
&lt;p&gt;这篇论文说的是基于 B+ 树的 Shadowing 和 Cloning 实现（emmm 我不太清楚中文翻译过来是什么），但是实际上为了保证不会过分地 &lt;code&gt;Shadow&lt;/code&gt; 节点，将不维护指向紧邻右节点的指针。&lt;/p&gt;
&lt;h3&gt;Shadowing&lt;/h3&gt;
&lt;p&gt;什么是 Shadowing 呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Shadowing&lt;/code&gt; 就是在要修改某一个硬盘上的页（可能是存储树节点的、文件内容的、或者其他东西的区块）的时候，首先将它复制到另外一个地址，进行修改，再把指向原地址的指针改为指向新地址。&lt;/p&gt;
&lt;p&gt;这个机制可以有效保证在突然崩溃的情况下对文件系统的操作不会损坏原有的文件系统结构。但是它在应用到带有指向紧邻右节点的指针的 B 树的时候，会导致不得不对整棵树进行 &lt;code&gt;Shadow&lt;/code&gt; 。如果不维护这个指针，那么需要被 Shadow 的仅是从根节点到被修改节点的一条路径。&lt;/p&gt;
&lt;h4&gt;Concurrency...?&lt;/h4&gt;
&lt;p&gt;那么既然不维护指向紧邻右节点的指针，那么它要如何保证并行访问的性能呢？&lt;/p&gt;
&lt;p&gt;答案是使用一种更为积极的操作策略w&lt;/p&gt;
&lt;p&gt;相比传统的 B 树实现（在完成插入/删除操作后再进行节点的拆分/合并），为了达到较好的并行访问效率，这种结构将在寻找将要插入/删除的位置的过程中对遇到的达到上/下限的节点立即进行拆分/合并。&lt;/p&gt;
&lt;p&gt;这样可以保证对一个写入操作，同时需要加锁的节点最多只有一个节点和它的直接子节点。&lt;/p&gt;
&lt;h4&gt;Locking Scheme&lt;/h4&gt;
&lt;p&gt;在整个操作过程中，加解锁是按照以下策略进行的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不允许写时读&lt;/li&gt;
&lt;li&gt;不允许同时写&lt;/li&gt;
&lt;li&gt;允许同时读&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（也就是说，读写两种锁之间互斥，写锁之间互斥，读锁之间共享。&lt;/p&gt;
&lt;h3&gt;Clones&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Cloning&lt;/code&gt; 指的是快速地对整个文件系统进行快照的能力。这个特性的实现旨在能够快速地备份文件系统在某个时刻的状态，并且在将来能够只读地回溯到这个状态，或者将整个文件系统重置到当时的状态。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Cloning&lt;/code&gt; 的可用性取决于以下四个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空间效率：快照应当通过与当前文件系统尽可能地共享页面来节省空间消耗。&lt;/li&gt;
&lt;li&gt;速度：创建快照应当尽可能地快。&lt;/li&gt;
&lt;li&gt;快照数量：快照数量应当尽可能地多。&lt;/li&gt;
&lt;li&gt;操作自身：快照应当能够快照某个快照。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了达到以上这些特性，我们采用一种基于“引用计数”的方式。&lt;/p&gt;
&lt;p&gt;基本的思想是使用一个空闲空间表来存储对硬盘上每一块空间的引用次数。当被 clone 的时候，那个页面的引用次数就 +1 。 当某一块空间将被修改时，如果它的引用次数大于 1 ，那么它将被复制一份。&lt;/p&gt;
&lt;p&gt;具体的算法如下：&lt;/p&gt;
&lt;h4&gt;Create a Clone&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;复制根节点&lt;/li&gt;
&lt;li&gt;将根节点的直接子节点的引用计数 +1 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Modify Keys&lt;/h4&gt;
&lt;p&gt;将要修改一个节点时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果引用次数 &amp;gt; 1，那么将它复制，并且将它的子节点的引用计数 + 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过这样的方式，使得创建 Clone 消耗的时间非常小，而且能够最大可能地利用公共的页面。&lt;/p&gt;</content><category term="OS"></category><category term="linux"></category><category term="ALG"></category></entry></feed>